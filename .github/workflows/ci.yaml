name: CI - Go (Repo)

on:
  push:
    branches: [main]
  pull_request:

permissions: {}

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 📄 Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: ⚙️ Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🔧 Install mockery
        run: go install github.com/vektra/mockery/v3@latest

      - name: 🏃 Run pre-commit hooks
        uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1

  ci:
    needs: [pre-commit]
    if: github.event_name == 'push'
    uses: devantler-tech/reusable-workflows/.github/workflows/ci-go.yaml@800bac1f7de14fcc6b9b9bcf62e201308eafd15b # v1.15.12
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    permissions:
      contents: write
      issues: write
      packages: read
      pull-requests: write

  system-test-lifecycle:
    runs-on: ubuntu-latest
    # Run system tests on both push and pull request, but only after pre-commit and ci jobs complete
    needs: [pre-commit, ci]
    if: always() && (needs.ci.result == 'success' || needs.ci.result == 'skipped')
    strategy:
      matrix:
        include:
          - distribution: Kind
            cni: Default
            init-args: "--distribution Kind"
          - distribution: Kind
            cni: Cilium
            init-args: "--distribution Kind --cni Cilium"
          - distribution: Kind
            cni: Default
            init-args: "--distribution Kind --mirror-registry docker.io=https://registry-1.docker.io"
            mirror-registry: true
          - distribution: K3d
            cni: Default
            init-args: "--distribution K3d"
          - distribution: K3d
            cni: Cilium
            init-args: "--distribution K3d --cni Cilium"
          - distribution: K3d
            cni: Default
            init-args: "--distribution K3d --mirror-registry docker.io=https://registry-1.docker.io"
            mirror-registry: true
    steps:
      - name: 📄 Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: ⚙️ Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🏗️ Build application
        run: go build -o ksail .

      - name: 🧪 ksail init (${{ matrix.distribution }} + ${{ matrix.cni }})
        run: |
          ./ksail init ${{ matrix.init-args }}

      - name: 🧪 ksail cluster create
        run: |
          ./ksail cluster create

      - name: 🧪 ksail cluster list
        run: |
          ./ksail cluster list

      - name: 🧪 ksail cluster start
        run: |
          ./ksail cluster start

      - name: 🧪 ksail cluster stop
        run: |
          ./ksail cluster stop

      - name: 🧪 ksail workload reconcile
        run: |
          ./ksail workload reconcile

      - name: 🧪 ksail cluster delete
        run: |
          ./ksail cluster delete

      - name: 🧹 Cleanup
        run: |
          if [ -d "k8s" ]; then rm -rf "k8s"; fi
          if [ -f "kind.yaml" ]; then rm "kind.yaml"; fi
          if [ -f "k3d.yaml" ]; then rm "k3d.yaml"; fi
          if [ -f "ksail.yaml" ]; then rm "ksail.yaml"; fi

  system-test-mirror-registries:
    runs-on: ubuntu-latest
    needs: [pre-commit, ci]
    if: always() && (needs.ci.result == 'success' || needs.ci.result == 'skipped')
    strategy:
      matrix:
        include:
          # Single mirror with single cluster (Kind)
          - name: "1-mirror-1-kind"
            distribution: Kind
            cluster-count: 1
            init-args: "--distribution Kind --mirror-registry docker.io=https://registry-1.docker.io"
          # Single mirror with single cluster (K3d)
          - name: "1-mirror-1-k3d"
            distribution: K3d
            cluster-count: 1
            init-args: "--distribution K3d --mirror-registry docker.io=https://registry-1.docker.io"
          # Single mirror with two Kind clusters
          - name: "1-mirror-2-kind"
            distribution: Kind
            cluster-count: 2
            init-args: "--distribution Kind --mirror-registry docker.io=https://registry-1.docker.io"
          # Single mirror with two K3d clusters
          - name: "1-mirror-2-k3d"
            distribution: K3d
            cluster-count: 2
            init-args: "--distribution K3d --mirror-registry docker.io=https://registry-1.docker.io"
          # Single mirror with mixed clusters (1 Kind + 1 K3d)
          - name: "1-mirror-1-kind-1-k3d"
            distribution: Mixed
            cluster-count: 2
            init-args: "--mirror-registry docker.io=https://registry-1.docker.io"
          # Two mirrors with single Kind cluster
          - name: "2-mirrors-1-kind"
            distribution: Kind
            cluster-count: 1
            init-args: "--distribution Kind --mirror-registry docker.io=https://registry-1.docker.io --mirror-registry quay.io=https://quay.io"
          # Two mirrors with single K3d cluster
          - name: "2-mirrors-1-k3d"
            distribution: K3d
            cluster-count: 1
            init-args: "--distribution K3d --mirror-registry docker.io=https://registry-1.docker.io --mirror-registry quay.io=https://quay.io"
          # Two mirrors with mixed clusters (1 Kind + 1 K3d)
          - name: "2-mirrors-1-kind-1-k3d"
            distribution: Mixed
            cluster-count: 2
            init-args: "--mirror-registry docker.io=https://registry-1.docker.io --mirror-registry quay.io=https://quay.io"
    steps:
      - name: 📄 Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: ⚙️ Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🏗️ Build application
        run: go build -o ksail .

      - name: 🧪 Create clusters (${{ matrix.name }})
        run: |
          set -e
          
          if [ "${{ matrix.distribution }}" = "Mixed" ]; then
            # Create one Kind cluster and one K3d cluster
            echo "Creating Kind cluster..."
            mkdir -p test-cluster1
            cd test-cluster1
            ../ksail init --distribution Kind ${{ matrix.init-args }} --context cluster1
            ../ksail cluster create --context cluster1
            cd ..
            
            echo "Creating K3d cluster..."
            mkdir -p test-cluster2
            cd test-cluster2
            ../ksail init --distribution K3d ${{ matrix.init-args }} --context cluster2
            ../ksail cluster create --context cluster2
            cd ..
          else
            # Create clusters of the same distribution
            for i in $(seq 1 ${{ matrix.cluster-count }}); do
              echo "Creating ${{ matrix.distribution }} cluster $i..."
              cluster_name="cluster$i"
              cluster_dir="test-$cluster_name"
              mkdir -p "$cluster_dir"
              cd "$cluster_dir"
              ../ksail init ${{ matrix.init-args }} --context "$cluster_name"
              ../ksail cluster create --context "$cluster_name"
              cd ..
            done
          fi

      - name: 🧪 Test pull-through (${{ matrix.name }})
        run: |
          set -e
          
          # Check that registry containers exist and are running
          echo "Checking registry containers..."
          docker ps --filter "label=io.ksail.registry" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Count running registries
          registry_count=$(docker ps --filter "label=io.ksail.registry" --format "{{.Names}}" | wc -l)
          echo "Found $registry_count registry container(s)"
          
          if [ "$registry_count" -eq 0 ]; then
            echo "ERROR: No registry containers found"
            exit 1
          fi
          
          # For each cluster, test that it can pull through the mirror
          if [ "${{ matrix.distribution }}" = "Mixed" ]; then
            # Test Kind cluster
            echo "Testing pull-through for Kind cluster1..."
            kubectl --context=kind-cluster1 run test-nginx-cluster1 \
              --image=nginx:alpine \
              --restart=Never
            
            # Wait for pod to be ready (with timeout)
            echo "Waiting for pod to be ready..."
            kubectl --context=kind-cluster1 wait --for=condition=Ready pod/test-nginx-cluster1 --timeout=120s
            
            # Verify pod status
            pod_status=$(kubectl --context=kind-cluster1 get pod test-nginx-cluster1 -o jsonpath='{.status.phase}')
            if [ "$pod_status" != "Running" ]; then
              echo "ERROR: Pod failed to start. Status: $pod_status"
              kubectl --context=kind-cluster1 describe pod test-nginx-cluster1
              exit 1
            fi
            echo "✓ Pod test-nginx-cluster1 is running"
            
            # Clean up test pod
            kubectl --context=kind-cluster1 delete pod test-nginx-cluster1
            
            # Test K3d cluster
            echo "Testing pull-through for K3d cluster2..."
            kubectl --context=k3d-cluster2 run test-nginx-cluster2 \
              --image=nginx:alpine \
              --restart=Never
            
            # Wait for pod to be ready (with timeout)
            echo "Waiting for pod to be ready..."
            kubectl --context=k3d-cluster2 wait --for=condition=Ready pod/test-nginx-cluster2 --timeout=120s
            
            # Verify pod status
            pod_status=$(kubectl --context=k3d-cluster2 get pod test-nginx-cluster2 -o jsonpath='{.status.phase}')
            if [ "$pod_status" != "Running" ]; then
              echo "ERROR: Pod failed to start. Status: $pod_status"
              kubectl --context=k3d-cluster2 describe pod test-nginx-cluster2
              exit 1
            fi
            echo "✓ Pod test-nginx-cluster2 is running"
            
            # Clean up test pod
            kubectl --context=k3d-cluster2 delete pod test-nginx-cluster2
          else
            for i in $(seq 1 ${{ matrix.cluster-count }}); do
              cluster_name="cluster$i"
              
              if [ "${{ matrix.distribution }}" = "Kind" ]; then
                context="kind-$cluster_name"
              else
                context="k3d-$cluster_name"
              fi
              
              echo "Testing pull-through for $context..."
              kubectl --context="$context" run test-nginx-$cluster_name \
                --image=nginx:alpine \
                --restart=Never
              
              # Wait for pod to be ready (with timeout)
              echo "Waiting for pod to be ready..."
              kubectl --context="$context" wait --for=condition=Ready pod/test-nginx-$cluster_name --timeout=120s
              
              # Verify pod status
              pod_status=$(kubectl --context="$context" get pod test-nginx-$cluster_name -o jsonpath='{.status.phase}')
              if [ "$pod_status" != "Running" ]; then
                echo "ERROR: Pod failed to start. Status: $pod_status"
                kubectl --context="$context" describe pod test-nginx-$cluster_name
                exit 1
              fi
              echo "✓ Pod test-nginx-$cluster_name is running"
              
              # Clean up test pod
              kubectl --context="$context" delete pod test-nginx-$cluster_name
            done
          fi
          
          # Verify registry logs show pull-through activity
          echo "Verifying pull-through activity in registry logs..."
          pull_activity_found=false
          
          for registry in $(docker ps --filter "label=io.ksail.registry" --format "{{.Names}}"); do
            echo "=== Checking logs for $registry ==="
            # Look for GET requests which indicate image pulls
            if docker logs "$registry" 2>&1 | grep -q "GET /v2/"; then
              echo "✓ Pull-through activity detected in $registry"
              docker logs "$registry" 2>&1 | grep "GET /v2/" | tail -10
              pull_activity_found=true
            else
              echo "⚠ No pull-through activity detected in $registry"
            fi
          done
          
          if [ "$pull_activity_found" = false ]; then
            echo "ERROR: No pull-through activity detected in any registry"
            echo "Dumping all registry logs for debugging:"
            for registry in $(docker ps --filter "label=io.ksail.registry" --format "{{.Names}}"); do
              echo "=== Full logs for $registry ==="
              docker logs "$registry" 2>&1 | tail -50
            done
            exit 1
          fi
          
          echo "✓ Pull-through verification successful"

      - name: 🧪 Delete clusters (${{ matrix.name }})
        if: always()
        run: |
          if [ "${{ matrix.distribution }}" = "Mixed" ]; then
            # Delete Kind cluster
            cd test-cluster1
            ../ksail cluster delete --context cluster1 || true
            cd ..
            rm -rf test-cluster1
            
            # Delete K3d cluster
            cd test-cluster2
            ../ksail cluster delete --context cluster2 || true
            cd ..
            rm -rf test-cluster2
          else
            for i in $(seq 1 ${{ matrix.cluster-count }}); do
              cluster_name="cluster$i"
              cluster_dir="test-$cluster_name"
              
              if [ -d "$cluster_dir" ]; then
                cd "$cluster_dir"
                ../ksail cluster delete --context "$cluster_name" || true
                cd ..
                rm -rf "$cluster_dir"
              fi
            done
          fi

      - name: 🧹 Cleanup
        if: always()
        run: |
          # Clean up any remaining test directories
          rm -rf test-cluster* || true
          
          # Verify registries were cleaned up appropriately
          echo "Remaining registry containers:"
          docker ps -a --filter "label=io.ksail.registry" --format "table {{.Names}}\t{{.Status}}" || true

  system-test-status:
    runs-on: ubuntu-latest
    needs: [system-test-lifecycle, system-test-mirror-registries]
    if: always()
    steps:
      - name: Summarize matrix result
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "system-test-lifecycle result: $LIFECYCLE_TEST_RESULT"
          echo "system-test-mirror-registries result: $MIRROR_TEST_RESULT"
          
          # Check if both jobs succeeded or were skipped
          if [[ "$LIFECYCLE_TEST_RESULT" =~ ^(success|skipped)$ ]] && [[ "$MIRROR_TEST_RESULT" =~ ^(success|skipped)$ ]]; then
            echo "All system tests succeeded or were skipped."
            exit 0
          else
            echo "At least one system test failed."
            echo "  system-test-lifecycle: $LIFECYCLE_TEST_RESULT"
            echo "  system-test-mirror-registries: $MIRROR_TEST_RESULT"
            exit 1
          fi
        env:
          LIFECYCLE_TEST_RESULT: ${{ needs.system-test-lifecycle.result }}
          MIRROR_TEST_RESULT: ${{ needs.system-test-mirror-registries.result }}
