name: CI - Go (Repo)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions: {}

jobs:
  ci:
    if: github.event_name == 'push'
    uses: devantler-tech/reusable-workflows/.github/workflows/ci-go.yaml@accc9b52ba37468aedf9cf1b2a3244684000d730 # v1.11.22
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    permissions:
      contents: write
      issues: write
      packages: read
      pull-requests: write

  system-test:
    runs-on: ubuntu-latest
    # Run system tests on both push and pull request, but only after ci job succeeds (if it runs)
    needs: [ci]
    if: always() && (needs.ci.result == 'success' || needs.ci.result == 'skipped')
    strategy:
      matrix:
        init-args:
          - "init --container-engine Docker --distribution Kind"
          - "init --container-engine Docker --distribution K3d"
          - "init --container-engine Podman --distribution Kind"
          - "init --container-engine Podman --distribution K3d"
    steps:
      - name: 📄 Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: ⚙️ Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🏗️ Build application
        run: go build -o ksail .

      - name: 🧪 Run system test
        run: |
          ./ksail ${{ matrix.init-args }}
          ./ksail up
          ./ksail status
          ./ksail list
          ./ksail start
          ./ksail reconcile
          ./ksail down

      - name: 🧹 Cleanup
        run: |
          if [ -d "k8s" ]; then rm -rf "k8s"; fi
          if [ -f "kind.yaml" ]; then rm "kind.yaml"; fi
          if [ -f "k3d.yaml" ]; then rm "k3d.yaml"; fi
          if [ -f "ksail.yaml" ]; then rm "ksail.yaml"; fi

  system-test-status:
    runs-on: ubuntu-latest
    needs: [system-test]
    if: always()
    steps:
      - name: Summarize matrix result
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "system-test result: $MATRIX_RESULT"
          case "$MATRIX_RESULT" in
            success|skipped)
              echo "All matrix runs succeeded or were skipped."
              exit 0
              ;;
            *)
              echo "At least one matrix run failed."
              exit 1
              ;;
          esac
        env:
          MATRIX_RESULT: ${{ needs.system-test.result }}
