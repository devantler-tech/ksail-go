name: CI - Go (Repo)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions: {}

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 📄 Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: ⚙️ Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🔧 Install mockery
        run: go install github.com/vektra/mockery/v3@latest

      - name: 🏃 Run pre-commit hooks
        uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1

      - name: 📤 Commit and push changes if any
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Check if there are any changes
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "Changes detected, committing and pushing..."
            git add -A
            git commit -m "chore: apply pre-commit hooks [skip ci]"
            
            # Push using token explicitly (not persisted in git config)
            git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "HEAD:${GITHUB_REF}"
          else
            echo "No changes to commit"
          fi

  ci:
    needs: [pre-commit]
    if: github.event_name == 'push'
    uses: devantler-tech/reusable-workflows/.github/workflows/ci-go.yaml@800bac1f7de14fcc6b9b9bcf62e201308eafd15b # v1.15.12
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    permissions:
      contents: write
      issues: write
      packages: read
      pull-requests: write

  system-test:
    runs-on: ubuntu-latest
    # Run system tests on both push and pull request, but only after pre-commit and ci jobs complete
    needs: [pre-commit, ci]
    if: always() && (needs.ci.result == 'success' || needs.ci.result == 'skipped')
    strategy:
      matrix:
        include:
          - distribution: Kind
            cni: Default
            gitops: None
            init-args: "--distribution Kind"
          - distribution: Kind
            cni: Cilium
            gitops: None
            init-args: "--distribution Kind --cni Cilium"
          - distribution: Kind
            cni: Default
            gitops: Flux
            init-args: "--distribution Kind --gitops-engine Flux"
          - distribution: K3d
            cni: Default
            gitops: None
            init-args: "--distribution K3d"
          - distribution: K3d
            cni: Cilium
            gitops: None
            init-args: "--distribution K3d --cni Cilium"
          - distribution: K3d
            cni: Default
            gitops: Flux
            init-args: "--distribution K3d --gitops-engine Flux"
    steps:
      - name: 📄 Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: ⚙️ Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🔧 Install Flux CLI
        if: matrix.gitops == 'Flux'
        run: |
          curl -s https://fluxcd.io/install.sh | sudo bash

      - name: 🏗️ Build application
        run: go build -o ksail .

      - name: 🧪 ksail init (${{ matrix.distribution }} + ${{ matrix.cni }} + ${{ matrix.gitops }})
        run: |
          ./ksail init ${{ matrix.init-args }}

      - name: 🧪 ksail cluster create
        run: |
          ./ksail cluster create

      - name: 🧪 ksail cluster list
        run: |
          ./ksail cluster list

      - name: 🧪 ksail cluster start
        run: |
          ./ksail cluster start

      - name: 🧪 ksail cluster stop
        run: |
          ./ksail cluster stop

      - name: 🧪 ksail workload reconcile
        run: |
          ./ksail workload reconcile

      - name: 🧪 ksail cluster delete
        run: |
          ./ksail cluster delete

      - name: 🧹 Cleanup
        run: |
          if [ -d "k8s" ]; then rm -rf "k8s"; fi
          if [ -f "kind.yaml" ]; then rm "kind.yaml"; fi
          if [ -f "k3d.yaml" ]; then rm "k3d.yaml"; fi
          if [ -f "ksail.yaml" ]; then rm "ksail.yaml"; fi

  system-test-status:
    runs-on: ubuntu-latest
    needs: [system-test]
    if: always()
    steps:
      - name: Summarize matrix result
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "system-test result: $MATRIX_RESULT"
          case "$MATRIX_RESULT" in
            success|skipped)
              echo "All matrix runs succeeded or were skipped."
              exit 0
              ;;
            *)
              echo "At least one matrix run failed."
              exit 1
              ;;
          esac
        env:
          MATRIX_RESULT: ${{ needs.system-test.result }}
