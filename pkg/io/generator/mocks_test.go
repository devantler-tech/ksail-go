// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package generator

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockGenerator creates a new instance of MockGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerator[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerator[T] {
	mock := &MockGenerator[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenerator is an autogenerated mock type for the Generator type
type MockGenerator[T any] struct {
	mock.Mock
}

type MockGenerator_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockGenerator[T]) EXPECT() *MockGenerator_Expecter[T] {
	return &MockGenerator_Expecter[T]{mock: &_m.Mock}
}

// Generate provides a mock function for the type MockGenerator
func (_mock *MockGenerator[T]) Generate(model T) (string, error) {
	ret := _mock.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(T) (string, error)); ok {
		return returnFunc(model)
	}
	if returnFunc, ok := ret.Get(0).(func(T) string); ok {
		r0 = returnFunc(model)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(T) error); ok {
		r1 = returnFunc(model)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockGenerator_Generate_Call[T any] struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - model T
func (_e *MockGenerator_Expecter[T]) Generate(model interface{}) *MockGenerator_Generate_Call[T] {
	return &MockGenerator_Generate_Call[T]{Call: _e.mock.On("Generate", model)}
}

func (_c *MockGenerator_Generate_Call[T]) Run(run func(model T)) *MockGenerator_Generate_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGenerator_Generate_Call[T]) Return(s string, err error) *MockGenerator_Generate_Call[T] {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockGenerator_Generate_Call[T]) RunAndReturn(run func(model T) (string, error)) *MockGenerator_Generate_Call[T] {
	_c.Call.Return(run)
	return _c
}
