// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package helm

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockHelmClient creates a new instance of MockHelmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHelmClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHelmClient {
	mock := &MockHelmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHelmClient is an autogenerated mock type for the HelmClient type
type MockHelmClient struct {
	mock.Mock
}

type MockHelmClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHelmClient) EXPECT() *MockHelmClient_Expecter {
	return &MockHelmClient_Expecter{mock: &_m.Mock}
}

// AddRepository provides a mock function for the type MockHelmClient
func (_mock *MockHelmClient) AddRepository(context1 context.Context, repositoryEntry *RepositoryEntry) error {
	ret := _mock.Called(context1, repositoryEntry)

	if len(ret) == 0 {
		panic("no return value specified for AddRepository")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *RepositoryEntry) error); ok {
		r0 = returnFunc(context1, repositoryEntry)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHelmClient_AddRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRepository'
type MockHelmClient_AddRepository_Call struct {
	*mock.Call
}

// AddRepository is a helper method to define mock.On call
//   - context1 context.Context
//   - repositoryEntry *RepositoryEntry
func (_e *MockHelmClient_Expecter) AddRepository(context1 interface{}, repositoryEntry interface{}) *MockHelmClient_AddRepository_Call {
	return &MockHelmClient_AddRepository_Call{Call: _e.mock.On("AddRepository", context1, repositoryEntry)}
}

func (_c *MockHelmClient_AddRepository_Call) Run(run func(context1 context.Context, repositoryEntry *RepositoryEntry)) *MockHelmClient_AddRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *RepositoryEntry
		if args[1] != nil {
			arg1 = args[1].(*RepositoryEntry)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHelmClient_AddRepository_Call) Return(err error) *MockHelmClient_AddRepository_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHelmClient_AddRepository_Call) RunAndReturn(run func(context1 context.Context, repositoryEntry *RepositoryEntry) error) *MockHelmClient_AddRepository_Call {
	_c.Call.Return(run)
	return _c
}

// InstallChart provides a mock function for the type MockHelmClient
func (_mock *MockHelmClient) InstallChart(context1 context.Context, chartSpec *ChartSpec) (*ReleaseInfo, error) {
	ret := _mock.Called(context1, chartSpec)

	if len(ret) == 0 {
		panic("no return value specified for InstallChart")
	}

	var r0 *ReleaseInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ChartSpec) (*ReleaseInfo, error)); ok {
		return returnFunc(context1, chartSpec)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ChartSpec) *ReleaseInfo); ok {
		r0 = returnFunc(context1, chartSpec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReleaseInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ChartSpec) error); ok {
		r1 = returnFunc(context1, chartSpec)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHelmClient_InstallChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallChart'
type MockHelmClient_InstallChart_Call struct {
	*mock.Call
}

// InstallChart is a helper method to define mock.On call
//   - context1 context.Context
//   - chartSpec *ChartSpec
func (_e *MockHelmClient_Expecter) InstallChart(context1 interface{}, chartSpec interface{}) *MockHelmClient_InstallChart_Call {
	return &MockHelmClient_InstallChart_Call{Call: _e.mock.On("InstallChart", context1, chartSpec)}
}

func (_c *MockHelmClient_InstallChart_Call) Run(run func(context1 context.Context, chartSpec *ChartSpec)) *MockHelmClient_InstallChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ChartSpec
		if args[1] != nil {
			arg1 = args[1].(*ChartSpec)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHelmClient_InstallChart_Call) Return(releaseInfo *ReleaseInfo, err error) *MockHelmClient_InstallChart_Call {
	_c.Call.Return(releaseInfo, err)
	return _c
}

func (_c *MockHelmClient_InstallChart_Call) RunAndReturn(run func(context1 context.Context, chartSpec *ChartSpec) (*ReleaseInfo, error)) *MockHelmClient_InstallChart_Call {
	_c.Call.Return(run)
	return _c
}

// InstallOrUpgradeChart provides a mock function for the type MockHelmClient
func (_mock *MockHelmClient) InstallOrUpgradeChart(context1 context.Context, chartSpec *ChartSpec) (*ReleaseInfo, error) {
	ret := _mock.Called(context1, chartSpec)

	if len(ret) == 0 {
		panic("no return value specified for InstallOrUpgradeChart")
	}

	var r0 *ReleaseInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ChartSpec) (*ReleaseInfo, error)); ok {
		return returnFunc(context1, chartSpec)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ChartSpec) *ReleaseInfo); ok {
		r0 = returnFunc(context1, chartSpec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReleaseInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ChartSpec) error); ok {
		r1 = returnFunc(context1, chartSpec)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHelmClient_InstallOrUpgradeChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallOrUpgradeChart'
type MockHelmClient_InstallOrUpgradeChart_Call struct {
	*mock.Call
}

// InstallOrUpgradeChart is a helper method to define mock.On call
//   - context1 context.Context
//   - chartSpec *ChartSpec
func (_e *MockHelmClient_Expecter) InstallOrUpgradeChart(context1 interface{}, chartSpec interface{}) *MockHelmClient_InstallOrUpgradeChart_Call {
	return &MockHelmClient_InstallOrUpgradeChart_Call{Call: _e.mock.On("InstallOrUpgradeChart", context1, chartSpec)}
}

func (_c *MockHelmClient_InstallOrUpgradeChart_Call) Run(run func(context1 context.Context, chartSpec *ChartSpec)) *MockHelmClient_InstallOrUpgradeChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ChartSpec
		if args[1] != nil {
			arg1 = args[1].(*ChartSpec)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHelmClient_InstallOrUpgradeChart_Call) Return(releaseInfo *ReleaseInfo, err error) *MockHelmClient_InstallOrUpgradeChart_Call {
	_c.Call.Return(releaseInfo, err)
	return _c
}

func (_c *MockHelmClient_InstallOrUpgradeChart_Call) RunAndReturn(run func(context1 context.Context, chartSpec *ChartSpec) (*ReleaseInfo, error)) *MockHelmClient_InstallOrUpgradeChart_Call {
	_c.Call.Return(run)
	return _c
}

// UninstallRelease provides a mock function for the type MockHelmClient
func (_mock *MockHelmClient) UninstallRelease(context1 context.Context, s string, s1 string) error {
	ret := _mock.Called(context1, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for UninstallRelease")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(context1, s, s1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHelmClient_UninstallRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UninstallRelease'
type MockHelmClient_UninstallRelease_Call struct {
	*mock.Call
}

// UninstallRelease is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
func (_e *MockHelmClient_Expecter) UninstallRelease(context1 interface{}, s interface{}, s1 interface{}) *MockHelmClient_UninstallRelease_Call {
	return &MockHelmClient_UninstallRelease_Call{Call: _e.mock.On("UninstallRelease", context1, s, s1)}
}

func (_c *MockHelmClient_UninstallRelease_Call) Run(run func(context1 context.Context, s string, s1 string)) *MockHelmClient_UninstallRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHelmClient_UninstallRelease_Call) Return(err error) *MockHelmClient_UninstallRelease_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHelmClient_UninstallRelease_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string) error) *MockHelmClient_UninstallRelease_Call {
	_c.Call.Return(run)
	return _c
}
