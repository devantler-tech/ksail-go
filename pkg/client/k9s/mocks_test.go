// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package k9s

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockExecutor creates a new instance of MockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutor {
	mock := &MockExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExecutor is an autogenerated mock type for the Executor type
type MockExecutor struct {
	mock.Mock
}

type MockExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutor) EXPECT() *MockExecutor_Expecter {
	return &MockExecutor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockExecutor
func (_mock *MockExecutor) Execute() {
	_mock.Called()
	return
}

// MockExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockExecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockExecutor_Expecter) Execute() *MockExecutor_Execute_Call {
	return &MockExecutor_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockExecutor_Execute_Call) Run(run func()) *MockExecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutor_Execute_Call) Return() *MockExecutor_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutor_Execute_Call) RunAndReturn(run func()) *MockExecutor_Execute_Call {
	_c.Run(run)
	return _c
}
