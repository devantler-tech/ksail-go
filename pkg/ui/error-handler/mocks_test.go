// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package errorhandler

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockNormalizer creates a new instance of MockNormalizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNormalizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNormalizer {
	mock := &MockNormalizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNormalizer is an autogenerated mock type for the Normalizer type
type MockNormalizer struct {
	mock.Mock
}

type MockNormalizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNormalizer) EXPECT() *MockNormalizer_Expecter {
	return &MockNormalizer_Expecter{mock: &_m.Mock}
}

// Normalize provides a mock function for the type MockNormalizer
func (_mock *MockNormalizer) Normalize(raw string) string {
	ret := _mock.Called(raw)

	if len(ret) == 0 {
		panic("no return value specified for Normalize")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(raw)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockNormalizer_Normalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Normalize'
type MockNormalizer_Normalize_Call struct {
	*mock.Call
}

// Normalize is a helper method to define mock.On call
//   - raw string
func (_e *MockNormalizer_Expecter) Normalize(raw interface{}) *MockNormalizer_Normalize_Call {
	return &MockNormalizer_Normalize_Call{Call: _e.mock.On("Normalize", raw)}
}

func (_c *MockNormalizer_Normalize_Call) Run(run func(raw string)) *MockNormalizer_Normalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNormalizer_Normalize_Call) Return(s string) *MockNormalizer_Normalize_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockNormalizer_Normalize_Call) RunAndReturn(run func(raw string) string) *MockNormalizer_Normalize_Call {
	_c.Call.Return(run)
	return _c
}
