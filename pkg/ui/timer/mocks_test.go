// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package timer

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTimer creates a new instance of MockTimer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimer {
	mock := &MockTimer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTimer is an autogenerated mock type for the Timer type
type MockTimer struct {
	mock.Mock
}

type MockTimer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimer) EXPECT() *MockTimer_Expecter {
	return &MockTimer_Expecter{mock: &_m.Mock}
}

// GetTiming provides a mock function for the type MockTimer
func (_mock *MockTimer) GetTiming() (time.Duration, time.Duration) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTiming")
	}

	var r0 time.Duration
	var r1 time.Duration
	if returnFunc, ok := ret.Get(0).(func() (time.Duration, time.Duration)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func() time.Duration); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(time.Duration)
	}
	return r0, r1
}

// MockTimer_GetTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTiming'
type MockTimer_GetTiming_Call struct {
	*mock.Call
}

// GetTiming is a helper method to define mock.On call
func (_e *MockTimer_Expecter) GetTiming() *MockTimer_GetTiming_Call {
	return &MockTimer_GetTiming_Call{Call: _e.mock.On("GetTiming")}
}

func (_c *MockTimer_GetTiming_Call) Run(run func()) *MockTimer_GetTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimer_GetTiming_Call) Return(total time.Duration, stage time.Duration) *MockTimer_GetTiming_Call {
	_c.Call.Return(total, stage)
	return _c
}

func (_c *MockTimer_GetTiming_Call) RunAndReturn(run func() (time.Duration, time.Duration)) *MockTimer_GetTiming_Call {
	_c.Call.Return(run)
	return _c
}

// NewStage provides a mock function for the type MockTimer
func (_mock *MockTimer) NewStage(title string) {
	_mock.Called(title)
	return
}

// MockTimer_NewStage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewStage'
type MockTimer_NewStage_Call struct {
	*mock.Call
}

// NewStage is a helper method to define mock.On call
//   - title string
func (_e *MockTimer_Expecter) NewStage(title interface{}) *MockTimer_NewStage_Call {
	return &MockTimer_NewStage_Call{Call: _e.mock.On("NewStage", title)}
}

func (_c *MockTimer_NewStage_Call) Run(run func(title string)) *MockTimer_NewStage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTimer_NewStage_Call) Return() *MockTimer_NewStage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimer_NewStage_Call) RunAndReturn(run func(title string)) *MockTimer_NewStage_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function for the type MockTimer
func (_mock *MockTimer) Start() {
	_mock.Called()
	return
}

// MockTimer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockTimer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockTimer_Expecter) Start() *MockTimer_Start_Call {
	return &MockTimer_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockTimer_Start_Call) Run(run func()) *MockTimer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimer_Start_Call) Return() *MockTimer_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimer_Start_Call) RunAndReturn(run func()) *MockTimer_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function for the type MockTimer
func (_mock *MockTimer) Stop() {
	_mock.Called()
	return
}

// MockTimer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockTimer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockTimer_Expecter) Stop() *MockTimer_Stop_Call {
	return &MockTimer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockTimer_Stop_Call) Run(run func()) *MockTimer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimer_Stop_Call) Return() *MockTimer_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimer_Stop_Call) RunAndReturn(run func()) *MockTimer_Stop_Call {
	_c.Run(run)
	return _c
}
