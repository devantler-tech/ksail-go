// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package k8sclient

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/api/core/v1"
	"k8s.io/client-go/kubernetes"
)

// NewMockClientProvider creates a new instance of MockClientProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientProvider {
	mock := &MockClientProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientProvider is an autogenerated mock type for the ClientProvider type
type MockClientProvider struct {
	mock.Mock
}

type MockClientProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientProvider) EXPECT() *MockClientProvider_Expecter {
	return &MockClientProvider_Expecter{mock: &_m.Mock}
}

// CreateClient provides a mock function for the type MockClientProvider
func (_mock *MockClientProvider) CreateClient(kubeconfig string, context string) (*kubernetes.Clientset, error) {
	ret := _mock.Called(kubeconfig, context)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 *kubernetes.Clientset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*kubernetes.Clientset, error)); ok {
		return returnFunc(kubeconfig, context)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *kubernetes.Clientset); ok {
		r0 = returnFunc(kubeconfig, context)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Clientset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(kubeconfig, context)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientProvider_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type MockClientProvider_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - kubeconfig string
//   - context string
func (_e *MockClientProvider_Expecter) CreateClient(kubeconfig interface{}, context interface{}) *MockClientProvider_CreateClient_Call {
	return &MockClientProvider_CreateClient_Call{Call: _e.mock.On("CreateClient", kubeconfig, context)}
}

func (_c *MockClientProvider_CreateClient_Call) Run(run func(kubeconfig string, context string)) *MockClientProvider_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClientProvider_CreateClient_Call) Return(clientset *kubernetes.Clientset, err error) *MockClientProvider_CreateClient_Call {
	_c.Call.Return(clientset, err)
	return _c
}

func (_c *MockClientProvider_CreateClient_Call) RunAndReturn(run func(kubeconfig string, context string) (*kubernetes.Clientset, error)) *MockClientProvider_CreateClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComponentStatusProvider creates a new instance of MockComponentStatusProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponentStatusProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponentStatusProvider {
	mock := &MockComponentStatusProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockComponentStatusProvider is an autogenerated mock type for the ComponentStatusProvider type
type MockComponentStatusProvider struct {
	mock.Mock
}

type MockComponentStatusProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponentStatusProvider) EXPECT() *MockComponentStatusProvider_Expecter {
	return &MockComponentStatusProvider_Expecter{mock: &_m.Mock}
}

// GetComponentStatuses provides a mock function for the type MockComponentStatusProvider
func (_mock *MockComponentStatusProvider) GetComponentStatuses(ctx context.Context, clientset *kubernetes.Clientset) ([]v1.ComponentStatus, error) {
	ret := _mock.Called(ctx, clientset)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentStatuses")
	}

	var r0 []v1.ComponentStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *kubernetes.Clientset) ([]v1.ComponentStatus, error)); ok {
		return returnFunc(ctx, clientset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *kubernetes.Clientset) []v1.ComponentStatus); ok {
		r0 = returnFunc(ctx, clientset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.ComponentStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *kubernetes.Clientset) error); ok {
		r1 = returnFunc(ctx, clientset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComponentStatusProvider_GetComponentStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentStatuses'
type MockComponentStatusProvider_GetComponentStatuses_Call struct {
	*mock.Call
}

// GetComponentStatuses is a helper method to define mock.On call
//   - ctx context.Context
//   - clientset *kubernetes.Clientset
func (_e *MockComponentStatusProvider_Expecter) GetComponentStatuses(ctx interface{}, clientset interface{}) *MockComponentStatusProvider_GetComponentStatuses_Call {
	return &MockComponentStatusProvider_GetComponentStatuses_Call{Call: _e.mock.On("GetComponentStatuses", ctx, clientset)}
}

func (_c *MockComponentStatusProvider_GetComponentStatuses_Call) Run(run func(ctx context.Context, clientset *kubernetes.Clientset)) *MockComponentStatusProvider_GetComponentStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *kubernetes.Clientset
		if args[1] != nil {
			arg1 = args[1].(*kubernetes.Clientset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockComponentStatusProvider_GetComponentStatuses_Call) Return(componentStatuss []v1.ComponentStatus, err error) *MockComponentStatusProvider_GetComponentStatuses_Call {
	_c.Call.Return(componentStatuss, err)
	return _c
}

func (_c *MockComponentStatusProvider_GetComponentStatuses_Call) RunAndReturn(run func(ctx context.Context, clientset *kubernetes.Clientset) ([]v1.ComponentStatus, error)) *MockComponentStatusProvider_GetComponentStatuses_Call {
	_c.Call.Return(run)
	return _c
}
