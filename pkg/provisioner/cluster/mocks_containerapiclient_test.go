// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package clusterprovisioner

import (
	"context"
	"io"

	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/filters"
	"github.com/docker/docker/api/types/network"
	"github.com/opencontainers/image-spec/specs-go/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockContainerAPIClient creates a new instance of MockContainerAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContainerAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContainerAPIClient {
	mock := &MockContainerAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContainerAPIClient is an autogenerated mock type for the ContainerAPIClient type
type MockContainerAPIClient struct {
	mock.Mock
}

type MockContainerAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContainerAPIClient) EXPECT() *MockContainerAPIClient_Expecter {
	return &MockContainerAPIClient_Expecter{mock: &_m.Mock}
}

// ContainerAttach provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerAttach(ctx context.Context, container1 string, options container.AttachOptions) (types.HijackedResponse, error) {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerAttach")
	}

	var r0 types.HijackedResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.AttachOptions) (types.HijackedResponse, error)); ok {
		return returnFunc(ctx, container1, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.AttachOptions) types.HijackedResponse); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Get(0).(types.HijackedResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.AttachOptions) error); ok {
		r1 = returnFunc(ctx, container1, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerAttach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerAttach'
type MockContainerAPIClient_ContainerAttach_Call struct {
	*mock.Call
}

// ContainerAttach is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - options container.AttachOptions
func (_e *MockContainerAPIClient_Expecter) ContainerAttach(ctx interface{}, container1 interface{}, options interface{}) *MockContainerAPIClient_ContainerAttach_Call {
	return &MockContainerAPIClient_ContainerAttach_Call{Call: _e.mock.On("ContainerAttach", ctx, container1, options)}
}

func (_c *MockContainerAPIClient_ContainerAttach_Call) Run(run func(ctx context.Context, container1 string, options container.AttachOptions)) *MockContainerAPIClient_ContainerAttach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.AttachOptions
		if args[2] != nil {
			arg2 = args[2].(container.AttachOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerAttach_Call) Return(hijackedResponse types.HijackedResponse, err error) *MockContainerAPIClient_ContainerAttach_Call {
	_c.Call.Return(hijackedResponse, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerAttach_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.AttachOptions) (types.HijackedResponse, error)) *MockContainerAPIClient_ContainerAttach_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerCommit provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerCommit(ctx context.Context, container1 string, options container.CommitOptions) (container.CommitResponse, error) {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerCommit")
	}

	var r0 container.CommitResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.CommitOptions) (container.CommitResponse, error)); ok {
		return returnFunc(ctx, container1, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.CommitOptions) container.CommitResponse); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Get(0).(container.CommitResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.CommitOptions) error); ok {
		r1 = returnFunc(ctx, container1, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerCommit'
type MockContainerAPIClient_ContainerCommit_Call struct {
	*mock.Call
}

// ContainerCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - options container.CommitOptions
func (_e *MockContainerAPIClient_Expecter) ContainerCommit(ctx interface{}, container1 interface{}, options interface{}) *MockContainerAPIClient_ContainerCommit_Call {
	return &MockContainerAPIClient_ContainerCommit_Call{Call: _e.mock.On("ContainerCommit", ctx, container1, options)}
}

func (_c *MockContainerAPIClient_ContainerCommit_Call) Run(run func(ctx context.Context, container1 string, options container.CommitOptions)) *MockContainerAPIClient_ContainerCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.CommitOptions
		if args[2] != nil {
			arg2 = args[2].(container.CommitOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerCommit_Call) Return(v container.CommitResponse, err error) *MockContainerAPIClient_ContainerCommit_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerCommit_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.CommitOptions) (container.CommitResponse, error)) *MockContainerAPIClient_ContainerCommit_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerCreate provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (container.CreateResponse, error) {
	ret := _mock.Called(ctx, config, hostConfig, networkingConfig, platform, containerName)

	if len(ret) == 0 {
		panic("no return value specified for ContainerCreate")
	}

	var r0 container.CreateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)); ok {
		return returnFunc(ctx, config, hostConfig, networkingConfig, platform, containerName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) container.CreateResponse); ok {
		r0 = returnFunc(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r0 = ret.Get(0).(container.CreateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) error); ok {
		r1 = returnFunc(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerCreate'
type MockContainerAPIClient_ContainerCreate_Call struct {
	*mock.Call
}

// ContainerCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - config *container.Config
//   - hostConfig *container.HostConfig
//   - networkingConfig *network.NetworkingConfig
//   - platform *v1.Platform
//   - containerName string
func (_e *MockContainerAPIClient_Expecter) ContainerCreate(ctx interface{}, config interface{}, hostConfig interface{}, networkingConfig interface{}, platform interface{}, containerName interface{}) *MockContainerAPIClient_ContainerCreate_Call {
	return &MockContainerAPIClient_ContainerCreate_Call{Call: _e.mock.On("ContainerCreate", ctx, config, hostConfig, networkingConfig, platform, containerName)}
}

func (_c *MockContainerAPIClient_ContainerCreate_Call) Run(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string)) *MockContainerAPIClient_ContainerCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *container.Config
		if args[1] != nil {
			arg1 = args[1].(*container.Config)
		}
		var arg2 *container.HostConfig
		if args[2] != nil {
			arg2 = args[2].(*container.HostConfig)
		}
		var arg3 *network.NetworkingConfig
		if args[3] != nil {
			arg3 = args[3].(*network.NetworkingConfig)
		}
		var arg4 *v1.Platform
		if args[4] != nil {
			arg4 = args[4].(*v1.Platform)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerCreate_Call) Return(createResponse container.CreateResponse, err error) *MockContainerAPIClient_ContainerCreate_Call {
	_c.Call.Return(createResponse, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerCreate_Call) RunAndReturn(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (container.CreateResponse, error)) *MockContainerAPIClient_ContainerCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerDiff provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerDiff(ctx context.Context, container1 string) ([]container.FilesystemChange, error) {
	ret := _mock.Called(ctx, container1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerDiff")
	}

	var r0 []container.FilesystemChange
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]container.FilesystemChange, error)); ok {
		return returnFunc(ctx, container1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []container.FilesystemChange); ok {
		r0 = returnFunc(ctx, container1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]container.FilesystemChange)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, container1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerDiff'
type MockContainerAPIClient_ContainerDiff_Call struct {
	*mock.Call
}

// ContainerDiff is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
func (_e *MockContainerAPIClient_Expecter) ContainerDiff(ctx interface{}, container1 interface{}) *MockContainerAPIClient_ContainerDiff_Call {
	return &MockContainerAPIClient_ContainerDiff_Call{Call: _e.mock.On("ContainerDiff", ctx, container1)}
}

func (_c *MockContainerAPIClient_ContainerDiff_Call) Run(run func(ctx context.Context, container1 string)) *MockContainerAPIClient_ContainerDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerDiff_Call) Return(filesystemChanges []container.FilesystemChange, err error) *MockContainerAPIClient_ContainerDiff_Call {
	_c.Call.Return(filesystemChanges, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerDiff_Call) RunAndReturn(run func(ctx context.Context, container1 string) ([]container.FilesystemChange, error)) *MockContainerAPIClient_ContainerDiff_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecAttach provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerExecAttach(ctx context.Context, execID string, options container.ExecAttachOptions) (types.HijackedResponse, error) {
	ret := _mock.Called(ctx, execID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecAttach")
	}

	var r0 types.HijackedResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ExecAttachOptions) (types.HijackedResponse, error)); ok {
		return returnFunc(ctx, execID, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ExecAttachOptions) types.HijackedResponse); ok {
		r0 = returnFunc(ctx, execID, options)
	} else {
		r0 = ret.Get(0).(types.HijackedResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.ExecAttachOptions) error); ok {
		r1 = returnFunc(ctx, execID, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerExecAttach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecAttach'
type MockContainerAPIClient_ContainerExecAttach_Call struct {
	*mock.Call
}

// ContainerExecAttach is a helper method to define mock.On call
//   - ctx context.Context
//   - execID string
//   - options container.ExecAttachOptions
func (_e *MockContainerAPIClient_Expecter) ContainerExecAttach(ctx interface{}, execID interface{}, options interface{}) *MockContainerAPIClient_ContainerExecAttach_Call {
	return &MockContainerAPIClient_ContainerExecAttach_Call{Call: _e.mock.On("ContainerExecAttach", ctx, execID, options)}
}

func (_c *MockContainerAPIClient_ContainerExecAttach_Call) Run(run func(ctx context.Context, execID string, options container.ExecAttachOptions)) *MockContainerAPIClient_ContainerExecAttach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.ExecAttachOptions
		if args[2] != nil {
			arg2 = args[2].(container.ExecAttachOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerExecAttach_Call) Return(hijackedResponse types.HijackedResponse, err error) *MockContainerAPIClient_ContainerExecAttach_Call {
	_c.Call.Return(hijackedResponse, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerExecAttach_Call) RunAndReturn(run func(ctx context.Context, execID string, options container.ExecAttachOptions) (types.HijackedResponse, error)) *MockContainerAPIClient_ContainerExecAttach_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecCreate provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerExecCreate(ctx context.Context, container1 string, options container.ExecOptions) (container.ExecCreateResponse, error) {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecCreate")
	}

	var r0 container.ExecCreateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ExecOptions) (container.ExecCreateResponse, error)); ok {
		return returnFunc(ctx, container1, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ExecOptions) container.ExecCreateResponse); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Get(0).(container.ExecCreateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.ExecOptions) error); ok {
		r1 = returnFunc(ctx, container1, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerExecCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecCreate'
type MockContainerAPIClient_ContainerExecCreate_Call struct {
	*mock.Call
}

// ContainerExecCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - options container.ExecOptions
func (_e *MockContainerAPIClient_Expecter) ContainerExecCreate(ctx interface{}, container1 interface{}, options interface{}) *MockContainerAPIClient_ContainerExecCreate_Call {
	return &MockContainerAPIClient_ContainerExecCreate_Call{Call: _e.mock.On("ContainerExecCreate", ctx, container1, options)}
}

func (_c *MockContainerAPIClient_ContainerExecCreate_Call) Run(run func(ctx context.Context, container1 string, options container.ExecOptions)) *MockContainerAPIClient_ContainerExecCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.ExecOptions
		if args[2] != nil {
			arg2 = args[2].(container.ExecOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerExecCreate_Call) Return(v container.ExecCreateResponse, err error) *MockContainerAPIClient_ContainerExecCreate_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerExecCreate_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.ExecOptions) (container.ExecCreateResponse, error)) *MockContainerAPIClient_ContainerExecCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecInspect provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerExecInspect(ctx context.Context, execID string) (container.ExecInspect, error) {
	ret := _mock.Called(ctx, execID)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecInspect")
	}

	var r0 container.ExecInspect
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (container.ExecInspect, error)); ok {
		return returnFunc(ctx, execID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) container.ExecInspect); ok {
		r0 = returnFunc(ctx, execID)
	} else {
		r0 = ret.Get(0).(container.ExecInspect)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, execID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerExecInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecInspect'
type MockContainerAPIClient_ContainerExecInspect_Call struct {
	*mock.Call
}

// ContainerExecInspect is a helper method to define mock.On call
//   - ctx context.Context
//   - execID string
func (_e *MockContainerAPIClient_Expecter) ContainerExecInspect(ctx interface{}, execID interface{}) *MockContainerAPIClient_ContainerExecInspect_Call {
	return &MockContainerAPIClient_ContainerExecInspect_Call{Call: _e.mock.On("ContainerExecInspect", ctx, execID)}
}

func (_c *MockContainerAPIClient_ContainerExecInspect_Call) Run(run func(ctx context.Context, execID string)) *MockContainerAPIClient_ContainerExecInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerExecInspect_Call) Return(execInspect container.ExecInspect, err error) *MockContainerAPIClient_ContainerExecInspect_Call {
	_c.Call.Return(execInspect, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerExecInspect_Call) RunAndReturn(run func(ctx context.Context, execID string) (container.ExecInspect, error)) *MockContainerAPIClient_ContainerExecInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecResize provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerExecResize(ctx context.Context, execID string, options container.ResizeOptions) error {
	ret := _mock.Called(ctx, execID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecResize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ResizeOptions) error); ok {
		r0 = returnFunc(ctx, execID, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerExecResize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecResize'
type MockContainerAPIClient_ContainerExecResize_Call struct {
	*mock.Call
}

// ContainerExecResize is a helper method to define mock.On call
//   - ctx context.Context
//   - execID string
//   - options container.ResizeOptions
func (_e *MockContainerAPIClient_Expecter) ContainerExecResize(ctx interface{}, execID interface{}, options interface{}) *MockContainerAPIClient_ContainerExecResize_Call {
	return &MockContainerAPIClient_ContainerExecResize_Call{Call: _e.mock.On("ContainerExecResize", ctx, execID, options)}
}

func (_c *MockContainerAPIClient_ContainerExecResize_Call) Run(run func(ctx context.Context, execID string, options container.ResizeOptions)) *MockContainerAPIClient_ContainerExecResize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.ResizeOptions
		if args[2] != nil {
			arg2 = args[2].(container.ResizeOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerExecResize_Call) Return(err error) *MockContainerAPIClient_ContainerExecResize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerExecResize_Call) RunAndReturn(run func(ctx context.Context, execID string, options container.ResizeOptions) error) *MockContainerAPIClient_ContainerExecResize_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecStart provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerExecStart(ctx context.Context, execID string, options container.ExecStartOptions) error {
	ret := _mock.Called(ctx, execID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecStart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ExecStartOptions) error); ok {
		r0 = returnFunc(ctx, execID, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerExecStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecStart'
type MockContainerAPIClient_ContainerExecStart_Call struct {
	*mock.Call
}

// ContainerExecStart is a helper method to define mock.On call
//   - ctx context.Context
//   - execID string
//   - options container.ExecStartOptions
func (_e *MockContainerAPIClient_Expecter) ContainerExecStart(ctx interface{}, execID interface{}, options interface{}) *MockContainerAPIClient_ContainerExecStart_Call {
	return &MockContainerAPIClient_ContainerExecStart_Call{Call: _e.mock.On("ContainerExecStart", ctx, execID, options)}
}

func (_c *MockContainerAPIClient_ContainerExecStart_Call) Run(run func(ctx context.Context, execID string, options container.ExecStartOptions)) *MockContainerAPIClient_ContainerExecStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.ExecStartOptions
		if args[2] != nil {
			arg2 = args[2].(container.ExecStartOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerExecStart_Call) Return(err error) *MockContainerAPIClient_ContainerExecStart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerExecStart_Call) RunAndReturn(run func(ctx context.Context, execID string, options container.ExecStartOptions) error) *MockContainerAPIClient_ContainerExecStart_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExport provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerExport(ctx context.Context, container1 string) (io.ReadCloser, error) {
	ret := _mock.Called(ctx, container1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExport")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return returnFunc(ctx, container1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = returnFunc(ctx, container1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, container1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExport'
type MockContainerAPIClient_ContainerExport_Call struct {
	*mock.Call
}

// ContainerExport is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
func (_e *MockContainerAPIClient_Expecter) ContainerExport(ctx interface{}, container1 interface{}) *MockContainerAPIClient_ContainerExport_Call {
	return &MockContainerAPIClient_ContainerExport_Call{Call: _e.mock.On("ContainerExport", ctx, container1)}
}

func (_c *MockContainerAPIClient_ContainerExport_Call) Run(run func(ctx context.Context, container1 string)) *MockContainerAPIClient_ContainerExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerExport_Call) Return(readCloser io.ReadCloser, err error) *MockContainerAPIClient_ContainerExport_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerExport_Call) RunAndReturn(run func(ctx context.Context, container1 string) (io.ReadCloser, error)) *MockContainerAPIClient_ContainerExport_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerInspect provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerInspect(ctx context.Context, container1 string) (container.InspectResponse, error) {
	ret := _mock.Called(ctx, container1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerInspect")
	}

	var r0 container.InspectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (container.InspectResponse, error)); ok {
		return returnFunc(ctx, container1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) container.InspectResponse); ok {
		r0 = returnFunc(ctx, container1)
	} else {
		r0 = ret.Get(0).(container.InspectResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, container1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerInspect'
type MockContainerAPIClient_ContainerInspect_Call struct {
	*mock.Call
}

// ContainerInspect is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
func (_e *MockContainerAPIClient_Expecter) ContainerInspect(ctx interface{}, container1 interface{}) *MockContainerAPIClient_ContainerInspect_Call {
	return &MockContainerAPIClient_ContainerInspect_Call{Call: _e.mock.On("ContainerInspect", ctx, container1)}
}

func (_c *MockContainerAPIClient_ContainerInspect_Call) Run(run func(ctx context.Context, container1 string)) *MockContainerAPIClient_ContainerInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerInspect_Call) Return(inspectResponse container.InspectResponse, err error) *MockContainerAPIClient_ContainerInspect_Call {
	_c.Call.Return(inspectResponse, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerInspect_Call) RunAndReturn(run func(ctx context.Context, container1 string) (container.InspectResponse, error)) *MockContainerAPIClient_ContainerInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerInspectWithRaw provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerInspectWithRaw(ctx context.Context, container1 string, getSize bool) (container.InspectResponse, []byte, error) {
	ret := _mock.Called(ctx, container1, getSize)

	if len(ret) == 0 {
		panic("no return value specified for ContainerInspectWithRaw")
	}

	var r0 container.InspectResponse
	var r1 []byte
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (container.InspectResponse, []byte, error)); ok {
		return returnFunc(ctx, container1, getSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) container.InspectResponse); ok {
		r0 = returnFunc(ctx, container1, getSize)
	} else {
		r0 = ret.Get(0).(container.InspectResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) []byte); ok {
		r1 = returnFunc(ctx, container1, getSize)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, bool) error); ok {
		r2 = returnFunc(ctx, container1, getSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockContainerAPIClient_ContainerInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerInspectWithRaw'
type MockContainerAPIClient_ContainerInspectWithRaw_Call struct {
	*mock.Call
}

// ContainerInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - getSize bool
func (_e *MockContainerAPIClient_Expecter) ContainerInspectWithRaw(ctx interface{}, container1 interface{}, getSize interface{}) *MockContainerAPIClient_ContainerInspectWithRaw_Call {
	return &MockContainerAPIClient_ContainerInspectWithRaw_Call{Call: _e.mock.On("ContainerInspectWithRaw", ctx, container1, getSize)}
}

func (_c *MockContainerAPIClient_ContainerInspectWithRaw_Call) Run(run func(ctx context.Context, container1 string, getSize bool)) *MockContainerAPIClient_ContainerInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerInspectWithRaw_Call) Return(inspectResponse container.InspectResponse, bytes []byte, err error) *MockContainerAPIClient_ContainerInspectWithRaw_Call {
	_c.Call.Return(inspectResponse, bytes, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerInspectWithRaw_Call) RunAndReturn(run func(ctx context.Context, container1 string, getSize bool) (container.InspectResponse, []byte, error)) *MockContainerAPIClient_ContainerInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerKill provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerKill(ctx context.Context, container1 string, signal string) error {
	ret := _mock.Called(ctx, container1, signal)

	if len(ret) == 0 {
		panic("no return value specified for ContainerKill")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, container1, signal)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerKill'
type MockContainerAPIClient_ContainerKill_Call struct {
	*mock.Call
}

// ContainerKill is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - signal string
func (_e *MockContainerAPIClient_Expecter) ContainerKill(ctx interface{}, container1 interface{}, signal interface{}) *MockContainerAPIClient_ContainerKill_Call {
	return &MockContainerAPIClient_ContainerKill_Call{Call: _e.mock.On("ContainerKill", ctx, container1, signal)}
}

func (_c *MockContainerAPIClient_ContainerKill_Call) Run(run func(ctx context.Context, container1 string, signal string)) *MockContainerAPIClient_ContainerKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerKill_Call) Return(err error) *MockContainerAPIClient_ContainerKill_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerKill_Call) RunAndReturn(run func(ctx context.Context, container1 string, signal string) error) *MockContainerAPIClient_ContainerKill_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerList provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerList(ctx context.Context, options container.ListOptions) ([]container.Summary, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerList")
	}

	var r0 []container.Summary
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, container.ListOptions) ([]container.Summary, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, container.ListOptions) []container.Summary); ok {
		r0 = returnFunc(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]container.Summary)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, container.ListOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerList'
type MockContainerAPIClient_ContainerList_Call struct {
	*mock.Call
}

// ContainerList is a helper method to define mock.On call
//   - ctx context.Context
//   - options container.ListOptions
func (_e *MockContainerAPIClient_Expecter) ContainerList(ctx interface{}, options interface{}) *MockContainerAPIClient_ContainerList_Call {
	return &MockContainerAPIClient_ContainerList_Call{Call: _e.mock.On("ContainerList", ctx, options)}
}

func (_c *MockContainerAPIClient_ContainerList_Call) Run(run func(ctx context.Context, options container.ListOptions)) *MockContainerAPIClient_ContainerList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 container.ListOptions
		if args[1] != nil {
			arg1 = args[1].(container.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerList_Call) Return(summarys []container.Summary, err error) *MockContainerAPIClient_ContainerList_Call {
	_c.Call.Return(summarys, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerList_Call) RunAndReturn(run func(ctx context.Context, options container.ListOptions) ([]container.Summary, error)) *MockContainerAPIClient_ContainerList_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerLogs provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerLogs(ctx context.Context, container1 string, options container.LogsOptions) (io.ReadCloser, error) {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerLogs")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) (io.ReadCloser, error)); ok {
		return returnFunc(ctx, container1, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) io.ReadCloser); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.LogsOptions) error); ok {
		r1 = returnFunc(ctx, container1, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerLogs'
type MockContainerAPIClient_ContainerLogs_Call struct {
	*mock.Call
}

// ContainerLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - options container.LogsOptions
func (_e *MockContainerAPIClient_Expecter) ContainerLogs(ctx interface{}, container1 interface{}, options interface{}) *MockContainerAPIClient_ContainerLogs_Call {
	return &MockContainerAPIClient_ContainerLogs_Call{Call: _e.mock.On("ContainerLogs", ctx, container1, options)}
}

func (_c *MockContainerAPIClient_ContainerLogs_Call) Run(run func(ctx context.Context, container1 string, options container.LogsOptions)) *MockContainerAPIClient_ContainerLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.LogsOptions
		if args[2] != nil {
			arg2 = args[2].(container.LogsOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerLogs_Call) Return(readCloser io.ReadCloser, err error) *MockContainerAPIClient_ContainerLogs_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerLogs_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.LogsOptions) (io.ReadCloser, error)) *MockContainerAPIClient_ContainerLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerPause provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerPause(ctx context.Context, container1 string) error {
	ret := _mock.Called(ctx, container1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerPause")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, container1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerPause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerPause'
type MockContainerAPIClient_ContainerPause_Call struct {
	*mock.Call
}

// ContainerPause is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
func (_e *MockContainerAPIClient_Expecter) ContainerPause(ctx interface{}, container1 interface{}) *MockContainerAPIClient_ContainerPause_Call {
	return &MockContainerAPIClient_ContainerPause_Call{Call: _e.mock.On("ContainerPause", ctx, container1)}
}

func (_c *MockContainerAPIClient_ContainerPause_Call) Run(run func(ctx context.Context, container1 string)) *MockContainerAPIClient_ContainerPause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerPause_Call) Return(err error) *MockContainerAPIClient_ContainerPause_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerPause_Call) RunAndReturn(run func(ctx context.Context, container1 string) error) *MockContainerAPIClient_ContainerPause_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRemove provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerRemove(ctx context.Context, container1 string, options container.RemoveOptions) error {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRemove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.RemoveOptions) error); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRemove'
type MockContainerAPIClient_ContainerRemove_Call struct {
	*mock.Call
}

// ContainerRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - options container.RemoveOptions
func (_e *MockContainerAPIClient_Expecter) ContainerRemove(ctx interface{}, container1 interface{}, options interface{}) *MockContainerAPIClient_ContainerRemove_Call {
	return &MockContainerAPIClient_ContainerRemove_Call{Call: _e.mock.On("ContainerRemove", ctx, container1, options)}
}

func (_c *MockContainerAPIClient_ContainerRemove_Call) Run(run func(ctx context.Context, container1 string, options container.RemoveOptions)) *MockContainerAPIClient_ContainerRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.RemoveOptions
		if args[2] != nil {
			arg2 = args[2].(container.RemoveOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerRemove_Call) Return(err error) *MockContainerAPIClient_ContainerRemove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerRemove_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.RemoveOptions) error) *MockContainerAPIClient_ContainerRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRename provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerRename(ctx context.Context, container1 string, newContainerName string) error {
	ret := _mock.Called(ctx, container1, newContainerName)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRename")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, container1, newContainerName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerRename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRename'
type MockContainerAPIClient_ContainerRename_Call struct {
	*mock.Call
}

// ContainerRename is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - newContainerName string
func (_e *MockContainerAPIClient_Expecter) ContainerRename(ctx interface{}, container1 interface{}, newContainerName interface{}) *MockContainerAPIClient_ContainerRename_Call {
	return &MockContainerAPIClient_ContainerRename_Call{Call: _e.mock.On("ContainerRename", ctx, container1, newContainerName)}
}

func (_c *MockContainerAPIClient_ContainerRename_Call) Run(run func(ctx context.Context, container1 string, newContainerName string)) *MockContainerAPIClient_ContainerRename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerRename_Call) Return(err error) *MockContainerAPIClient_ContainerRename_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerRename_Call) RunAndReturn(run func(ctx context.Context, container1 string, newContainerName string) error) *MockContainerAPIClient_ContainerRename_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerResize provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerResize(ctx context.Context, container1 string, options container.ResizeOptions) error {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerResize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.ResizeOptions) error); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerResize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerResize'
type MockContainerAPIClient_ContainerResize_Call struct {
	*mock.Call
}

// ContainerResize is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - options container.ResizeOptions
func (_e *MockContainerAPIClient_Expecter) ContainerResize(ctx interface{}, container1 interface{}, options interface{}) *MockContainerAPIClient_ContainerResize_Call {
	return &MockContainerAPIClient_ContainerResize_Call{Call: _e.mock.On("ContainerResize", ctx, container1, options)}
}

func (_c *MockContainerAPIClient_ContainerResize_Call) Run(run func(ctx context.Context, container1 string, options container.ResizeOptions)) *MockContainerAPIClient_ContainerResize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.ResizeOptions
		if args[2] != nil {
			arg2 = args[2].(container.ResizeOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerResize_Call) Return(err error) *MockContainerAPIClient_ContainerResize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerResize_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.ResizeOptions) error) *MockContainerAPIClient_ContainerResize_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRestart provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerRestart(ctx context.Context, container1 string, options container.StopOptions) error {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRestart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.StopOptions) error); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerRestart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRestart'
type MockContainerAPIClient_ContainerRestart_Call struct {
	*mock.Call
}

// ContainerRestart is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - options container.StopOptions
func (_e *MockContainerAPIClient_Expecter) ContainerRestart(ctx interface{}, container1 interface{}, options interface{}) *MockContainerAPIClient_ContainerRestart_Call {
	return &MockContainerAPIClient_ContainerRestart_Call{Call: _e.mock.On("ContainerRestart", ctx, container1, options)}
}

func (_c *MockContainerAPIClient_ContainerRestart_Call) Run(run func(ctx context.Context, container1 string, options container.StopOptions)) *MockContainerAPIClient_ContainerRestart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.StopOptions
		if args[2] != nil {
			arg2 = args[2].(container.StopOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerRestart_Call) Return(err error) *MockContainerAPIClient_ContainerRestart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerRestart_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.StopOptions) error) *MockContainerAPIClient_ContainerRestart_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStart provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerStart(ctx context.Context, container1 string, options container.StartOptions) error {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.StartOptions) error); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStart'
type MockContainerAPIClient_ContainerStart_Call struct {
	*mock.Call
}

// ContainerStart is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - options container.StartOptions
func (_e *MockContainerAPIClient_Expecter) ContainerStart(ctx interface{}, container1 interface{}, options interface{}) *MockContainerAPIClient_ContainerStart_Call {
	return &MockContainerAPIClient_ContainerStart_Call{Call: _e.mock.On("ContainerStart", ctx, container1, options)}
}

func (_c *MockContainerAPIClient_ContainerStart_Call) Run(run func(ctx context.Context, container1 string, options container.StartOptions)) *MockContainerAPIClient_ContainerStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.StartOptions
		if args[2] != nil {
			arg2 = args[2].(container.StartOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerStart_Call) Return(err error) *MockContainerAPIClient_ContainerStart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerStart_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.StartOptions) error) *MockContainerAPIClient_ContainerStart_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStatPath provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerStatPath(ctx context.Context, container1 string, path string) (container.PathStat, error) {
	ret := _mock.Called(ctx, container1, path)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStatPath")
	}

	var r0 container.PathStat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (container.PathStat, error)); ok {
		return returnFunc(ctx, container1, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) container.PathStat); ok {
		r0 = returnFunc(ctx, container1, path)
	} else {
		r0 = ret.Get(0).(container.PathStat)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, container1, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerStatPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStatPath'
type MockContainerAPIClient_ContainerStatPath_Call struct {
	*mock.Call
}

// ContainerStatPath is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - path string
func (_e *MockContainerAPIClient_Expecter) ContainerStatPath(ctx interface{}, container1 interface{}, path interface{}) *MockContainerAPIClient_ContainerStatPath_Call {
	return &MockContainerAPIClient_ContainerStatPath_Call{Call: _e.mock.On("ContainerStatPath", ctx, container1, path)}
}

func (_c *MockContainerAPIClient_ContainerStatPath_Call) Run(run func(ctx context.Context, container1 string, path string)) *MockContainerAPIClient_ContainerStatPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerStatPath_Call) Return(pathStat container.PathStat, err error) *MockContainerAPIClient_ContainerStatPath_Call {
	_c.Call.Return(pathStat, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerStatPath_Call) RunAndReturn(run func(ctx context.Context, container1 string, path string) (container.PathStat, error)) *MockContainerAPIClient_ContainerStatPath_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStats provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerStats(ctx context.Context, container1 string, stream bool) (container.StatsResponseReader, error) {
	ret := _mock.Called(ctx, container1, stream)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStats")
	}

	var r0 container.StatsResponseReader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (container.StatsResponseReader, error)); ok {
		return returnFunc(ctx, container1, stream)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) container.StatsResponseReader); ok {
		r0 = returnFunc(ctx, container1, stream)
	} else {
		r0 = ret.Get(0).(container.StatsResponseReader)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, container1, stream)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStats'
type MockContainerAPIClient_ContainerStats_Call struct {
	*mock.Call
}

// ContainerStats is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - stream bool
func (_e *MockContainerAPIClient_Expecter) ContainerStats(ctx interface{}, container1 interface{}, stream interface{}) *MockContainerAPIClient_ContainerStats_Call {
	return &MockContainerAPIClient_ContainerStats_Call{Call: _e.mock.On("ContainerStats", ctx, container1, stream)}
}

func (_c *MockContainerAPIClient_ContainerStats_Call) Run(run func(ctx context.Context, container1 string, stream bool)) *MockContainerAPIClient_ContainerStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerStats_Call) Return(statsResponseReader container.StatsResponseReader, err error) *MockContainerAPIClient_ContainerStats_Call {
	_c.Call.Return(statsResponseReader, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerStats_Call) RunAndReturn(run func(ctx context.Context, container1 string, stream bool) (container.StatsResponseReader, error)) *MockContainerAPIClient_ContainerStats_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStatsOneShot provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerStatsOneShot(ctx context.Context, container1 string) (container.StatsResponseReader, error) {
	ret := _mock.Called(ctx, container1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStatsOneShot")
	}

	var r0 container.StatsResponseReader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (container.StatsResponseReader, error)); ok {
		return returnFunc(ctx, container1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) container.StatsResponseReader); ok {
		r0 = returnFunc(ctx, container1)
	} else {
		r0 = ret.Get(0).(container.StatsResponseReader)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, container1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerStatsOneShot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStatsOneShot'
type MockContainerAPIClient_ContainerStatsOneShot_Call struct {
	*mock.Call
}

// ContainerStatsOneShot is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
func (_e *MockContainerAPIClient_Expecter) ContainerStatsOneShot(ctx interface{}, container1 interface{}) *MockContainerAPIClient_ContainerStatsOneShot_Call {
	return &MockContainerAPIClient_ContainerStatsOneShot_Call{Call: _e.mock.On("ContainerStatsOneShot", ctx, container1)}
}

func (_c *MockContainerAPIClient_ContainerStatsOneShot_Call) Run(run func(ctx context.Context, container1 string)) *MockContainerAPIClient_ContainerStatsOneShot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerStatsOneShot_Call) Return(statsResponseReader container.StatsResponseReader, err error) *MockContainerAPIClient_ContainerStatsOneShot_Call {
	_c.Call.Return(statsResponseReader, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerStatsOneShot_Call) RunAndReturn(run func(ctx context.Context, container1 string) (container.StatsResponseReader, error)) *MockContainerAPIClient_ContainerStatsOneShot_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStop provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerStop(ctx context.Context, container1 string, options container.StopOptions) error {
	ret := _mock.Called(ctx, container1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.StopOptions) error); ok {
		r0 = returnFunc(ctx, container1, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStop'
type MockContainerAPIClient_ContainerStop_Call struct {
	*mock.Call
}

// ContainerStop is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - options container.StopOptions
func (_e *MockContainerAPIClient_Expecter) ContainerStop(ctx interface{}, container1 interface{}, options interface{}) *MockContainerAPIClient_ContainerStop_Call {
	return &MockContainerAPIClient_ContainerStop_Call{Call: _e.mock.On("ContainerStop", ctx, container1, options)}
}

func (_c *MockContainerAPIClient_ContainerStop_Call) Run(run func(ctx context.Context, container1 string, options container.StopOptions)) *MockContainerAPIClient_ContainerStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.StopOptions
		if args[2] != nil {
			arg2 = args[2].(container.StopOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerStop_Call) Return(err error) *MockContainerAPIClient_ContainerStop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerStop_Call) RunAndReturn(run func(ctx context.Context, container1 string, options container.StopOptions) error) *MockContainerAPIClient_ContainerStop_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerTop provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerTop(ctx context.Context, container1 string, arguments []string) (container.TopResponse, error) {
	ret := _mock.Called(ctx, container1, arguments)

	if len(ret) == 0 {
		panic("no return value specified for ContainerTop")
	}

	var r0 container.TopResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) (container.TopResponse, error)); ok {
		return returnFunc(ctx, container1, arguments)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) container.TopResponse); ok {
		r0 = returnFunc(ctx, container1, arguments)
	} else {
		r0 = ret.Get(0).(container.TopResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, container1, arguments)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerTop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerTop'
type MockContainerAPIClient_ContainerTop_Call struct {
	*mock.Call
}

// ContainerTop is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - arguments []string
func (_e *MockContainerAPIClient_Expecter) ContainerTop(ctx interface{}, container1 interface{}, arguments interface{}) *MockContainerAPIClient_ContainerTop_Call {
	return &MockContainerAPIClient_ContainerTop_Call{Call: _e.mock.On("ContainerTop", ctx, container1, arguments)}
}

func (_c *MockContainerAPIClient_ContainerTop_Call) Run(run func(ctx context.Context, container1 string, arguments []string)) *MockContainerAPIClient_ContainerTop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerTop_Call) Return(topResponse container.TopResponse, err error) *MockContainerAPIClient_ContainerTop_Call {
	_c.Call.Return(topResponse, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerTop_Call) RunAndReturn(run func(ctx context.Context, container1 string, arguments []string) (container.TopResponse, error)) *MockContainerAPIClient_ContainerTop_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerUnpause provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerUnpause(ctx context.Context, container1 string) error {
	ret := _mock.Called(ctx, container1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerUnpause")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, container1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_ContainerUnpause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerUnpause'
type MockContainerAPIClient_ContainerUnpause_Call struct {
	*mock.Call
}

// ContainerUnpause is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
func (_e *MockContainerAPIClient_Expecter) ContainerUnpause(ctx interface{}, container1 interface{}) *MockContainerAPIClient_ContainerUnpause_Call {
	return &MockContainerAPIClient_ContainerUnpause_Call{Call: _e.mock.On("ContainerUnpause", ctx, container1)}
}

func (_c *MockContainerAPIClient_ContainerUnpause_Call) Run(run func(ctx context.Context, container1 string)) *MockContainerAPIClient_ContainerUnpause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerUnpause_Call) Return(err error) *MockContainerAPIClient_ContainerUnpause_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerUnpause_Call) RunAndReturn(run func(ctx context.Context, container1 string) error) *MockContainerAPIClient_ContainerUnpause_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerUpdate provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerUpdate(ctx context.Context, container1 string, updateConfig container.UpdateConfig) (container.UpdateResponse, error) {
	ret := _mock.Called(ctx, container1, updateConfig)

	if len(ret) == 0 {
		panic("no return value specified for ContainerUpdate")
	}

	var r0 container.UpdateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.UpdateConfig) (container.UpdateResponse, error)); ok {
		return returnFunc(ctx, container1, updateConfig)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.UpdateConfig) container.UpdateResponse); ok {
		r0 = returnFunc(ctx, container1, updateConfig)
	} else {
		r0 = ret.Get(0).(container.UpdateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.UpdateConfig) error); ok {
		r1 = returnFunc(ctx, container1, updateConfig)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerUpdate'
type MockContainerAPIClient_ContainerUpdate_Call struct {
	*mock.Call
}

// ContainerUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - updateConfig container.UpdateConfig
func (_e *MockContainerAPIClient_Expecter) ContainerUpdate(ctx interface{}, container1 interface{}, updateConfig interface{}) *MockContainerAPIClient_ContainerUpdate_Call {
	return &MockContainerAPIClient_ContainerUpdate_Call{Call: _e.mock.On("ContainerUpdate", ctx, container1, updateConfig)}
}

func (_c *MockContainerAPIClient_ContainerUpdate_Call) Run(run func(ctx context.Context, container1 string, updateConfig container.UpdateConfig)) *MockContainerAPIClient_ContainerUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.UpdateConfig
		if args[2] != nil {
			arg2 = args[2].(container.UpdateConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerUpdate_Call) Return(updateResponse container.UpdateResponse, err error) *MockContainerAPIClient_ContainerUpdate_Call {
	_c.Call.Return(updateResponse, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainerUpdate_Call) RunAndReturn(run func(ctx context.Context, container1 string, updateConfig container.UpdateConfig) (container.UpdateResponse, error)) *MockContainerAPIClient_ContainerUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerWait provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainerWait(ctx context.Context, container1 string, condition container.WaitCondition) (<-chan container.WaitResponse, <-chan error) {
	ret := _mock.Called(ctx, container1, condition)

	if len(ret) == 0 {
		panic("no return value specified for ContainerWait")
	}

	var r0 <-chan container.WaitResponse
	var r1 <-chan error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.WaitCondition) (<-chan container.WaitResponse, <-chan error)); ok {
		return returnFunc(ctx, container1, condition)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.WaitCondition) <-chan container.WaitResponse); ok {
		r0 = returnFunc(ctx, container1, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan container.WaitResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, container.WaitCondition) <-chan error); ok {
		r1 = returnFunc(ctx, container1, condition)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}
	return r0, r1
}

// MockContainerAPIClient_ContainerWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerWait'
type MockContainerAPIClient_ContainerWait_Call struct {
	*mock.Call
}

// ContainerWait is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - condition container.WaitCondition
func (_e *MockContainerAPIClient_Expecter) ContainerWait(ctx interface{}, container1 interface{}, condition interface{}) *MockContainerAPIClient_ContainerWait_Call {
	return &MockContainerAPIClient_ContainerWait_Call{Call: _e.mock.On("ContainerWait", ctx, container1, condition)}
}

func (_c *MockContainerAPIClient_ContainerWait_Call) Run(run func(ctx context.Context, container1 string, condition container.WaitCondition)) *MockContainerAPIClient_ContainerWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.WaitCondition
		if args[2] != nil {
			arg2 = args[2].(container.WaitCondition)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainerWait_Call) Return(waitResponseCh <-chan container.WaitResponse, errCh <-chan error) *MockContainerAPIClient_ContainerWait_Call {
	_c.Call.Return(waitResponseCh, errCh)
	return _c
}

func (_c *MockContainerAPIClient_ContainerWait_Call) RunAndReturn(run func(ctx context.Context, container1 string, condition container.WaitCondition) (<-chan container.WaitResponse, <-chan error)) *MockContainerAPIClient_ContainerWait_Call {
	_c.Call.Return(run)
	return _c
}

// ContainersPrune provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) ContainersPrune(ctx context.Context, pruneFilters filters.Args) (container.PruneReport, error) {
	ret := _mock.Called(ctx, pruneFilters)

	if len(ret) == 0 {
		panic("no return value specified for ContainersPrune")
	}

	var r0 container.PruneReport
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, filters.Args) (container.PruneReport, error)); ok {
		return returnFunc(ctx, pruneFilters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, filters.Args) container.PruneReport); ok {
		r0 = returnFunc(ctx, pruneFilters)
	} else {
		r0 = ret.Get(0).(container.PruneReport)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, filters.Args) error); ok {
		r1 = returnFunc(ctx, pruneFilters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerAPIClient_ContainersPrune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainersPrune'
type MockContainerAPIClient_ContainersPrune_Call struct {
	*mock.Call
}

// ContainersPrune is a helper method to define mock.On call
//   - ctx context.Context
//   - pruneFilters filters.Args
func (_e *MockContainerAPIClient_Expecter) ContainersPrune(ctx interface{}, pruneFilters interface{}) *MockContainerAPIClient_ContainersPrune_Call {
	return &MockContainerAPIClient_ContainersPrune_Call{Call: _e.mock.On("ContainersPrune", ctx, pruneFilters)}
}

func (_c *MockContainerAPIClient_ContainersPrune_Call) Run(run func(ctx context.Context, pruneFilters filters.Args)) *MockContainerAPIClient_ContainersPrune_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 filters.Args
		if args[1] != nil {
			arg1 = args[1].(filters.Args)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_ContainersPrune_Call) Return(pruneReport container.PruneReport, err error) *MockContainerAPIClient_ContainersPrune_Call {
	_c.Call.Return(pruneReport, err)
	return _c
}

func (_c *MockContainerAPIClient_ContainersPrune_Call) RunAndReturn(run func(ctx context.Context, pruneFilters filters.Args) (container.PruneReport, error)) *MockContainerAPIClient_ContainersPrune_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFromContainer provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) CopyFromContainer(ctx context.Context, container1 string, srcPath string) (io.ReadCloser, container.PathStat, error) {
	ret := _mock.Called(ctx, container1, srcPath)

	if len(ret) == 0 {
		panic("no return value specified for CopyFromContainer")
	}

	var r0 io.ReadCloser
	var r1 container.PathStat
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadCloser, container.PathStat, error)); ok {
		return returnFunc(ctx, container1, srcPath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = returnFunc(ctx, container1, srcPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) container.PathStat); ok {
		r1 = returnFunc(ctx, container1, srcPath)
	} else {
		r1 = ret.Get(1).(container.PathStat)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = returnFunc(ctx, container1, srcPath)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockContainerAPIClient_CopyFromContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFromContainer'
type MockContainerAPIClient_CopyFromContainer_Call struct {
	*mock.Call
}

// CopyFromContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - srcPath string
func (_e *MockContainerAPIClient_Expecter) CopyFromContainer(ctx interface{}, container1 interface{}, srcPath interface{}) *MockContainerAPIClient_CopyFromContainer_Call {
	return &MockContainerAPIClient_CopyFromContainer_Call{Call: _e.mock.On("CopyFromContainer", ctx, container1, srcPath)}
}

func (_c *MockContainerAPIClient_CopyFromContainer_Call) Run(run func(ctx context.Context, container1 string, srcPath string)) *MockContainerAPIClient_CopyFromContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_CopyFromContainer_Call) Return(readCloser io.ReadCloser, pathStat container.PathStat, err error) *MockContainerAPIClient_CopyFromContainer_Call {
	_c.Call.Return(readCloser, pathStat, err)
	return _c
}

func (_c *MockContainerAPIClient_CopyFromContainer_Call) RunAndReturn(run func(ctx context.Context, container1 string, srcPath string) (io.ReadCloser, container.PathStat, error)) *MockContainerAPIClient_CopyFromContainer_Call {
	_c.Call.Return(run)
	return _c
}

// CopyToContainer provides a mock function for the type MockContainerAPIClient
func (_mock *MockContainerAPIClient) CopyToContainer(ctx context.Context, container1 string, path string, content io.Reader, options container.CopyToContainerOptions) error {
	ret := _mock.Called(ctx, container1, path, content, options)

	if len(ret) == 0 {
		panic("no return value specified for CopyToContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, container.CopyToContainerOptions) error); ok {
		r0 = returnFunc(ctx, container1, path, content, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContainerAPIClient_CopyToContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyToContainer'
type MockContainerAPIClient_CopyToContainer_Call struct {
	*mock.Call
}

// CopyToContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - container1 string
//   - path string
//   - content io.Reader
//   - options container.CopyToContainerOptions
func (_e *MockContainerAPIClient_Expecter) CopyToContainer(ctx interface{}, container1 interface{}, path interface{}, content interface{}, options interface{}) *MockContainerAPIClient_CopyToContainer_Call {
	return &MockContainerAPIClient_CopyToContainer_Call{Call: _e.mock.On("CopyToContainer", ctx, container1, path, content, options)}
}

func (_c *MockContainerAPIClient_CopyToContainer_Call) Run(run func(ctx context.Context, container1 string, path string, content io.Reader, options container.CopyToContainerOptions)) *MockContainerAPIClient_CopyToContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 io.Reader
		if args[3] != nil {
			arg3 = args[3].(io.Reader)
		}
		var arg4 container.CopyToContainerOptions
		if args[4] != nil {
			arg4 = args[4].(container.CopyToContainerOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockContainerAPIClient_CopyToContainer_Call) Return(err error) *MockContainerAPIClient_CopyToContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContainerAPIClient_CopyToContainer_Call) RunAndReturn(run func(ctx context.Context, container1 string, path string, content io.Reader, options container.CopyToContainerOptions) error) *MockContainerAPIClient_CopyToContainer_Call {
	_c.Call.Return(run)
	return _c
}
