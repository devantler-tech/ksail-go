// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/devantler-tech/ksail-go/pkg/provisioner/cluster (interfaces: DockerClient)
//
// Generated by this command:
//
//	mockgen -destination mock_dockerclient_test.go -package clusterprovisioner github.com/devantler-tech/ksail-go/pkg/provisioner/cluster DockerClient
//

// Package clusterprovisioner is a generated GoMock package.
package clusterprovisioner

import (
	context "context"
	reflect "reflect"

	container "github.com/docker/docker/api/types/container"
	gomock "go.uber.org/mock/gomock"
)

// MockDockerClient is a mock of DockerClient interface.
type MockDockerClient struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientMockRecorder
	isgomock struct{}
}

// MockDockerClientMockRecorder is the mock recorder for MockDockerClient.
type MockDockerClientMockRecorder struct {
	mock *MockDockerClient
}

// NewMockDockerClient creates a new mock instance.
func NewMockDockerClient(ctrl *gomock.Controller) *MockDockerClient {
	mock := &MockDockerClient{ctrl: ctrl}
	mock.recorder = &MockDockerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerClient) EXPECT() *MockDockerClientMockRecorder {
	return m.recorder
}

// ContainerStart mocks base method.
func (m *MockDockerClient) ContainerStart(ctx context.Context, name string, options container.StartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStart", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStart indicates an expected call of ContainerStart.
func (mr *MockDockerClientMockRecorder) ContainerStart(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStart", reflect.TypeOf((*MockDockerClient)(nil).ContainerStart), ctx, name, options)
}

// ContainerStop mocks base method.
func (m *MockDockerClient) ContainerStop(ctx context.Context, name string, options container.StopOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStop", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStop indicates an expected call of ContainerStop.
func (mr *MockDockerClientMockRecorder) ContainerStop(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStop", reflect.TypeOf((*MockDockerClient)(nil).ContainerStop), ctx, name, options)
}
