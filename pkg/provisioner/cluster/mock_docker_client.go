// Code generated by mockery v2.53.5. DO NOT EDIT.

package clusterprovisioner

import (
	context "context"

	container "github.com/docker/docker/api/types/container"

	mock "github.com/stretchr/testify/mock"
)

// MockDockerClient is an autogenerated mock type for the DockerClient type
type MockDockerClient struct {
	mock.Mock
}

// ContainerStart provides a mock function with given fields: ctx, name, options
func (_m *MockDockerClient) ContainerStart(ctx context.Context, name string, options container.StartOptions) error {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.StartOptions) error); ok {
		r0 = rf(ctx, name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerStop provides a mock function with given fields: ctx, name, options
func (_m *MockDockerClient) ContainerStop(ctx context.Context, name string, options container.StopOptions) error {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.StopOptions) error); ok {
		r0 = rf(ctx, name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDockerClient creates a new instance of MockDockerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDockerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDockerClient {
	mock := &MockDockerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
