// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package clusterprovisioner

import (
	"context"

	"github.com/k3d-io/k3d/v5/pkg/config/v1alpha5"
	"github.com/k3d-io/k3d/v5/pkg/runtimes"
	"github.com/k3d-io/k3d/v5/pkg/types"
	mock "github.com/stretchr/testify/mock"
	"sigs.k8s.io/kind/pkg/cluster"
)

// NewMockK3dClientProvider creates a new instance of MockK3dClientProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockK3dClientProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockK3dClientProvider {
	mock := &MockK3dClientProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockK3dClientProvider is an autogenerated mock type for the K3dClientProvider type
type MockK3dClientProvider struct {
	mock.Mock
}

type MockK3dClientProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockK3dClientProvider) EXPECT() *MockK3dClientProvider_Expecter {
	return &MockK3dClientProvider_Expecter{mock: &_m.Mock}
}

// ClusterDelete provides a mock function for the type MockK3dClientProvider
func (_mock *MockK3dClientProvider) ClusterDelete(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster, opts types.ClusterDeleteOpts) error {
	ret := _mock.Called(ctx, runtime, cluster, opts)

	if len(ret) == 0 {
		panic("no return value specified for ClusterDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtimes.Runtime, *types.Cluster, types.ClusterDeleteOpts) error); ok {
		r0 = returnFunc(ctx, runtime, cluster, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockK3dClientProvider_ClusterDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterDelete'
type MockK3dClientProvider_ClusterDelete_Call struct {
	*mock.Call
}

// ClusterDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - runtime runtimes.Runtime
//   - cluster *types.Cluster
//   - opts types.ClusterDeleteOpts
func (_e *MockK3dClientProvider_Expecter) ClusterDelete(ctx interface{}, runtime interface{}, cluster interface{}, opts interface{}) *MockK3dClientProvider_ClusterDelete_Call {
	return &MockK3dClientProvider_ClusterDelete_Call{Call: _e.mock.On("ClusterDelete", ctx, runtime, cluster, opts)}
}

func (_c *MockK3dClientProvider_ClusterDelete_Call) Run(run func(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster, opts types.ClusterDeleteOpts)) *MockK3dClientProvider_ClusterDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 runtimes.Runtime
		if args[1] != nil {
			arg1 = args[1].(runtimes.Runtime)
		}
		var arg2 *types.Cluster
		if args[2] != nil {
			arg2 = args[2].(*types.Cluster)
		}
		var arg3 types.ClusterDeleteOpts
		if args[3] != nil {
			arg3 = args[3].(types.ClusterDeleteOpts)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockK3dClientProvider_ClusterDelete_Call) Return(err error) *MockK3dClientProvider_ClusterDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockK3dClientProvider_ClusterDelete_Call) RunAndReturn(run func(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster, opts types.ClusterDeleteOpts) error) *MockK3dClientProvider_ClusterDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterGet provides a mock function for the type MockK3dClientProvider
func (_mock *MockK3dClientProvider) ClusterGet(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster) (*types.Cluster, error) {
	ret := _mock.Called(ctx, runtime, cluster)

	if len(ret) == 0 {
		panic("no return value specified for ClusterGet")
	}

	var r0 *types.Cluster
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtimes.Runtime, *types.Cluster) (*types.Cluster, error)); ok {
		return returnFunc(ctx, runtime, cluster)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtimes.Runtime, *types.Cluster) *types.Cluster); ok {
		r0 = returnFunc(ctx, runtime, cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Cluster)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, runtimes.Runtime, *types.Cluster) error); ok {
		r1 = returnFunc(ctx, runtime, cluster)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockK3dClientProvider_ClusterGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterGet'
type MockK3dClientProvider_ClusterGet_Call struct {
	*mock.Call
}

// ClusterGet is a helper method to define mock.On call
//   - ctx context.Context
//   - runtime runtimes.Runtime
//   - cluster *types.Cluster
func (_e *MockK3dClientProvider_Expecter) ClusterGet(ctx interface{}, runtime interface{}, cluster interface{}) *MockK3dClientProvider_ClusterGet_Call {
	return &MockK3dClientProvider_ClusterGet_Call{Call: _e.mock.On("ClusterGet", ctx, runtime, cluster)}
}

func (_c *MockK3dClientProvider_ClusterGet_Call) Run(run func(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster)) *MockK3dClientProvider_ClusterGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 runtimes.Runtime
		if args[1] != nil {
			arg1 = args[1].(runtimes.Runtime)
		}
		var arg2 *types.Cluster
		if args[2] != nil {
			arg2 = args[2].(*types.Cluster)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockK3dClientProvider_ClusterGet_Call) Return(cluster1 *types.Cluster, err error) *MockK3dClientProvider_ClusterGet_Call {
	_c.Call.Return(cluster1, err)
	return _c
}

func (_c *MockK3dClientProvider_ClusterGet_Call) RunAndReturn(run func(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster) (*types.Cluster, error)) *MockK3dClientProvider_ClusterGet_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterList provides a mock function for the type MockK3dClientProvider
func (_mock *MockK3dClientProvider) ClusterList(ctx context.Context, runtime runtimes.Runtime) ([]*types.Cluster, error) {
	ret := _mock.Called(ctx, runtime)

	if len(ret) == 0 {
		panic("no return value specified for ClusterList")
	}

	var r0 []*types.Cluster
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtimes.Runtime) ([]*types.Cluster, error)); ok {
		return returnFunc(ctx, runtime)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtimes.Runtime) []*types.Cluster); ok {
		r0 = returnFunc(ctx, runtime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Cluster)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, runtimes.Runtime) error); ok {
		r1 = returnFunc(ctx, runtime)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockK3dClientProvider_ClusterList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterList'
type MockK3dClientProvider_ClusterList_Call struct {
	*mock.Call
}

// ClusterList is a helper method to define mock.On call
//   - ctx context.Context
//   - runtime runtimes.Runtime
func (_e *MockK3dClientProvider_Expecter) ClusterList(ctx interface{}, runtime interface{}) *MockK3dClientProvider_ClusterList_Call {
	return &MockK3dClientProvider_ClusterList_Call{Call: _e.mock.On("ClusterList", ctx, runtime)}
}

func (_c *MockK3dClientProvider_ClusterList_Call) Run(run func(ctx context.Context, runtime runtimes.Runtime)) *MockK3dClientProvider_ClusterList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 runtimes.Runtime
		if args[1] != nil {
			arg1 = args[1].(runtimes.Runtime)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockK3dClientProvider_ClusterList_Call) Return(clusters []*types.Cluster, err error) *MockK3dClientProvider_ClusterList_Call {
	_c.Call.Return(clusters, err)
	return _c
}

func (_c *MockK3dClientProvider_ClusterList_Call) RunAndReturn(run func(ctx context.Context, runtime runtimes.Runtime) ([]*types.Cluster, error)) *MockK3dClientProvider_ClusterList_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterRun provides a mock function for the type MockK3dClientProvider
func (_mock *MockK3dClientProvider) ClusterRun(ctx context.Context, runtime runtimes.Runtime, clusterConfig *v1alpha5.ClusterConfig) error {
	ret := _mock.Called(ctx, runtime, clusterConfig)

	if len(ret) == 0 {
		panic("no return value specified for ClusterRun")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtimes.Runtime, *v1alpha5.ClusterConfig) error); ok {
		r0 = returnFunc(ctx, runtime, clusterConfig)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockK3dClientProvider_ClusterRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterRun'
type MockK3dClientProvider_ClusterRun_Call struct {
	*mock.Call
}

// ClusterRun is a helper method to define mock.On call
//   - ctx context.Context
//   - runtime runtimes.Runtime
//   - clusterConfig *v1alpha5.ClusterConfig
func (_e *MockK3dClientProvider_Expecter) ClusterRun(ctx interface{}, runtime interface{}, clusterConfig interface{}) *MockK3dClientProvider_ClusterRun_Call {
	return &MockK3dClientProvider_ClusterRun_Call{Call: _e.mock.On("ClusterRun", ctx, runtime, clusterConfig)}
}

func (_c *MockK3dClientProvider_ClusterRun_Call) Run(run func(ctx context.Context, runtime runtimes.Runtime, clusterConfig *v1alpha5.ClusterConfig)) *MockK3dClientProvider_ClusterRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 runtimes.Runtime
		if args[1] != nil {
			arg1 = args[1].(runtimes.Runtime)
		}
		var arg2 *v1alpha5.ClusterConfig
		if args[2] != nil {
			arg2 = args[2].(*v1alpha5.ClusterConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockK3dClientProvider_ClusterRun_Call) Return(err error) *MockK3dClientProvider_ClusterRun_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockK3dClientProvider_ClusterRun_Call) RunAndReturn(run func(ctx context.Context, runtime runtimes.Runtime, clusterConfig *v1alpha5.ClusterConfig) error) *MockK3dClientProvider_ClusterRun_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterStart provides a mock function for the type MockK3dClientProvider
func (_mock *MockK3dClientProvider) ClusterStart(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster, opts types.ClusterStartOpts) error {
	ret := _mock.Called(ctx, runtime, cluster, opts)

	if len(ret) == 0 {
		panic("no return value specified for ClusterStart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtimes.Runtime, *types.Cluster, types.ClusterStartOpts) error); ok {
		r0 = returnFunc(ctx, runtime, cluster, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockK3dClientProvider_ClusterStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterStart'
type MockK3dClientProvider_ClusterStart_Call struct {
	*mock.Call
}

// ClusterStart is a helper method to define mock.On call
//   - ctx context.Context
//   - runtime runtimes.Runtime
//   - cluster *types.Cluster
//   - opts types.ClusterStartOpts
func (_e *MockK3dClientProvider_Expecter) ClusterStart(ctx interface{}, runtime interface{}, cluster interface{}, opts interface{}) *MockK3dClientProvider_ClusterStart_Call {
	return &MockK3dClientProvider_ClusterStart_Call{Call: _e.mock.On("ClusterStart", ctx, runtime, cluster, opts)}
}

func (_c *MockK3dClientProvider_ClusterStart_Call) Run(run func(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster, opts types.ClusterStartOpts)) *MockK3dClientProvider_ClusterStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 runtimes.Runtime
		if args[1] != nil {
			arg1 = args[1].(runtimes.Runtime)
		}
		var arg2 *types.Cluster
		if args[2] != nil {
			arg2 = args[2].(*types.Cluster)
		}
		var arg3 types.ClusterStartOpts
		if args[3] != nil {
			arg3 = args[3].(types.ClusterStartOpts)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockK3dClientProvider_ClusterStart_Call) Return(err error) *MockK3dClientProvider_ClusterStart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockK3dClientProvider_ClusterStart_Call) RunAndReturn(run func(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster, opts types.ClusterStartOpts) error) *MockK3dClientProvider_ClusterStart_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterStop provides a mock function for the type MockK3dClientProvider
func (_mock *MockK3dClientProvider) ClusterStop(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster) error {
	ret := _mock.Called(ctx, runtime, cluster)

	if len(ret) == 0 {
		panic("no return value specified for ClusterStop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtimes.Runtime, *types.Cluster) error); ok {
		r0 = returnFunc(ctx, runtime, cluster)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockK3dClientProvider_ClusterStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterStop'
type MockK3dClientProvider_ClusterStop_Call struct {
	*mock.Call
}

// ClusterStop is a helper method to define mock.On call
//   - ctx context.Context
//   - runtime runtimes.Runtime
//   - cluster *types.Cluster
func (_e *MockK3dClientProvider_Expecter) ClusterStop(ctx interface{}, runtime interface{}, cluster interface{}) *MockK3dClientProvider_ClusterStop_Call {
	return &MockK3dClientProvider_ClusterStop_Call{Call: _e.mock.On("ClusterStop", ctx, runtime, cluster)}
}

func (_c *MockK3dClientProvider_ClusterStop_Call) Run(run func(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster)) *MockK3dClientProvider_ClusterStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 runtimes.Runtime
		if args[1] != nil {
			arg1 = args[1].(runtimes.Runtime)
		}
		var arg2 *types.Cluster
		if args[2] != nil {
			arg2 = args[2].(*types.Cluster)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockK3dClientProvider_ClusterStop_Call) Return(err error) *MockK3dClientProvider_ClusterStop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockK3dClientProvider_ClusterStop_Call) RunAndReturn(run func(ctx context.Context, runtime runtimes.Runtime, cluster *types.Cluster) error) *MockK3dClientProvider_ClusterStop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockK3dConfigProvider creates a new instance of MockK3dConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockK3dConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockK3dConfigProvider {
	mock := &MockK3dConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockK3dConfigProvider is an autogenerated mock type for the K3dConfigProvider type
type MockK3dConfigProvider struct {
	mock.Mock
}

type MockK3dConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockK3dConfigProvider) EXPECT() *MockK3dConfigProvider_Expecter {
	return &MockK3dConfigProvider_Expecter{mock: &_m.Mock}
}

// TransformSimpleToClusterConfig provides a mock function for the type MockK3dConfigProvider
func (_mock *MockK3dConfigProvider) TransformSimpleToClusterConfig(ctx context.Context, runtime runtimes.Runtime, simpleConfig v1alpha5.SimpleConfig, filename string) (*v1alpha5.ClusterConfig, error) {
	ret := _mock.Called(ctx, runtime, simpleConfig, filename)

	if len(ret) == 0 {
		panic("no return value specified for TransformSimpleToClusterConfig")
	}

	var r0 *v1alpha5.ClusterConfig
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtimes.Runtime, v1alpha5.SimpleConfig, string) (*v1alpha5.ClusterConfig, error)); ok {
		return returnFunc(ctx, runtime, simpleConfig, filename)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtimes.Runtime, v1alpha5.SimpleConfig, string) *v1alpha5.ClusterConfig); ok {
		r0 = returnFunc(ctx, runtime, simpleConfig, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha5.ClusterConfig)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, runtimes.Runtime, v1alpha5.SimpleConfig, string) error); ok {
		r1 = returnFunc(ctx, runtime, simpleConfig, filename)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockK3dConfigProvider_TransformSimpleToClusterConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformSimpleToClusterConfig'
type MockK3dConfigProvider_TransformSimpleToClusterConfig_Call struct {
	*mock.Call
}

// TransformSimpleToClusterConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - runtime runtimes.Runtime
//   - simpleConfig v1alpha5.SimpleConfig
//   - filename string
func (_e *MockK3dConfigProvider_Expecter) TransformSimpleToClusterConfig(ctx interface{}, runtime interface{}, simpleConfig interface{}, filename interface{}) *MockK3dConfigProvider_TransformSimpleToClusterConfig_Call {
	return &MockK3dConfigProvider_TransformSimpleToClusterConfig_Call{Call: _e.mock.On("TransformSimpleToClusterConfig", ctx, runtime, simpleConfig, filename)}
}

func (_c *MockK3dConfigProvider_TransformSimpleToClusterConfig_Call) Run(run func(ctx context.Context, runtime runtimes.Runtime, simpleConfig v1alpha5.SimpleConfig, filename string)) *MockK3dConfigProvider_TransformSimpleToClusterConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 runtimes.Runtime
		if args[1] != nil {
			arg1 = args[1].(runtimes.Runtime)
		}
		var arg2 v1alpha5.SimpleConfig
		if args[2] != nil {
			arg2 = args[2].(v1alpha5.SimpleConfig)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockK3dConfigProvider_TransformSimpleToClusterConfig_Call) Return(clusterConfig *v1alpha5.ClusterConfig, err error) *MockK3dConfigProvider_TransformSimpleToClusterConfig_Call {
	_c.Call.Return(clusterConfig, err)
	return _c
}

func (_c *MockK3dConfigProvider_TransformSimpleToClusterConfig_Call) RunAndReturn(run func(ctx context.Context, runtime runtimes.Runtime, simpleConfig v1alpha5.SimpleConfig, filename string) (*v1alpha5.ClusterConfig, error)) *MockK3dConfigProvider_TransformSimpleToClusterConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKindProvider creates a new instance of MockKindProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKindProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKindProvider {
	mock := &MockKindProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKindProvider is an autogenerated mock type for the KindProvider type
type MockKindProvider struct {
	mock.Mock
}

type MockKindProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKindProvider) EXPECT() *MockKindProvider_Expecter {
	return &MockKindProvider_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockKindProvider
func (_mock *MockKindProvider) Create(name string, opts ...cluster.CreateOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(name, opts)
	} else {
		tmpRet = _mock.Called(name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, ...cluster.CreateOption) error); ok {
		r0 = returnFunc(name, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockKindProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockKindProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
//   - opts ...cluster.CreateOption
func (_e *MockKindProvider_Expecter) Create(name interface{}, opts ...interface{}) *MockKindProvider_Create_Call {
	return &MockKindProvider_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{name}, opts...)...)}
}

func (_c *MockKindProvider_Create_Call) Run(run func(name string, opts ...cluster.CreateOption)) *MockKindProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []cluster.CreateOption
		var variadicArgs []cluster.CreateOption
		if len(args) > 1 {
			variadicArgs = args[1].([]cluster.CreateOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockKindProvider_Create_Call) Return(err error) *MockKindProvider_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockKindProvider_Create_Call) RunAndReturn(run func(name string, opts ...cluster.CreateOption) error) *MockKindProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockKindProvider
func (_mock *MockKindProvider) Delete(name string, kubeconfigPath string) error {
	ret := _mock.Called(name, kubeconfigPath)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(name, kubeconfigPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockKindProvider_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockKindProvider_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
//   - kubeconfigPath string
func (_e *MockKindProvider_Expecter) Delete(name interface{}, kubeconfigPath interface{}) *MockKindProvider_Delete_Call {
	return &MockKindProvider_Delete_Call{Call: _e.mock.On("Delete", name, kubeconfigPath)}
}

func (_c *MockKindProvider_Delete_Call) Run(run func(name string, kubeconfigPath string)) *MockKindProvider_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKindProvider_Delete_Call) Return(err error) *MockKindProvider_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockKindProvider_Delete_Call) RunAndReturn(run func(name string, kubeconfigPath string) error) *MockKindProvider_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockKindProvider
func (_mock *MockKindProvider) List() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKindProvider_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockKindProvider_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockKindProvider_Expecter) List() *MockKindProvider_List_Call {
	return &MockKindProvider_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockKindProvider_List_Call) Run(run func()) *MockKindProvider_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKindProvider_List_Call) Return(strings []string, err error) *MockKindProvider_List_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockKindProvider_List_Call) RunAndReturn(run func() ([]string, error)) *MockKindProvider_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function for the type MockKindProvider
func (_mock *MockKindProvider) ListNodes(name string) ([]string, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKindProvider_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockKindProvider_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
//   - name string
func (_e *MockKindProvider_Expecter) ListNodes(name interface{}) *MockKindProvider_ListNodes_Call {
	return &MockKindProvider_ListNodes_Call{Call: _e.mock.On("ListNodes", name)}
}

func (_c *MockKindProvider_ListNodes_Call) Run(run func(name string)) *MockKindProvider_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockKindProvider_ListNodes_Call) Return(strings []string, err error) *MockKindProvider_ListNodes_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockKindProvider_ListNodes_Call) RunAndReturn(run func(name string) ([]string, error)) *MockKindProvider_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterProvisioner creates a new instance of MockClusterProvisioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterProvisioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterProvisioner {
	mock := &MockClusterProvisioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClusterProvisioner is an autogenerated mock type for the ClusterProvisioner type
type MockClusterProvisioner struct {
	mock.Mock
}

type MockClusterProvisioner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterProvisioner) EXPECT() *MockClusterProvisioner_Expecter {
	return &MockClusterProvisioner_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Create(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockClusterProvisioner_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
func (_e *MockClusterProvisioner_Expecter) Create(name interface{}) *MockClusterProvisioner_Create_Call {
	return &MockClusterProvisioner_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *MockClusterProvisioner_Create_Call) Run(run func(name string)) *MockClusterProvisioner_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Create_Call) Return(err error) *MockClusterProvisioner_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Create_Call) RunAndReturn(run func(name string) error) *MockClusterProvisioner_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Delete(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockClusterProvisioner_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
func (_e *MockClusterProvisioner_Expecter) Delete(name interface{}) *MockClusterProvisioner_Delete_Call {
	return &MockClusterProvisioner_Delete_Call{Call: _e.mock.On("Delete", name)}
}

func (_c *MockClusterProvisioner_Delete_Call) Run(run func(name string)) *MockClusterProvisioner_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Delete_Call) Return(err error) *MockClusterProvisioner_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Delete_Call) RunAndReturn(run func(name string) error) *MockClusterProvisioner_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Exists(name string) (bool, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClusterProvisioner_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockClusterProvisioner_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - name string
func (_e *MockClusterProvisioner_Expecter) Exists(name interface{}) *MockClusterProvisioner_Exists_Call {
	return &MockClusterProvisioner_Exists_Call{Call: _e.mock.On("Exists", name)}
}

func (_c *MockClusterProvisioner_Exists_Call) Run(run func(name string)) *MockClusterProvisioner_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Exists_Call) Return(b bool, err error) *MockClusterProvisioner_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockClusterProvisioner_Exists_Call) RunAndReturn(run func(name string) (bool, error)) *MockClusterProvisioner_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) List() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClusterProvisioner_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockClusterProvisioner_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockClusterProvisioner_Expecter) List() *MockClusterProvisioner_List_Call {
	return &MockClusterProvisioner_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockClusterProvisioner_List_Call) Run(run func()) *MockClusterProvisioner_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClusterProvisioner_List_Call) Return(strings []string, err error) *MockClusterProvisioner_List_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockClusterProvisioner_List_Call) RunAndReturn(run func() ([]string, error)) *MockClusterProvisioner_List_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Start(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockClusterProvisioner_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - name string
func (_e *MockClusterProvisioner_Expecter) Start(name interface{}) *MockClusterProvisioner_Start_Call {
	return &MockClusterProvisioner_Start_Call{Call: _e.mock.On("Start", name)}
}

func (_c *MockClusterProvisioner_Start_Call) Run(run func(name string)) *MockClusterProvisioner_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Start_Call) Return(err error) *MockClusterProvisioner_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Start_Call) RunAndReturn(run func(name string) error) *MockClusterProvisioner_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Stop(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockClusterProvisioner_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - name string
func (_e *MockClusterProvisioner_Expecter) Stop(name interface{}) *MockClusterProvisioner_Stop_Call {
	return &MockClusterProvisioner_Stop_Call{Call: _e.mock.On("Stop", name)}
}

func (_c *MockClusterProvisioner_Stop_Call) Run(run func(name string)) *MockClusterProvisioner_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Stop_Call) Return(err error) *MockClusterProvisioner_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Stop_Call) RunAndReturn(run func(name string) error) *MockClusterProvisioner_Stop_Call {
	_c.Call.Return(run)
	return _c
}
