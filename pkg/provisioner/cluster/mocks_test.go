// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package clusterprovisioner

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockClusterProvisioner creates a new instance of MockClusterProvisioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterProvisioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterProvisioner {
	mock := &MockClusterProvisioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClusterProvisioner is an autogenerated mock type for the ClusterProvisioner type
type MockClusterProvisioner struct {
	mock.Mock
}

type MockClusterProvisioner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterProvisioner) EXPECT() *MockClusterProvisioner_Expecter {
	return &MockClusterProvisioner_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Create(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockClusterProvisioner_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
func (_e *MockClusterProvisioner_Expecter) Create(name interface{}) *MockClusterProvisioner_Create_Call {
	return &MockClusterProvisioner_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *MockClusterProvisioner_Create_Call) Run(run func(name string)) *MockClusterProvisioner_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Create_Call) Return(err error) *MockClusterProvisioner_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Create_Call) RunAndReturn(run func(name string) error) *MockClusterProvisioner_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Delete(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockClusterProvisioner_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
func (_e *MockClusterProvisioner_Expecter) Delete(name interface{}) *MockClusterProvisioner_Delete_Call {
	return &MockClusterProvisioner_Delete_Call{Call: _e.mock.On("Delete", name)}
}

func (_c *MockClusterProvisioner_Delete_Call) Run(run func(name string)) *MockClusterProvisioner_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Delete_Call) Return(err error) *MockClusterProvisioner_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Delete_Call) RunAndReturn(run func(name string) error) *MockClusterProvisioner_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Exists(name string) (bool, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClusterProvisioner_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockClusterProvisioner_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - name string
func (_e *MockClusterProvisioner_Expecter) Exists(name interface{}) *MockClusterProvisioner_Exists_Call {
	return &MockClusterProvisioner_Exists_Call{Call: _e.mock.On("Exists", name)}
}

func (_c *MockClusterProvisioner_Exists_Call) Run(run func(name string)) *MockClusterProvisioner_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Exists_Call) Return(b bool, err error) *MockClusterProvisioner_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockClusterProvisioner_Exists_Call) RunAndReturn(run func(name string) (bool, error)) *MockClusterProvisioner_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) List() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClusterProvisioner_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockClusterProvisioner_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockClusterProvisioner_Expecter) List() *MockClusterProvisioner_List_Call {
	return &MockClusterProvisioner_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockClusterProvisioner_List_Call) Run(run func()) *MockClusterProvisioner_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClusterProvisioner_List_Call) Return(strings []string, err error) *MockClusterProvisioner_List_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockClusterProvisioner_List_Call) RunAndReturn(run func() ([]string, error)) *MockClusterProvisioner_List_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Start(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockClusterProvisioner_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - name string
func (_e *MockClusterProvisioner_Expecter) Start(name interface{}) *MockClusterProvisioner_Start_Call {
	return &MockClusterProvisioner_Start_Call{Call: _e.mock.On("Start", name)}
}

func (_c *MockClusterProvisioner_Start_Call) Run(run func(name string)) *MockClusterProvisioner_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Start_Call) Return(err error) *MockClusterProvisioner_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Start_Call) RunAndReturn(run func(name string) error) *MockClusterProvisioner_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Stop(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockClusterProvisioner_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - name string
func (_e *MockClusterProvisioner_Expecter) Stop(name interface{}) *MockClusterProvisioner_Stop_Call {
	return &MockClusterProvisioner_Stop_Call{Call: _e.mock.On("Stop", name)}
}

func (_c *MockClusterProvisioner_Stop_Call) Run(run func(name string)) *MockClusterProvisioner_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Stop_Call) Return(err error) *MockClusterProvisioner_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Stop_Call) RunAndReturn(run func(name string) error) *MockClusterProvisioner_Stop_Call {
	_c.Call.Return(run)
	return _c
}
