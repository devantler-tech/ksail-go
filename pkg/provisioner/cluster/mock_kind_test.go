// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/devantler-tech/ksail-go/pkg/provisioner/cluster (interfaces: KindProvider)
//
// Generated by this command:
//
//	mockgen -destination mock_kind_test.go -package clusterprovisioner github.com/devantler-tech/ksail-go/pkg/provisioner/cluster KindProvider
//

// Package clusterprovisioner is a generated GoMock package.
package clusterprovisioner

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	cluster "sigs.k8s.io/kind/pkg/cluster"
)

// MockKindProvider is a mock of KindProvider interface.
type MockKindProvider struct {
	ctrl     *gomock.Controller
	recorder *MockKindProviderMockRecorder
	isgomock struct{}
}

// MockKindProviderMockRecorder is the mock recorder for MockKindProvider.
type MockKindProviderMockRecorder struct {
	mock *MockKindProvider
}

// NewMockKindProvider creates a new mock instance.
func NewMockKindProvider(ctrl *gomock.Controller) *MockKindProvider {
	mock := &MockKindProvider{ctrl: ctrl}
	mock.recorder = &MockKindProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKindProvider) EXPECT() *MockKindProviderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKindProvider) Create(name string, opts ...cluster.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockKindProviderMockRecorder) Create(name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKindProvider)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockKindProvider) Delete(name, kubeconfigPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, kubeconfigPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKindProviderMockRecorder) Delete(name, kubeconfigPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKindProvider)(nil).Delete), name, kubeconfigPath)
}

// List mocks base method.
func (m *MockKindProvider) List() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKindProviderMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKindProvider)(nil).List))
}

// ListNodes mocks base method.
func (m *MockKindProvider) ListNodes(name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockKindProviderMockRecorder) ListNodes(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockKindProvider)(nil).ListNodes), name)
}
