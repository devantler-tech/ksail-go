// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package eksprovisioner

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/weaveworks/eksctl/pkg/actions/cluster"
	"github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
	"github.com/weaveworks/eksctl/pkg/eks"
)

// NewMockEKSClusterActions creates a new instance of MockEKSClusterActions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEKSClusterActions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEKSClusterActions {
	mock := &MockEKSClusterActions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEKSClusterActions is an autogenerated mock type for the EKSClusterActions type
type MockEKSClusterActions struct {
	mock.Mock
}

type MockEKSClusterActions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEKSClusterActions) EXPECT() *MockEKSClusterActions_Expecter {
	return &MockEKSClusterActions_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockEKSClusterActions
func (_mock *MockEKSClusterActions) Delete(ctx context.Context, waitInterval time.Duration, podEvictionWaitPeriod time.Duration, wait bool, force bool, disableNodegroupEviction bool, parallel int) error {
	ret := _mock.Called(ctx, waitInterval, podEvictionWaitPeriod, wait, force, disableNodegroupEviction, parallel)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration, time.Duration, bool, bool, bool, int) error); ok {
		r0 = returnFunc(ctx, waitInterval, podEvictionWaitPeriod, wait, force, disableNodegroupEviction, parallel)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEKSClusterActions_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockEKSClusterActions_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - waitInterval time.Duration
//   - podEvictionWaitPeriod time.Duration
//   - wait bool
//   - force bool
//   - disableNodegroupEviction bool
//   - parallel int
func (_e *MockEKSClusterActions_Expecter) Delete(ctx interface{}, waitInterval interface{}, podEvictionWaitPeriod interface{}, wait interface{}, force interface{}, disableNodegroupEviction interface{}, parallel interface{}) *MockEKSClusterActions_Delete_Call {
	return &MockEKSClusterActions_Delete_Call{Call: _e.mock.On("Delete", ctx, waitInterval, podEvictionWaitPeriod, wait, force, disableNodegroupEviction, parallel)}
}

func (_c *MockEKSClusterActions_Delete_Call) Run(run func(ctx context.Context, waitInterval time.Duration, podEvictionWaitPeriod time.Duration, wait bool, force bool, disableNodegroupEviction bool, parallel int)) *MockEKSClusterActions_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		var arg5 bool
		if args[5] != nil {
			arg5 = args[5].(bool)
		}
		var arg6 int
		if args[6] != nil {
			arg6 = args[6].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockEKSClusterActions_Delete_Call) Return(err error) *MockEKSClusterActions_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEKSClusterActions_Delete_Call) RunAndReturn(run func(ctx context.Context, waitInterval time.Duration, podEvictionWaitPeriod time.Duration, wait bool, force bool, disableNodegroupEviction bool, parallel int) error) *MockEKSClusterActions_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEKSClusterProvider creates a new instance of MockEKSClusterProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEKSClusterProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEKSClusterProvider {
	mock := &MockEKSClusterProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEKSClusterProvider is an autogenerated mock type for the EKSClusterProvider type
type MockEKSClusterProvider struct {
	mock.Mock
}

type MockEKSClusterProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEKSClusterProvider) EXPECT() *MockEKSClusterProvider_Expecter {
	return &MockEKSClusterProvider_Expecter{mock: &_m.Mock}
}

// NewMockEKSClusterLister creates a new instance of MockEKSClusterLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEKSClusterLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEKSClusterLister {
	mock := &MockEKSClusterLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEKSClusterLister is an autogenerated mock type for the EKSClusterLister type
type MockEKSClusterLister struct {
	mock.Mock
}

type MockEKSClusterLister_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEKSClusterLister) EXPECT() *MockEKSClusterLister_Expecter {
	return &MockEKSClusterLister_Expecter{mock: &_m.Mock}
}

// GetClusters provides a mock function for the type MockEKSClusterLister
func (_mock *MockEKSClusterLister) GetClusters(ctx context.Context, provider *eks.ClusterProvider, listAllRegions bool, chunkSize int) ([]cluster.Description, error) {
	ret := _mock.Called(ctx, provider, listAllRegions, chunkSize)

	if len(ret) == 0 {
		panic("no return value specified for GetClusters")
	}

	var r0 []cluster.Description
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *eks.ClusterProvider, bool, int) ([]cluster.Description, error)); ok {
		return returnFunc(ctx, provider, listAllRegions, chunkSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *eks.ClusterProvider, bool, int) []cluster.Description); ok {
		r0 = returnFunc(ctx, provider, listAllRegions, chunkSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cluster.Description)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *eks.ClusterProvider, bool, int) error); ok {
		r1 = returnFunc(ctx, provider, listAllRegions, chunkSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEKSClusterLister_GetClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusters'
type MockEKSClusterLister_GetClusters_Call struct {
	*mock.Call
}

// GetClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - provider *eks.ClusterProvider
//   - listAllRegions bool
//   - chunkSize int
func (_e *MockEKSClusterLister_Expecter) GetClusters(ctx interface{}, provider interface{}, listAllRegions interface{}, chunkSize interface{}) *MockEKSClusterLister_GetClusters_Call {
	return &MockEKSClusterLister_GetClusters_Call{Call: _e.mock.On("GetClusters", ctx, provider, listAllRegions, chunkSize)}
}

func (_c *MockEKSClusterLister_GetClusters_Call) Run(run func(ctx context.Context, provider *eks.ClusterProvider, listAllRegions bool, chunkSize int)) *MockEKSClusterLister_GetClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *eks.ClusterProvider
		if args[1] != nil {
			arg1 = args[1].(*eks.ClusterProvider)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockEKSClusterLister_GetClusters_Call) Return(descriptions []cluster.Description, err error) *MockEKSClusterLister_GetClusters_Call {
	_c.Call.Return(descriptions, err)
	return _c
}

func (_c *MockEKSClusterLister_GetClusters_Call) RunAndReturn(run func(ctx context.Context, provider *eks.ClusterProvider, listAllRegions bool, chunkSize int) ([]cluster.Description, error)) *MockEKSClusterLister_GetClusters_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEKSClusterCreator creates a new instance of MockEKSClusterCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEKSClusterCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEKSClusterCreator {
	mock := &MockEKSClusterCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEKSClusterCreator is an autogenerated mock type for the EKSClusterCreator type
type MockEKSClusterCreator struct {
	mock.Mock
}

type MockEKSClusterCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEKSClusterCreator) EXPECT() *MockEKSClusterCreator_Expecter {
	return &MockEKSClusterCreator_Expecter{mock: &_m.Mock}
}

// CreateCluster provides a mock function for the type MockEKSClusterCreator
func (_mock *MockEKSClusterCreator) CreateCluster(ctx context.Context, cfg *v1alpha5.ClusterConfig, ctl *eks.ClusterProvider) error {
	ret := _mock.Called(ctx, cfg, ctl)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1alpha5.ClusterConfig, *eks.ClusterProvider) error); ok {
		r0 = returnFunc(ctx, cfg, ctl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEKSClusterCreator_CreateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCluster'
type MockEKSClusterCreator_CreateCluster_Call struct {
	*mock.Call
}

// CreateCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg *v1alpha5.ClusterConfig
//   - ctl *eks.ClusterProvider
func (_e *MockEKSClusterCreator_Expecter) CreateCluster(ctx interface{}, cfg interface{}, ctl interface{}) *MockEKSClusterCreator_CreateCluster_Call {
	return &MockEKSClusterCreator_CreateCluster_Call{Call: _e.mock.On("CreateCluster", ctx, cfg, ctl)}
}

func (_c *MockEKSClusterCreator_CreateCluster_Call) Run(run func(ctx context.Context, cfg *v1alpha5.ClusterConfig, ctl *eks.ClusterProvider)) *MockEKSClusterCreator_CreateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1alpha5.ClusterConfig
		if args[1] != nil {
			arg1 = args[1].(*v1alpha5.ClusterConfig)
		}
		var arg2 *eks.ClusterProvider
		if args[2] != nil {
			arg2 = args[2].(*eks.ClusterProvider)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEKSClusterCreator_CreateCluster_Call) Return(err error) *MockEKSClusterCreator_CreateCluster_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEKSClusterCreator_CreateCluster_Call) RunAndReturn(run func(ctx context.Context, cfg *v1alpha5.ClusterConfig, ctl *eks.ClusterProvider) error) *MockEKSClusterCreator_CreateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEKSNodeGroupManager creates a new instance of MockEKSNodeGroupManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEKSNodeGroupManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEKSNodeGroupManager {
	mock := &MockEKSNodeGroupManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEKSNodeGroupManager is an autogenerated mock type for the EKSNodeGroupManager type
type MockEKSNodeGroupManager struct {
	mock.Mock
}

type MockEKSNodeGroupManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEKSNodeGroupManager) EXPECT() *MockEKSNodeGroupManager_Expecter {
	return &MockEKSNodeGroupManager_Expecter{mock: &_m.Mock}
}

// Scale provides a mock function for the type MockEKSNodeGroupManager
func (_mock *MockEKSNodeGroupManager) Scale(ctx context.Context, ng *v1alpha5.NodeGroupBase, wait bool) error {
	ret := _mock.Called(ctx, ng, wait)

	if len(ret) == 0 {
		panic("no return value specified for Scale")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1alpha5.NodeGroupBase, bool) error); ok {
		r0 = returnFunc(ctx, ng, wait)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEKSNodeGroupManager_Scale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scale'
type MockEKSNodeGroupManager_Scale_Call struct {
	*mock.Call
}

// Scale is a helper method to define mock.On call
//   - ctx context.Context
//   - ng *v1alpha5.NodeGroupBase
//   - wait bool
func (_e *MockEKSNodeGroupManager_Expecter) Scale(ctx interface{}, ng interface{}, wait interface{}) *MockEKSNodeGroupManager_Scale_Call {
	return &MockEKSNodeGroupManager_Scale_Call{Call: _e.mock.On("Scale", ctx, ng, wait)}
}

func (_c *MockEKSNodeGroupManager_Scale_Call) Run(run func(ctx context.Context, ng *v1alpha5.NodeGroupBase, wait bool)) *MockEKSNodeGroupManager_Scale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1alpha5.NodeGroupBase
		if args[1] != nil {
			arg1 = args[1].(*v1alpha5.NodeGroupBase)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEKSNodeGroupManager_Scale_Call) Return(err error) *MockEKSNodeGroupManager_Scale_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEKSNodeGroupManager_Scale_Call) RunAndReturn(run func(ctx context.Context, ng *v1alpha5.NodeGroupBase, wait bool) error) *MockEKSNodeGroupManager_Scale_Call {
	_c.Call.Return(run)
	return _c
}
