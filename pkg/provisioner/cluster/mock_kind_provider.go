// Code generated by mockery v2.53.5. DO NOT EDIT.

package clusterprovisioner

import (
	cluster "sigs.k8s.io/kind/pkg/cluster"

	mock "github.com/stretchr/testify/mock"
)

// MockKindProvider is an autogenerated mock type for the KindProvider type
type MockKindProvider struct {
	mock.Mock
}

// Create provides a mock function with given fields: name, opts
func (_m *MockKindProvider) Create(name string, opts ...cluster.CreateOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...cluster.CreateOption) error); ok {
		r0 = rf(name, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: name, kubeconfigPath
func (_m *MockKindProvider) Delete(name string, kubeconfigPath string) error {
	ret := _m.Called(name, kubeconfigPath)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, kubeconfigPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with no fields
func (_m *MockKindProvider) List() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodes provides a mock function with given fields: name
func (_m *MockKindProvider) ListNodes(name string) ([]string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockKindProvider creates a new instance of MockKindProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKindProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKindProvider {
	mock := &MockKindProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
