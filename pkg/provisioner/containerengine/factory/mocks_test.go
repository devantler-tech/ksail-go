// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package factory

import (
	"github.com/docker/docker/client"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClientFactory creates a new instance of MockClientFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientFactory {
	mock := &MockClientFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientFactory is an autogenerated mock type for the ClientFactory type
type MockClientFactory struct {
	mock.Mock
}

type MockClientFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientFactory) EXPECT() *MockClientFactory_Expecter {
	return &MockClientFactory_Expecter{mock: &_m.Mock}
}

// GetDockerClient provides a mock function for the type MockClientFactory
func (_mock *MockClientFactory) GetDockerClient() (client.APIClient, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDockerClient")
	}

	var r0 client.APIClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (client.APIClient, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() client.APIClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.APIClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientFactory_GetDockerClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDockerClient'
type MockClientFactory_GetDockerClient_Call struct {
	*mock.Call
}

// GetDockerClient is a helper method to define mock.On call
func (_e *MockClientFactory_Expecter) GetDockerClient() *MockClientFactory_GetDockerClient_Call {
	return &MockClientFactory_GetDockerClient_Call{Call: _e.mock.On("GetDockerClient")}
}

func (_c *MockClientFactory_GetDockerClient_Call) Run(run func()) *MockClientFactory_GetDockerClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientFactory_GetDockerClient_Call) Return(aPIClient client.APIClient, err error) *MockClientFactory_GetDockerClient_Call {
	_c.Call.Return(aPIClient, err)
	return _c
}

func (_c *MockClientFactory_GetDockerClient_Call) RunAndReturn(run func() (client.APIClient, error)) *MockClientFactory_GetDockerClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetPodmanSystemClient provides a mock function for the type MockClientFactory
func (_mock *MockClientFactory) GetPodmanSystemClient() (client.APIClient, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPodmanSystemClient")
	}

	var r0 client.APIClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (client.APIClient, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() client.APIClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.APIClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientFactory_GetPodmanSystemClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodmanSystemClient'
type MockClientFactory_GetPodmanSystemClient_Call struct {
	*mock.Call
}

// GetPodmanSystemClient is a helper method to define mock.On call
func (_e *MockClientFactory_Expecter) GetPodmanSystemClient() *MockClientFactory_GetPodmanSystemClient_Call {
	return &MockClientFactory_GetPodmanSystemClient_Call{Call: _e.mock.On("GetPodmanSystemClient")}
}

func (_c *MockClientFactory_GetPodmanSystemClient_Call) Run(run func()) *MockClientFactory_GetPodmanSystemClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientFactory_GetPodmanSystemClient_Call) Return(aPIClient client.APIClient, err error) *MockClientFactory_GetPodmanSystemClient_Call {
	_c.Call.Return(aPIClient, err)
	return _c
}

func (_c *MockClientFactory_GetPodmanSystemClient_Call) RunAndReturn(run func() (client.APIClient, error)) *MockClientFactory_GetPodmanSystemClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetPodmanUserClient provides a mock function for the type MockClientFactory
func (_mock *MockClientFactory) GetPodmanUserClient() (client.APIClient, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPodmanUserClient")
	}

	var r0 client.APIClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (client.APIClient, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() client.APIClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.APIClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientFactory_GetPodmanUserClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodmanUserClient'
type MockClientFactory_GetPodmanUserClient_Call struct {
	*mock.Call
}

// GetPodmanUserClient is a helper method to define mock.On call
func (_e *MockClientFactory_Expecter) GetPodmanUserClient() *MockClientFactory_GetPodmanUserClient_Call {
	return &MockClientFactory_GetPodmanUserClient_Call{Call: _e.mock.On("GetPodmanUserClient")}
}

func (_c *MockClientFactory_GetPodmanUserClient_Call) Run(run func()) *MockClientFactory_GetPodmanUserClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientFactory_GetPodmanUserClient_Call) Return(aPIClient client.APIClient, err error) *MockClientFactory_GetPodmanUserClient_Call {
	_c.Call.Return(aPIClient, err)
	return _c
}

func (_c *MockClientFactory_GetPodmanUserClient_Call) RunAndReturn(run func() (client.APIClient, error)) *MockClientFactory_GetPodmanUserClient_Call {
	_c.Call.Return(run)
	return _c
}
