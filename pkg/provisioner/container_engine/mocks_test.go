// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package containerengineprovisioner

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockContainerEngineProvisioner creates a new instance of MockContainerEngineProvisioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContainerEngineProvisioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContainerEngineProvisioner {
	mock := &MockContainerEngineProvisioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContainerEngineProvisioner is an autogenerated mock type for the ContainerEngineProvisioner type
type MockContainerEngineProvisioner struct {
	mock.Mock
}

type MockContainerEngineProvisioner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContainerEngineProvisioner) EXPECT() *MockContainerEngineProvisioner_Expecter {
	return &MockContainerEngineProvisioner_Expecter{mock: &_m.Mock}
}

// CheckReady provides a mock function for the type MockContainerEngineProvisioner
func (_mock *MockContainerEngineProvisioner) CheckReady() (bool, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckReady")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (bool, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContainerEngineProvisioner_CheckReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckReady'
type MockContainerEngineProvisioner_CheckReady_Call struct {
	*mock.Call
}

// CheckReady is a helper method to define mock.On call
func (_e *MockContainerEngineProvisioner_Expecter) CheckReady() *MockContainerEngineProvisioner_CheckReady_Call {
	return &MockContainerEngineProvisioner_CheckReady_Call{Call: _e.mock.On("CheckReady")}
}

func (_c *MockContainerEngineProvisioner_CheckReady_Call) Run(run func()) *MockContainerEngineProvisioner_CheckReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainerEngineProvisioner_CheckReady_Call) Return(b bool, err error) *MockContainerEngineProvisioner_CheckReady_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockContainerEngineProvisioner_CheckReady_Call) RunAndReturn(run func() (bool, error)) *MockContainerEngineProvisioner_CheckReady_Call {
	_c.Call.Return(run)
	return _c
}
