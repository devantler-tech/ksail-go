// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package applysetinstaller

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	v11 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	"k8s.io/apiextensions-apiserver/pkg/client/applyconfiguration/apiextensions/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

// NewMockCustomResourceDefinitionInterface creates a new instance of MockCustomResourceDefinitionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomResourceDefinitionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomResourceDefinitionInterface {
	mock := &MockCustomResourceDefinitionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCustomResourceDefinitionInterface is an autogenerated mock type for the CustomResourceDefinitionInterface type
type MockCustomResourceDefinitionInterface struct {
	mock.Mock
}

type MockCustomResourceDefinitionInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomResourceDefinitionInterface) EXPECT() *MockCustomResourceDefinitionInterface_Expecter {
	return &MockCustomResourceDefinitionInterface_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) Apply(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, customResourceDefinition, opts)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, customResourceDefinition, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) error); ok {
		r1 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomResourceDefinitionInterface_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockCustomResourceDefinitionInterface_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration
//   - opts v10.ApplyOptions
func (_e *MockCustomResourceDefinitionInterface_Expecter) Apply(ctx interface{}, customResourceDefinition interface{}, opts interface{}) *MockCustomResourceDefinitionInterface_Apply_Call {
	return &MockCustomResourceDefinitionInterface_Apply_Call{Call: _e.mock.On("Apply", ctx, customResourceDefinition, opts)}
}

func (_c *MockCustomResourceDefinitionInterface_Apply_Call) Run(run func(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions)) *MockCustomResourceDefinitionInterface_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CustomResourceDefinitionApplyConfiguration
		if args[1] != nil {
			arg1 = args[1].(*v1.CustomResourceDefinitionApplyConfiguration)
		}
		var arg2 v10.ApplyOptions
		if args[2] != nil {
			arg2 = args[2].(v10.ApplyOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Apply_Call) Return(result *v11.CustomResourceDefinition, err error) *MockCustomResourceDefinitionInterface_Apply_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Apply_Call) RunAndReturn(run func(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions) (*v11.CustomResourceDefinition, error)) *MockCustomResourceDefinitionInterface_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyStatus provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) ApplyStatus(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, customResourceDefinition, opts)

	if len(ret) == 0 {
		panic("no return value specified for ApplyStatus")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, customResourceDefinition, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) error); ok {
		r1 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomResourceDefinitionInterface_ApplyStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyStatus'
type MockCustomResourceDefinitionInterface_ApplyStatus_Call struct {
	*mock.Call
}

// ApplyStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration
//   - opts v10.ApplyOptions
func (_e *MockCustomResourceDefinitionInterface_Expecter) ApplyStatus(ctx interface{}, customResourceDefinition interface{}, opts interface{}) *MockCustomResourceDefinitionInterface_ApplyStatus_Call {
	return &MockCustomResourceDefinitionInterface_ApplyStatus_Call{Call: _e.mock.On("ApplyStatus", ctx, customResourceDefinition, opts)}
}

func (_c *MockCustomResourceDefinitionInterface_ApplyStatus_Call) Run(run func(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions)) *MockCustomResourceDefinitionInterface_ApplyStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CustomResourceDefinitionApplyConfiguration
		if args[1] != nil {
			arg1 = args[1].(*v1.CustomResourceDefinitionApplyConfiguration)
		}
		var arg2 v10.ApplyOptions
		if args[2] != nil {
			arg2 = args[2].(v10.ApplyOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_ApplyStatus_Call) Return(result *v11.CustomResourceDefinition, err error) *MockCustomResourceDefinitionInterface_ApplyStatus_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_ApplyStatus_Call) RunAndReturn(run func(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions) (*v11.CustomResourceDefinition, error)) *MockCustomResourceDefinitionInterface_ApplyStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) Create(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.CreateOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, customResourceDefinition, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.CreateOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, customResourceDefinition, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.CreateOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v11.CustomResourceDefinition, v10.CreateOptions) error); ok {
		r1 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomResourceDefinitionInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCustomResourceDefinitionInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - customResourceDefinition *v11.CustomResourceDefinition
//   - opts v10.CreateOptions
func (_e *MockCustomResourceDefinitionInterface_Expecter) Create(ctx interface{}, customResourceDefinition interface{}, opts interface{}) *MockCustomResourceDefinitionInterface_Create_Call {
	return &MockCustomResourceDefinitionInterface_Create_Call{Call: _e.mock.On("Create", ctx, customResourceDefinition, opts)}
}

func (_c *MockCustomResourceDefinitionInterface_Create_Call) Run(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.CreateOptions)) *MockCustomResourceDefinitionInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v11.CustomResourceDefinition
		if args[1] != nil {
			arg1 = args[1].(*v11.CustomResourceDefinition)
		}
		var arg2 v10.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.CreateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Create_Call) Return(customResourceDefinition1 *v11.CustomResourceDefinition, err error) *MockCustomResourceDefinitionInterface_Create_Call {
	_c.Call.Return(customResourceDefinition1, err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Create_Call) RunAndReturn(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.CreateOptions) (*v11.CustomResourceDefinition, error)) *MockCustomResourceDefinitionInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) Delete(ctx context.Context, name string, opts v10.DeleteOptions) error {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.DeleteOptions) error); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCustomResourceDefinitionInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCustomResourceDefinitionInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.DeleteOptions
func (_e *MockCustomResourceDefinitionInterface_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *MockCustomResourceDefinitionInterface_Delete_Call {
	return &MockCustomResourceDefinitionInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *MockCustomResourceDefinitionInterface_Delete_Call) Run(run func(ctx context.Context, name string, opts v10.DeleteOptions)) *MockCustomResourceDefinitionInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.DeleteOptions
		if args[2] != nil {
			arg2 = args[2].(v10.DeleteOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Delete_Call) Return(err error) *MockCustomResourceDefinitionInterface_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Delete_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.DeleteOptions) error) *MockCustomResourceDefinitionInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) DeleteCollection(ctx context.Context, opts v10.DeleteOptions, listOpts v10.ListOptions) error {
	ret := _mock.Called(ctx, opts, listOpts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.DeleteOptions, v10.ListOptions) error); ok {
		r0 = returnFunc(ctx, opts, listOpts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCustomResourceDefinitionInterface_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type MockCustomResourceDefinitionInterface_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.DeleteOptions
//   - listOpts v10.ListOptions
func (_e *MockCustomResourceDefinitionInterface_Expecter) DeleteCollection(ctx interface{}, opts interface{}, listOpts interface{}) *MockCustomResourceDefinitionInterface_DeleteCollection_Call {
	return &MockCustomResourceDefinitionInterface_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, opts, listOpts)}
}

func (_c *MockCustomResourceDefinitionInterface_DeleteCollection_Call) Run(run func(ctx context.Context, opts v10.DeleteOptions, listOpts v10.ListOptions)) *MockCustomResourceDefinitionInterface_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.DeleteOptions
		if args[1] != nil {
			arg1 = args[1].(v10.DeleteOptions)
		}
		var arg2 v10.ListOptions
		if args[2] != nil {
			arg2 = args[2].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_DeleteCollection_Call) Return(err error) *MockCustomResourceDefinitionInterface_DeleteCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_DeleteCollection_Call) RunAndReturn(run func(ctx context.Context, opts v10.DeleteOptions, listOpts v10.ListOptions) error) *MockCustomResourceDefinitionInterface_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) Get(ctx context.Context, name string, opts v10.GetOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v10.GetOptions) error); ok {
		r1 = returnFunc(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomResourceDefinitionInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCustomResourceDefinitionInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.GetOptions
func (_e *MockCustomResourceDefinitionInterface_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *MockCustomResourceDefinitionInterface_Get_Call {
	return &MockCustomResourceDefinitionInterface_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *MockCustomResourceDefinitionInterface_Get_Call) Run(run func(ctx context.Context, name string, opts v10.GetOptions)) *MockCustomResourceDefinitionInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v10.GetOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Get_Call) Return(customResourceDefinition *v11.CustomResourceDefinition, err error) *MockCustomResourceDefinitionInterface_Get_Call {
	_c.Call.Return(customResourceDefinition, err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Get_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.GetOptions) (*v11.CustomResourceDefinition, error)) *MockCustomResourceDefinitionInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) List(ctx context.Context, opts v10.ListOptions) (*v11.CustomResourceDefinitionList, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v11.CustomResourceDefinitionList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) (*v11.CustomResourceDefinitionList, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) *v11.CustomResourceDefinitionList); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinitionList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v10.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomResourceDefinitionInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCustomResourceDefinitionInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.ListOptions
func (_e *MockCustomResourceDefinitionInterface_Expecter) List(ctx interface{}, opts interface{}) *MockCustomResourceDefinitionInterface_List_Call {
	return &MockCustomResourceDefinitionInterface_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockCustomResourceDefinitionInterface_List_Call) Run(run func(ctx context.Context, opts v10.ListOptions)) *MockCustomResourceDefinitionInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_List_Call) Return(customResourceDefinitionList *v11.CustomResourceDefinitionList, err error) *MockCustomResourceDefinitionInterface_List_Call {
	_c.Call.Return(customResourceDefinitionList, err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_List_Call) RunAndReturn(run func(ctx context.Context, opts v10.ListOptions) (*v11.CustomResourceDefinitionList, error)) *MockCustomResourceDefinitionInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v10.PatchOptions, subresources ...string) (*v11.CustomResourceDefinition, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, pt, data, opts, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, pt, data, opts)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, name, pt, data, opts, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) error); ok {
		r1 = returnFunc(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomResourceDefinitionInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockCustomResourceDefinitionInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - opts v10.PatchOptions
//   - subresources ...string
func (_e *MockCustomResourceDefinitionInterface_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, opts interface{}, subresources ...interface{}) *MockCustomResourceDefinitionInterface_Patch_Call {
	return &MockCustomResourceDefinitionInterface_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, opts}, subresources...)...)}
}

func (_c *MockCustomResourceDefinitionInterface_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts v10.PatchOptions, subresources ...string)) *MockCustomResourceDefinitionInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 types.PatchType
		if args[2] != nil {
			arg2 = args[2].(types.PatchType)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		var arg4 v10.PatchOptions
		if args[4] != nil {
			arg4 = args[4].(v10.PatchOptions)
		}
		var arg5 []string
		var variadicArgs []string
		if len(args) > 5 {
			variadicArgs = args[5].([]string)
		}
		arg5 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5...,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Patch_Call) Return(result *v11.CustomResourceDefinition, err error) *MockCustomResourceDefinitionInterface_Patch_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Patch_Call) RunAndReturn(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts v10.PatchOptions, subresources ...string) (*v11.CustomResourceDefinition, error)) *MockCustomResourceDefinitionInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) Update(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, customResourceDefinition, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, customResourceDefinition, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomResourceDefinitionInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCustomResourceDefinitionInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - customResourceDefinition *v11.CustomResourceDefinition
//   - opts v10.UpdateOptions
func (_e *MockCustomResourceDefinitionInterface_Expecter) Update(ctx interface{}, customResourceDefinition interface{}, opts interface{}) *MockCustomResourceDefinitionInterface_Update_Call {
	return &MockCustomResourceDefinitionInterface_Update_Call{Call: _e.mock.On("Update", ctx, customResourceDefinition, opts)}
}

func (_c *MockCustomResourceDefinitionInterface_Update_Call) Run(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions)) *MockCustomResourceDefinitionInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v11.CustomResourceDefinition
		if args[1] != nil {
			arg1 = args[1].(*v11.CustomResourceDefinition)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Update_Call) Return(customResourceDefinition1 *v11.CustomResourceDefinition, err error) *MockCustomResourceDefinitionInterface_Update_Call {
	_c.Call.Return(customResourceDefinition1, err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Update_Call) RunAndReturn(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions) (*v11.CustomResourceDefinition, error)) *MockCustomResourceDefinitionInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) UpdateStatus(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, customResourceDefinition, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, customResourceDefinition, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomResourceDefinitionInterface_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockCustomResourceDefinitionInterface_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - customResourceDefinition *v11.CustomResourceDefinition
//   - opts v10.UpdateOptions
func (_e *MockCustomResourceDefinitionInterface_Expecter) UpdateStatus(ctx interface{}, customResourceDefinition interface{}, opts interface{}) *MockCustomResourceDefinitionInterface_UpdateStatus_Call {
	return &MockCustomResourceDefinitionInterface_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, customResourceDefinition, opts)}
}

func (_c *MockCustomResourceDefinitionInterface_UpdateStatus_Call) Run(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions)) *MockCustomResourceDefinitionInterface_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v11.CustomResourceDefinition
		if args[1] != nil {
			arg1 = args[1].(*v11.CustomResourceDefinition)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_UpdateStatus_Call) Return(customResourceDefinition1 *v11.CustomResourceDefinition, err error) *MockCustomResourceDefinitionInterface_UpdateStatus_Call {
	_c.Call.Return(customResourceDefinition1, err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions) (*v11.CustomResourceDefinition, error)) *MockCustomResourceDefinitionInterface_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockCustomResourceDefinitionInterface
func (_mock *MockCustomResourceDefinitionInterface) Watch(ctx context.Context, opts v10.ListOptions) (watch.Interface, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) (watch.Interface, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) watch.Interface); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v10.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomResourceDefinitionInterface_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockCustomResourceDefinitionInterface_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.ListOptions
func (_e *MockCustomResourceDefinitionInterface_Expecter) Watch(ctx interface{}, opts interface{}) *MockCustomResourceDefinitionInterface_Watch_Call {
	return &MockCustomResourceDefinitionInterface_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *MockCustomResourceDefinitionInterface_Watch_Call) Run(run func(ctx context.Context, opts v10.ListOptions)) *MockCustomResourceDefinitionInterface_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Watch_Call) Return(interfaceParam watch.Interface, err error) *MockCustomResourceDefinitionInterface_Watch_Call {
	_c.Call.Return(interfaceParam, err)
	return _c
}

func (_c *MockCustomResourceDefinitionInterface_Watch_Call) RunAndReturn(run func(ctx context.Context, opts v10.ListOptions) (watch.Interface, error)) *MockCustomResourceDefinitionInterface_Watch_Call {
	_c.Call.Return(run)
	return _c
}
