// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package applysetinstaller

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

// NewMockResourceInterface creates a new instance of MockResourceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceInterface {
	mock := &MockResourceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResourceInterface is an autogenerated mock type for the ResourceInterface type
type MockResourceInterface struct {
	mock.Mock
}

type MockResourceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceInterface) EXPECT() *MockResourceInterface_Expecter {
	return &MockResourceInterface_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) Apply(ctx context.Context, name string, obj *unstructured.Unstructured, options v1.ApplyOptions, subresources ...string) (*unstructured.Unstructured, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, obj, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, obj, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, name, obj, options, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, name, obj, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) error); ok {
		r1 = returnFunc(ctx, name, obj, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceInterface_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockResourceInterface_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - obj *unstructured.Unstructured
//   - options v1.ApplyOptions
//   - subresources ...string
func (_e *MockResourceInterface_Expecter) Apply(ctx interface{}, name interface{}, obj interface{}, options interface{}, subresources ...interface{}) *MockResourceInterface_Apply_Call {
	return &MockResourceInterface_Apply_Call{Call: _e.mock.On("Apply",
		append([]interface{}{ctx, name, obj, options}, subresources...)...)}
}

func (_c *MockResourceInterface_Apply_Call) Run(run func(ctx context.Context, name string, obj *unstructured.Unstructured, options v1.ApplyOptions, subresources ...string)) *MockResourceInterface_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *unstructured.Unstructured
		if args[2] != nil {
			arg2 = args[2].(*unstructured.Unstructured)
		}
		var arg3 v1.ApplyOptions
		if args[3] != nil {
			arg3 = args[3].(v1.ApplyOptions)
		}
		var arg4 []string
		var variadicArgs []string
		if len(args) > 4 {
			variadicArgs = args[4].([]string)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockResourceInterface_Apply_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockResourceInterface_Apply_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockResourceInterface_Apply_Call) RunAndReturn(run func(ctx context.Context, name string, obj *unstructured.Unstructured, options v1.ApplyOptions, subresources ...string) (*unstructured.Unstructured, error)) *MockResourceInterface_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyStatus provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) ApplyStatus(ctx context.Context, name string, obj *unstructured.Unstructured, options v1.ApplyOptions) (*unstructured.Unstructured, error) {
	ret := _mock.Called(ctx, name, obj, options)

	if len(ret) == 0 {
		panic("no return value specified for ApplyStatus")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, name, obj, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, name, obj, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) error); ok {
		r1 = returnFunc(ctx, name, obj, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceInterface_ApplyStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyStatus'
type MockResourceInterface_ApplyStatus_Call struct {
	*mock.Call
}

// ApplyStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - obj *unstructured.Unstructured
//   - options v1.ApplyOptions
func (_e *MockResourceInterface_Expecter) ApplyStatus(ctx interface{}, name interface{}, obj interface{}, options interface{}) *MockResourceInterface_ApplyStatus_Call {
	return &MockResourceInterface_ApplyStatus_Call{Call: _e.mock.On("ApplyStatus", ctx, name, obj, options)}
}

func (_c *MockResourceInterface_ApplyStatus_Call) Run(run func(ctx context.Context, name string, obj *unstructured.Unstructured, options v1.ApplyOptions)) *MockResourceInterface_ApplyStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *unstructured.Unstructured
		if args[2] != nil {
			arg2 = args[2].(*unstructured.Unstructured)
		}
		var arg3 v1.ApplyOptions
		if args[3] != nil {
			arg3 = args[3].(v1.ApplyOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockResourceInterface_ApplyStatus_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockResourceInterface_ApplyStatus_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockResourceInterface_ApplyStatus_Call) RunAndReturn(run func(ctx context.Context, name string, obj *unstructured.Unstructured, options v1.ApplyOptions) (*unstructured.Unstructured, error)) *MockResourceInterface_ApplyStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) Create(ctx context.Context, obj *unstructured.Unstructured, options v1.CreateOptions, subresources ...string) (*unstructured.Unstructured, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, obj, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, obj, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, obj, options, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, obj, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) error); ok {
		r1 = returnFunc(ctx, obj, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockResourceInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - options v1.CreateOptions
//   - subresources ...string
func (_e *MockResourceInterface_Expecter) Create(ctx interface{}, obj interface{}, options interface{}, subresources ...interface{}) *MockResourceInterface_Create_Call {
	return &MockResourceInterface_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, obj, options}, subresources...)...)}
}

func (_c *MockResourceInterface_Create_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, options v1.CreateOptions, subresources ...string)) *MockResourceInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *unstructured.Unstructured
		if args[1] != nil {
			arg1 = args[1].(*unstructured.Unstructured)
		}
		var arg2 v1.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v1.CreateOptions)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockResourceInterface_Create_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockResourceInterface_Create_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockResourceInterface_Create_Call) RunAndReturn(run func(ctx context.Context, obj *unstructured.Unstructured, options v1.CreateOptions, subresources ...string) (*unstructured.Unstructured, error)) *MockResourceInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) Delete(ctx context.Context, name string, options v1.DeleteOptions, subresources ...string) error {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v1.DeleteOptions, ...string) error); ok {
		r0 = returnFunc(ctx, name, options, subresources...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockResourceInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options v1.DeleteOptions
//   - subresources ...string
func (_e *MockResourceInterface_Expecter) Delete(ctx interface{}, name interface{}, options interface{}, subresources ...interface{}) *MockResourceInterface_Delete_Call {
	return &MockResourceInterface_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, name, options}, subresources...)...)}
}

func (_c *MockResourceInterface_Delete_Call) Run(run func(ctx context.Context, name string, options v1.DeleteOptions, subresources ...string)) *MockResourceInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v1.DeleteOptions
		if args[2] != nil {
			arg2 = args[2].(v1.DeleteOptions)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockResourceInterface_Delete_Call) Return(err error) *MockResourceInterface_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceInterface_Delete_Call) RunAndReturn(run func(ctx context.Context, name string, options v1.DeleteOptions, subresources ...string) error) *MockResourceInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) DeleteCollection(ctx context.Context, options v1.DeleteOptions, listOptions v1.ListOptions) error {
	ret := _mock.Called(ctx, options, listOptions)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.DeleteOptions, v1.ListOptions) error); ok {
		r0 = returnFunc(ctx, options, listOptions)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceInterface_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type MockResourceInterface_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - options v1.DeleteOptions
//   - listOptions v1.ListOptions
func (_e *MockResourceInterface_Expecter) DeleteCollection(ctx interface{}, options interface{}, listOptions interface{}) *MockResourceInterface_DeleteCollection_Call {
	return &MockResourceInterface_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, options, listOptions)}
}

func (_c *MockResourceInterface_DeleteCollection_Call) Run(run func(ctx context.Context, options v1.DeleteOptions, listOptions v1.ListOptions)) *MockResourceInterface_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.DeleteOptions
		if args[1] != nil {
			arg1 = args[1].(v1.DeleteOptions)
		}
		var arg2 v1.ListOptions
		if args[2] != nil {
			arg2 = args[2].(v1.ListOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockResourceInterface_DeleteCollection_Call) Return(err error) *MockResourceInterface_DeleteCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceInterface_DeleteCollection_Call) RunAndReturn(run func(ctx context.Context, options v1.DeleteOptions, listOptions v1.ListOptions) error) *MockResourceInterface_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) Get(ctx context.Context, name string, options v1.GetOptions, subresources ...string) (*unstructured.Unstructured, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, name, options, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions, ...string) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, name, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v1.GetOptions, ...string) error); ok {
		r1 = returnFunc(ctx, name, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockResourceInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options v1.GetOptions
//   - subresources ...string
func (_e *MockResourceInterface_Expecter) Get(ctx interface{}, name interface{}, options interface{}, subresources ...interface{}) *MockResourceInterface_Get_Call {
	return &MockResourceInterface_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, name, options}, subresources...)...)}
}

func (_c *MockResourceInterface_Get_Call) Run(run func(ctx context.Context, name string, options v1.GetOptions, subresources ...string)) *MockResourceInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v1.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v1.GetOptions)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockResourceInterface_Get_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockResourceInterface_Get_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockResourceInterface_Get_Call) RunAndReturn(run func(ctx context.Context, name string, options v1.GetOptions, subresources ...string) (*unstructured.Unstructured, error)) *MockResourceInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) List(ctx context.Context, opts v1.ListOptions) (*unstructured.UnstructuredList, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *unstructured.UnstructuredList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) *unstructured.UnstructuredList); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.UnstructuredList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockResourceInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *MockResourceInterface_Expecter) List(ctx interface{}, opts interface{}) *MockResourceInterface_List_Call {
	return &MockResourceInterface_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockResourceInterface_List_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *MockResourceInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v1.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockResourceInterface_List_Call) Return(unstructuredList *unstructured.UnstructuredList, err error) *MockResourceInterface_List_Call {
	_c.Call.Return(unstructuredList, err)
	return _c
}

func (_c *MockResourceInterface_List_Call) RunAndReturn(run func(ctx context.Context, opts v1.ListOptions) (*unstructured.UnstructuredList, error)) *MockResourceInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, options v1.PatchOptions, subresources ...string) (*unstructured.Unstructured, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, pt, data, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, pt, data, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, name, pt, data, options, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, name, pt, data, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) error); ok {
		r1 = returnFunc(ctx, name, pt, data, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockResourceInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - options v1.PatchOptions
//   - subresources ...string
func (_e *MockResourceInterface_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, options interface{}, subresources ...interface{}) *MockResourceInterface_Patch_Call {
	return &MockResourceInterface_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, options}, subresources...)...)}
}

func (_c *MockResourceInterface_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, options v1.PatchOptions, subresources ...string)) *MockResourceInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 types.PatchType
		if args[2] != nil {
			arg2 = args[2].(types.PatchType)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		var arg4 v1.PatchOptions
		if args[4] != nil {
			arg4 = args[4].(v1.PatchOptions)
		}
		var arg5 []string
		var variadicArgs []string
		if len(args) > 5 {
			variadicArgs = args[5].([]string)
		}
		arg5 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5...,
		)
	})
	return _c
}

func (_c *MockResourceInterface_Patch_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockResourceInterface_Patch_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockResourceInterface_Patch_Call) RunAndReturn(run func(ctx context.Context, name string, pt types.PatchType, data []byte, options v1.PatchOptions, subresources ...string) (*unstructured.Unstructured, error)) *MockResourceInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) Update(ctx context.Context, obj *unstructured.Unstructured, options v1.UpdateOptions, subresources ...string) (*unstructured.Unstructured, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, obj, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, obj, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, obj, options, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, obj, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) error); ok {
		r1 = returnFunc(ctx, obj, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockResourceInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - options v1.UpdateOptions
//   - subresources ...string
func (_e *MockResourceInterface_Expecter) Update(ctx interface{}, obj interface{}, options interface{}, subresources ...interface{}) *MockResourceInterface_Update_Call {
	return &MockResourceInterface_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, obj, options}, subresources...)...)}
}

func (_c *MockResourceInterface_Update_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, options v1.UpdateOptions, subresources ...string)) *MockResourceInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *unstructured.Unstructured
		if args[1] != nil {
			arg1 = args[1].(*unstructured.Unstructured)
		}
		var arg2 v1.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v1.UpdateOptions)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockResourceInterface_Update_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockResourceInterface_Update_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockResourceInterface_Update_Call) RunAndReturn(run func(ctx context.Context, obj *unstructured.Unstructured, options v1.UpdateOptions, subresources ...string) (*unstructured.Unstructured, error)) *MockResourceInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) UpdateStatus(ctx context.Context, obj *unstructured.Unstructured, options v1.UpdateOptions) (*unstructured.Unstructured, error) {
	ret := _mock.Called(ctx, obj, options)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, obj, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, obj, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, obj, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceInterface_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockResourceInterface_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - options v1.UpdateOptions
func (_e *MockResourceInterface_Expecter) UpdateStatus(ctx interface{}, obj interface{}, options interface{}) *MockResourceInterface_UpdateStatus_Call {
	return &MockResourceInterface_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, obj, options)}
}

func (_c *MockResourceInterface_UpdateStatus_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, options v1.UpdateOptions)) *MockResourceInterface_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *unstructured.Unstructured
		if args[1] != nil {
			arg1 = args[1].(*unstructured.Unstructured)
		}
		var arg2 v1.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v1.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockResourceInterface_UpdateStatus_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockResourceInterface_UpdateStatus_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockResourceInterface_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, obj *unstructured.Unstructured, options v1.UpdateOptions) (*unstructured.Unstructured, error)) *MockResourceInterface_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockResourceInterface
func (_mock *MockResourceInterface) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (watch.Interface, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) watch.Interface); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceInterface_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockResourceInterface_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *MockResourceInterface_Expecter) Watch(ctx interface{}, opts interface{}) *MockResourceInterface_Watch_Call {
	return &MockResourceInterface_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *MockResourceInterface_Watch_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *MockResourceInterface_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v1.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockResourceInterface_Watch_Call) Return(interfaceParam watch.Interface, err error) *MockResourceInterface_Watch_Call {
	_c.Call.Return(interfaceParam, err)
	return _c
}

func (_c *MockResourceInterface_Watch_Call) RunAndReturn(run func(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)) *MockResourceInterface_Watch_Call {
	_c.Call.Return(run)
	return _c
}
