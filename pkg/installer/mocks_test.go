// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package installer

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockInstaller creates a new instance of MockInstaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInstaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInstaller {
	mock := &MockInstaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInstaller is an autogenerated mock type for the Installer type
type MockInstaller struct {
	mock.Mock
}

type MockInstaller_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInstaller) EXPECT() *MockInstaller_Expecter {
	return &MockInstaller_Expecter{mock: &_m.Mock}
}

// Install provides a mock function for the type MockInstaller
func (_mock *MockInstaller) Install() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstaller_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type MockInstaller_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
func (_e *MockInstaller_Expecter) Install() *MockInstaller_Install_Call {
	return &MockInstaller_Install_Call{Call: _e.mock.On("Install")}
}

func (_c *MockInstaller_Install_Call) Run(run func()) *MockInstaller_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstaller_Install_Call) Return(err error) *MockInstaller_Install_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstaller_Install_Call) RunAndReturn(run func() error) *MockInstaller_Install_Call {
	_c.Call.Return(run)
	return _c
}

// Uninstall provides a mock function for the type MockInstaller
func (_mock *MockInstaller) Uninstall() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Uninstall")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstaller_Uninstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uninstall'
type MockInstaller_Uninstall_Call struct {
	*mock.Call
}

// Uninstall is a helper method to define mock.On call
func (_e *MockInstaller_Expecter) Uninstall() *MockInstaller_Uninstall_Call {
	return &MockInstaller_Uninstall_Call{Call: _e.mock.On("Uninstall")}
}

func (_c *MockInstaller_Uninstall_Call) Run(run func()) *MockInstaller_Uninstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstaller_Uninstall_Call) Return(err error) *MockInstaller_Uninstall_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstaller_Uninstall_Call) RunAndReturn(run func() error) *MockInstaller_Uninstall_Call {
	_c.Call.Return(run)
	return _c
}
