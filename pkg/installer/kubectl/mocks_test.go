// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package kubectlinstaller

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	v11 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	"k8s.io/apiextensions-apiserver/pkg/client/applyconfiguration/apiextensions/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

// NewMockAPIExtensionsClient creates a new instance of MockAPIExtensionsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIExtensionsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIExtensionsClient {
	mock := &MockAPIExtensionsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAPIExtensionsClient is an autogenerated mock type for the APIExtensionsClient type
type MockAPIExtensionsClient struct {
	mock.Mock
}

type MockAPIExtensionsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIExtensionsClient) EXPECT() *MockAPIExtensionsClient_Expecter {
	return &MockAPIExtensionsClient_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Apply(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, customResourceDefinition, opts)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, customResourceDefinition, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) error); ok {
		r1 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockAPIExtensionsClient_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration
//   - opts v10.ApplyOptions
func (_e *MockAPIExtensionsClient_Expecter) Apply(ctx interface{}, customResourceDefinition interface{}, opts interface{}) *MockAPIExtensionsClient_Apply_Call {
	return &MockAPIExtensionsClient_Apply_Call{Call: _e.mock.On("Apply", ctx, customResourceDefinition, opts)}
}

func (_c *MockAPIExtensionsClient_Apply_Call) Run(run func(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions)) *MockAPIExtensionsClient_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CustomResourceDefinitionApplyConfiguration
		if args[1] != nil {
			arg1 = args[1].(*v1.CustomResourceDefinitionApplyConfiguration)
		}
		var arg2 v10.ApplyOptions
		if args[2] != nil {
			arg2 = args[2].(v10.ApplyOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Apply_Call) Return(result *v11.CustomResourceDefinition, err error) *MockAPIExtensionsClient_Apply_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockAPIExtensionsClient_Apply_Call) RunAndReturn(run func(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions) (*v11.CustomResourceDefinition, error)) *MockAPIExtensionsClient_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyStatus provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) ApplyStatus(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, customResourceDefinition, opts)

	if len(ret) == 0 {
		panic("no return value specified for ApplyStatus")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, customResourceDefinition, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CustomResourceDefinitionApplyConfiguration, v10.ApplyOptions) error); ok {
		r1 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_ApplyStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyStatus'
type MockAPIExtensionsClient_ApplyStatus_Call struct {
	*mock.Call
}

// ApplyStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration
//   - opts v10.ApplyOptions
func (_e *MockAPIExtensionsClient_Expecter) ApplyStatus(ctx interface{}, customResourceDefinition interface{}, opts interface{}) *MockAPIExtensionsClient_ApplyStatus_Call {
	return &MockAPIExtensionsClient_ApplyStatus_Call{Call: _e.mock.On("ApplyStatus", ctx, customResourceDefinition, opts)}
}

func (_c *MockAPIExtensionsClient_ApplyStatus_Call) Run(run func(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions)) *MockAPIExtensionsClient_ApplyStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CustomResourceDefinitionApplyConfiguration
		if args[1] != nil {
			arg1 = args[1].(*v1.CustomResourceDefinitionApplyConfiguration)
		}
		var arg2 v10.ApplyOptions
		if args[2] != nil {
			arg2 = args[2].(v10.ApplyOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_ApplyStatus_Call) Return(result *v11.CustomResourceDefinition, err error) *MockAPIExtensionsClient_ApplyStatus_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockAPIExtensionsClient_ApplyStatus_Call) RunAndReturn(run func(ctx context.Context, customResourceDefinition *v1.CustomResourceDefinitionApplyConfiguration, opts v10.ApplyOptions) (*v11.CustomResourceDefinition, error)) *MockAPIExtensionsClient_ApplyStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Create(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.CreateOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, customResourceDefinition, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.CreateOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, customResourceDefinition, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.CreateOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v11.CustomResourceDefinition, v10.CreateOptions) error); ok {
		r1 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAPIExtensionsClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - customResourceDefinition *v11.CustomResourceDefinition
//   - opts v10.CreateOptions
func (_e *MockAPIExtensionsClient_Expecter) Create(ctx interface{}, customResourceDefinition interface{}, opts interface{}) *MockAPIExtensionsClient_Create_Call {
	return &MockAPIExtensionsClient_Create_Call{Call: _e.mock.On("Create", ctx, customResourceDefinition, opts)}
}

func (_c *MockAPIExtensionsClient_Create_Call) Run(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.CreateOptions)) *MockAPIExtensionsClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v11.CustomResourceDefinition
		if args[1] != nil {
			arg1 = args[1].(*v11.CustomResourceDefinition)
		}
		var arg2 v10.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.CreateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Create_Call) Return(customResourceDefinition1 *v11.CustomResourceDefinition, err error) *MockAPIExtensionsClient_Create_Call {
	_c.Call.Return(customResourceDefinition1, err)
	return _c
}

func (_c *MockAPIExtensionsClient_Create_Call) RunAndReturn(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.CreateOptions) (*v11.CustomResourceDefinition, error)) *MockAPIExtensionsClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Delete(ctx context.Context, name string, opts v10.DeleteOptions) error {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.DeleteOptions) error); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAPIExtensionsClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAPIExtensionsClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.DeleteOptions
func (_e *MockAPIExtensionsClient_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *MockAPIExtensionsClient_Delete_Call {
	return &MockAPIExtensionsClient_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *MockAPIExtensionsClient_Delete_Call) Run(run func(ctx context.Context, name string, opts v10.DeleteOptions)) *MockAPIExtensionsClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.DeleteOptions
		if args[2] != nil {
			arg2 = args[2].(v10.DeleteOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Delete_Call) Return(err error) *MockAPIExtensionsClient_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAPIExtensionsClient_Delete_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.DeleteOptions) error) *MockAPIExtensionsClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) DeleteCollection(ctx context.Context, opts v10.DeleteOptions, listOpts v10.ListOptions) error {
	ret := _mock.Called(ctx, opts, listOpts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.DeleteOptions, v10.ListOptions) error); ok {
		r0 = returnFunc(ctx, opts, listOpts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAPIExtensionsClient_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type MockAPIExtensionsClient_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.DeleteOptions
//   - listOpts v10.ListOptions
func (_e *MockAPIExtensionsClient_Expecter) DeleteCollection(ctx interface{}, opts interface{}, listOpts interface{}) *MockAPIExtensionsClient_DeleteCollection_Call {
	return &MockAPIExtensionsClient_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, opts, listOpts)}
}

func (_c *MockAPIExtensionsClient_DeleteCollection_Call) Run(run func(ctx context.Context, opts v10.DeleteOptions, listOpts v10.ListOptions)) *MockAPIExtensionsClient_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.DeleteOptions
		if args[1] != nil {
			arg1 = args[1].(v10.DeleteOptions)
		}
		var arg2 v10.ListOptions
		if args[2] != nil {
			arg2 = args[2].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_DeleteCollection_Call) Return(err error) *MockAPIExtensionsClient_DeleteCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAPIExtensionsClient_DeleteCollection_Call) RunAndReturn(run func(ctx context.Context, opts v10.DeleteOptions, listOpts v10.ListOptions) error) *MockAPIExtensionsClient_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Get(ctx context.Context, name string, opts v10.GetOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v10.GetOptions) error); ok {
		r1 = returnFunc(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAPIExtensionsClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.GetOptions
func (_e *MockAPIExtensionsClient_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *MockAPIExtensionsClient_Get_Call {
	return &MockAPIExtensionsClient_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *MockAPIExtensionsClient_Get_Call) Run(run func(ctx context.Context, name string, opts v10.GetOptions)) *MockAPIExtensionsClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v10.GetOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Get_Call) Return(customResourceDefinition *v11.CustomResourceDefinition, err error) *MockAPIExtensionsClient_Get_Call {
	_c.Call.Return(customResourceDefinition, err)
	return _c
}

func (_c *MockAPIExtensionsClient_Get_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.GetOptions) (*v11.CustomResourceDefinition, error)) *MockAPIExtensionsClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) List(ctx context.Context, opts v10.ListOptions) (*v11.CustomResourceDefinitionList, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v11.CustomResourceDefinitionList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) (*v11.CustomResourceDefinitionList, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) *v11.CustomResourceDefinitionList); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinitionList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v10.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAPIExtensionsClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.ListOptions
func (_e *MockAPIExtensionsClient_Expecter) List(ctx interface{}, opts interface{}) *MockAPIExtensionsClient_List_Call {
	return &MockAPIExtensionsClient_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockAPIExtensionsClient_List_Call) Run(run func(ctx context.Context, opts v10.ListOptions)) *MockAPIExtensionsClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_List_Call) Return(customResourceDefinitionList *v11.CustomResourceDefinitionList, err error) *MockAPIExtensionsClient_List_Call {
	_c.Call.Return(customResourceDefinitionList, err)
	return _c
}

func (_c *MockAPIExtensionsClient_List_Call) RunAndReturn(run func(ctx context.Context, opts v10.ListOptions) (*v11.CustomResourceDefinitionList, error)) *MockAPIExtensionsClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v10.PatchOptions, subresources ...string) (*v11.CustomResourceDefinition, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, pt, data, opts, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, pt, data, opts)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, name, pt, data, opts, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) error); ok {
		r1 = returnFunc(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockAPIExtensionsClient_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - opts v10.PatchOptions
//   - subresources ...string
func (_e *MockAPIExtensionsClient_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, opts interface{}, subresources ...interface{}) *MockAPIExtensionsClient_Patch_Call {
	return &MockAPIExtensionsClient_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, opts}, subresources...)...)}
}

func (_c *MockAPIExtensionsClient_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts v10.PatchOptions, subresources ...string)) *MockAPIExtensionsClient_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 types.PatchType
		if args[2] != nil {
			arg2 = args[2].(types.PatchType)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		var arg4 v10.PatchOptions
		if args[4] != nil {
			arg4 = args[4].(v10.PatchOptions)
		}
		var arg5 []string
		var variadicArgs []string
		if len(args) > 5 {
			variadicArgs = args[5].([]string)
		}
		arg5 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5...,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Patch_Call) Return(result *v11.CustomResourceDefinition, err error) *MockAPIExtensionsClient_Patch_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockAPIExtensionsClient_Patch_Call) RunAndReturn(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts v10.PatchOptions, subresources ...string) (*v11.CustomResourceDefinition, error)) *MockAPIExtensionsClient_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Update(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, customResourceDefinition, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, customResourceDefinition, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAPIExtensionsClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - customResourceDefinition *v11.CustomResourceDefinition
//   - opts v10.UpdateOptions
func (_e *MockAPIExtensionsClient_Expecter) Update(ctx interface{}, customResourceDefinition interface{}, opts interface{}) *MockAPIExtensionsClient_Update_Call {
	return &MockAPIExtensionsClient_Update_Call{Call: _e.mock.On("Update", ctx, customResourceDefinition, opts)}
}

func (_c *MockAPIExtensionsClient_Update_Call) Run(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions)) *MockAPIExtensionsClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v11.CustomResourceDefinition
		if args[1] != nil {
			arg1 = args[1].(*v11.CustomResourceDefinition)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Update_Call) Return(customResourceDefinition1 *v11.CustomResourceDefinition, err error) *MockAPIExtensionsClient_Update_Call {
	_c.Call.Return(customResourceDefinition1, err)
	return _c
}

func (_c *MockAPIExtensionsClient_Update_Call) RunAndReturn(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions) (*v11.CustomResourceDefinition, error)) *MockAPIExtensionsClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) UpdateStatus(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions) (*v11.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, customResourceDefinition, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *v11.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) (*v11.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, customResourceDefinition, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) *v11.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v11.CustomResourceDefinition, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, customResourceDefinition, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockAPIExtensionsClient_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - customResourceDefinition *v11.CustomResourceDefinition
//   - opts v10.UpdateOptions
func (_e *MockAPIExtensionsClient_Expecter) UpdateStatus(ctx interface{}, customResourceDefinition interface{}, opts interface{}) *MockAPIExtensionsClient_UpdateStatus_Call {
	return &MockAPIExtensionsClient_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, customResourceDefinition, opts)}
}

func (_c *MockAPIExtensionsClient_UpdateStatus_Call) Run(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions)) *MockAPIExtensionsClient_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v11.CustomResourceDefinition
		if args[1] != nil {
			arg1 = args[1].(*v11.CustomResourceDefinition)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_UpdateStatus_Call) Return(customResourceDefinition1 *v11.CustomResourceDefinition, err error) *MockAPIExtensionsClient_UpdateStatus_Call {
	_c.Call.Return(customResourceDefinition1, err)
	return _c
}

func (_c *MockAPIExtensionsClient_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, customResourceDefinition *v11.CustomResourceDefinition, opts v10.UpdateOptions) (*v11.CustomResourceDefinition, error)) *MockAPIExtensionsClient_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Watch(ctx context.Context, opts v10.ListOptions) (watch.Interface, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) (watch.Interface, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) watch.Interface); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v10.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockAPIExtensionsClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.ListOptions
func (_e *MockAPIExtensionsClient_Expecter) Watch(ctx interface{}, opts interface{}) *MockAPIExtensionsClient_Watch_Call {
	return &MockAPIExtensionsClient_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *MockAPIExtensionsClient_Watch_Call) Run(run func(ctx context.Context, opts v10.ListOptions)) *MockAPIExtensionsClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Watch_Call) Return(interfaceParam watch.Interface, err error) *MockAPIExtensionsClient_Watch_Call {
	_c.Call.Return(interfaceParam, err)
	return _c
}

func (_c *MockAPIExtensionsClient_Watch_Call) RunAndReturn(run func(ctx context.Context, opts v10.ListOptions) (watch.Interface, error)) *MockAPIExtensionsClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDynamicClient creates a new instance of MockDynamicClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDynamicClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDynamicClient {
	mock := &MockDynamicClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDynamicClient is an autogenerated mock type for the DynamicClient type
type MockDynamicClient struct {
	mock.Mock
}

type MockDynamicClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamicClient) EXPECT() *MockDynamicClient_Expecter {
	return &MockDynamicClient_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Apply(ctx context.Context, name string, obj *unstructured.Unstructured, options v10.ApplyOptions, subresources ...string) (*unstructured.Unstructured, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, obj, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, obj, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v10.ApplyOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, name, obj, options, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v10.ApplyOptions, ...string) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, name, obj, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *unstructured.Unstructured, v10.ApplyOptions, ...string) error); ok {
		r1 = returnFunc(ctx, name, obj, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockDynamicClient_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - obj *unstructured.Unstructured
//   - options v10.ApplyOptions
//   - subresources ...string
func (_e *MockDynamicClient_Expecter) Apply(ctx interface{}, name interface{}, obj interface{}, options interface{}, subresources ...interface{}) *MockDynamicClient_Apply_Call {
	return &MockDynamicClient_Apply_Call{Call: _e.mock.On("Apply",
		append([]interface{}{ctx, name, obj, options}, subresources...)...)}
}

func (_c *MockDynamicClient_Apply_Call) Run(run func(ctx context.Context, name string, obj *unstructured.Unstructured, options v10.ApplyOptions, subresources ...string)) *MockDynamicClient_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *unstructured.Unstructured
		if args[2] != nil {
			arg2 = args[2].(*unstructured.Unstructured)
		}
		var arg3 v10.ApplyOptions
		if args[3] != nil {
			arg3 = args[3].(v10.ApplyOptions)
		}
		var arg4 []string
		var variadicArgs []string
		if len(args) > 4 {
			variadicArgs = args[4].([]string)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Apply_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClient_Apply_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClient_Apply_Call) RunAndReturn(run func(ctx context.Context, name string, obj *unstructured.Unstructured, options v10.ApplyOptions, subresources ...string) (*unstructured.Unstructured, error)) *MockDynamicClient_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyStatus provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) ApplyStatus(ctx context.Context, name string, obj *unstructured.Unstructured, options v10.ApplyOptions) (*unstructured.Unstructured, error) {
	ret := _mock.Called(ctx, name, obj, options)

	if len(ret) == 0 {
		panic("no return value specified for ApplyStatus")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v10.ApplyOptions) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, name, obj, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v10.ApplyOptions) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, name, obj, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *unstructured.Unstructured, v10.ApplyOptions) error); ok {
		r1 = returnFunc(ctx, name, obj, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_ApplyStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyStatus'
type MockDynamicClient_ApplyStatus_Call struct {
	*mock.Call
}

// ApplyStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - obj *unstructured.Unstructured
//   - options v10.ApplyOptions
func (_e *MockDynamicClient_Expecter) ApplyStatus(ctx interface{}, name interface{}, obj interface{}, options interface{}) *MockDynamicClient_ApplyStatus_Call {
	return &MockDynamicClient_ApplyStatus_Call{Call: _e.mock.On("ApplyStatus", ctx, name, obj, options)}
}

func (_c *MockDynamicClient_ApplyStatus_Call) Run(run func(ctx context.Context, name string, obj *unstructured.Unstructured, options v10.ApplyOptions)) *MockDynamicClient_ApplyStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *unstructured.Unstructured
		if args[2] != nil {
			arg2 = args[2].(*unstructured.Unstructured)
		}
		var arg3 v10.ApplyOptions
		if args[3] != nil {
			arg3 = args[3].(v10.ApplyOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDynamicClient_ApplyStatus_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClient_ApplyStatus_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClient_ApplyStatus_Call) RunAndReturn(run func(ctx context.Context, name string, obj *unstructured.Unstructured, options v10.ApplyOptions) (*unstructured.Unstructured, error)) *MockDynamicClient_ApplyStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Create(ctx context.Context, obj *unstructured.Unstructured, options v10.CreateOptions, subresources ...string) (*unstructured.Unstructured, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, obj, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, obj, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.CreateOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, obj, options, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.CreateOptions, ...string) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, obj, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v10.CreateOptions, ...string) error); ok {
		r1 = returnFunc(ctx, obj, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDynamicClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - options v10.CreateOptions
//   - subresources ...string
func (_e *MockDynamicClient_Expecter) Create(ctx interface{}, obj interface{}, options interface{}, subresources ...interface{}) *MockDynamicClient_Create_Call {
	return &MockDynamicClient_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, obj, options}, subresources...)...)}
}

func (_c *MockDynamicClient_Create_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, options v10.CreateOptions, subresources ...string)) *MockDynamicClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *unstructured.Unstructured
		if args[1] != nil {
			arg1 = args[1].(*unstructured.Unstructured)
		}
		var arg2 v10.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.CreateOptions)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Create_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClient_Create_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClient_Create_Call) RunAndReturn(run func(ctx context.Context, obj *unstructured.Unstructured, options v10.CreateOptions, subresources ...string) (*unstructured.Unstructured, error)) *MockDynamicClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Delete(ctx context.Context, name string, options v10.DeleteOptions, subresources ...string) error {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.DeleteOptions, ...string) error); ok {
		r0 = returnFunc(ctx, name, options, subresources...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDynamicClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDynamicClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options v10.DeleteOptions
//   - subresources ...string
func (_e *MockDynamicClient_Expecter) Delete(ctx interface{}, name interface{}, options interface{}, subresources ...interface{}) *MockDynamicClient_Delete_Call {
	return &MockDynamicClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, name, options}, subresources...)...)}
}

func (_c *MockDynamicClient_Delete_Call) Run(run func(ctx context.Context, name string, options v10.DeleteOptions, subresources ...string)) *MockDynamicClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.DeleteOptions
		if args[2] != nil {
			arg2 = args[2].(v10.DeleteOptions)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Delete_Call) Return(err error) *MockDynamicClient_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDynamicClient_Delete_Call) RunAndReturn(run func(ctx context.Context, name string, options v10.DeleteOptions, subresources ...string) error) *MockDynamicClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) DeleteCollection(ctx context.Context, options v10.DeleteOptions, listOptions v10.ListOptions) error {
	ret := _mock.Called(ctx, options, listOptions)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.DeleteOptions, v10.ListOptions) error); ok {
		r0 = returnFunc(ctx, options, listOptions)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDynamicClient_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type MockDynamicClient_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - options v10.DeleteOptions
//   - listOptions v10.ListOptions
func (_e *MockDynamicClient_Expecter) DeleteCollection(ctx interface{}, options interface{}, listOptions interface{}) *MockDynamicClient_DeleteCollection_Call {
	return &MockDynamicClient_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, options, listOptions)}
}

func (_c *MockDynamicClient_DeleteCollection_Call) Run(run func(ctx context.Context, options v10.DeleteOptions, listOptions v10.ListOptions)) *MockDynamicClient_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.DeleteOptions
		if args[1] != nil {
			arg1 = args[1].(v10.DeleteOptions)
		}
		var arg2 v10.ListOptions
		if args[2] != nil {
			arg2 = args[2].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDynamicClient_DeleteCollection_Call) Return(err error) *MockDynamicClient_DeleteCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDynamicClient_DeleteCollection_Call) RunAndReturn(run func(ctx context.Context, options v10.DeleteOptions, listOptions v10.ListOptions) error) *MockDynamicClient_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Get(ctx context.Context, name string, options v10.GetOptions, subresources ...string) (*unstructured.Unstructured, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, name, options, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions, ...string) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, name, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v10.GetOptions, ...string) error); ok {
		r1 = returnFunc(ctx, name, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDynamicClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options v10.GetOptions
//   - subresources ...string
func (_e *MockDynamicClient_Expecter) Get(ctx interface{}, name interface{}, options interface{}, subresources ...interface{}) *MockDynamicClient_Get_Call {
	return &MockDynamicClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, name, options}, subresources...)...)}
}

func (_c *MockDynamicClient_Get_Call) Run(run func(ctx context.Context, name string, options v10.GetOptions, subresources ...string)) *MockDynamicClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v10.GetOptions)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Get_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClient_Get_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClient_Get_Call) RunAndReturn(run func(ctx context.Context, name string, options v10.GetOptions, subresources ...string) (*unstructured.Unstructured, error)) *MockDynamicClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) List(ctx context.Context, opts v10.ListOptions) (*unstructured.UnstructuredList, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *unstructured.UnstructuredList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) (*unstructured.UnstructuredList, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) *unstructured.UnstructuredList); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.UnstructuredList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v10.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockDynamicClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.ListOptions
func (_e *MockDynamicClient_Expecter) List(ctx interface{}, opts interface{}) *MockDynamicClient_List_Call {
	return &MockDynamicClient_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockDynamicClient_List_Call) Run(run func(ctx context.Context, opts v10.ListOptions)) *MockDynamicClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDynamicClient_List_Call) Return(unstructuredList *unstructured.UnstructuredList, err error) *MockDynamicClient_List_Call {
	_c.Call.Return(unstructuredList, err)
	return _c
}

func (_c *MockDynamicClient_List_Call) RunAndReturn(run func(ctx context.Context, opts v10.ListOptions) (*unstructured.UnstructuredList, error)) *MockDynamicClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, options v10.PatchOptions, subresources ...string) (*unstructured.Unstructured, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, pt, data, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, pt, data, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, name, pt, data, options, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, name, pt, data, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) error); ok {
		r1 = returnFunc(ctx, name, pt, data, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockDynamicClient_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - options v10.PatchOptions
//   - subresources ...string
func (_e *MockDynamicClient_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, options interface{}, subresources ...interface{}) *MockDynamicClient_Patch_Call {
	return &MockDynamicClient_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, options}, subresources...)...)}
}

func (_c *MockDynamicClient_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, options v10.PatchOptions, subresources ...string)) *MockDynamicClient_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 types.PatchType
		if args[2] != nil {
			arg2 = args[2].(types.PatchType)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		var arg4 v10.PatchOptions
		if args[4] != nil {
			arg4 = args[4].(v10.PatchOptions)
		}
		var arg5 []string
		var variadicArgs []string
		if len(args) > 5 {
			variadicArgs = args[5].([]string)
		}
		arg5 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5...,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Patch_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClient_Patch_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClient_Patch_Call) RunAndReturn(run func(ctx context.Context, name string, pt types.PatchType, data []byte, options v10.PatchOptions, subresources ...string) (*unstructured.Unstructured, error)) *MockDynamicClient_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Update(ctx context.Context, obj *unstructured.Unstructured, options v10.UpdateOptions, subresources ...string) (*unstructured.Unstructured, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, obj, options, subresources)
	} else {
		tmpRet = _mock.Called(ctx, obj, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, obj, options, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions, ...string) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, obj, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions, ...string) error); ok {
		r1 = returnFunc(ctx, obj, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDynamicClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - options v10.UpdateOptions
//   - subresources ...string
func (_e *MockDynamicClient_Expecter) Update(ctx interface{}, obj interface{}, options interface{}, subresources ...interface{}) *MockDynamicClient_Update_Call {
	return &MockDynamicClient_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, obj, options}, subresources...)...)}
}

func (_c *MockDynamicClient_Update_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, options v10.UpdateOptions, subresources ...string)) *MockDynamicClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *unstructured.Unstructured
		if args[1] != nil {
			arg1 = args[1].(*unstructured.Unstructured)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Update_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClient_Update_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClient_Update_Call) RunAndReturn(run func(ctx context.Context, obj *unstructured.Unstructured, options v10.UpdateOptions, subresources ...string) (*unstructured.Unstructured, error)) *MockDynamicClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) UpdateStatus(ctx context.Context, obj *unstructured.Unstructured, options v10.UpdateOptions) (*unstructured.Unstructured, error) {
	ret := _mock.Called(ctx, obj, options)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, obj, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, obj, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, obj, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockDynamicClient_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - options v10.UpdateOptions
func (_e *MockDynamicClient_Expecter) UpdateStatus(ctx interface{}, obj interface{}, options interface{}) *MockDynamicClient_UpdateStatus_Call {
	return &MockDynamicClient_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, obj, options)}
}

func (_c *MockDynamicClient_UpdateStatus_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, options v10.UpdateOptions)) *MockDynamicClient_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *unstructured.Unstructured
		if args[1] != nil {
			arg1 = args[1].(*unstructured.Unstructured)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDynamicClient_UpdateStatus_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClient_UpdateStatus_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClient_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, obj *unstructured.Unstructured, options v10.UpdateOptions) (*unstructured.Unstructured, error)) *MockDynamicClient_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Watch(ctx context.Context, opts v10.ListOptions) (watch.Interface, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) (watch.Interface, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) watch.Interface); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v10.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockDynamicClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.ListOptions
func (_e *MockDynamicClient_Expecter) Watch(ctx interface{}, opts interface{}) *MockDynamicClient_Watch_Call {
	return &MockDynamicClient_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *MockDynamicClient_Watch_Call) Run(run func(ctx context.Context, opts v10.ListOptions)) *MockDynamicClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Watch_Call) Return(interfaceParam watch.Interface, err error) *MockDynamicClient_Watch_Call {
	_c.Call.Return(interfaceParam, err)
	return _c
}

func (_c *MockDynamicClient_Watch_Call) RunAndReturn(run func(ctx context.Context, opts v10.ListOptions) (watch.Interface, error)) *MockDynamicClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}
