// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package kubectlinstaller

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/rest"
)

// NewMockAPIExtensionsClientInterface creates a new instance of MockAPIExtensionsClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIExtensionsClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIExtensionsClientInterface {
	mock := &MockAPIExtensionsClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAPIExtensionsClientInterface is an autogenerated mock type for the APIExtensionsClientInterface type
type MockAPIExtensionsClientInterface struct {
	mock.Mock
}

type MockAPIExtensionsClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIExtensionsClientInterface) EXPECT() *MockAPIExtensionsClientInterface_Expecter {
	return &MockAPIExtensionsClientInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAPIExtensionsClientInterface
func (_mock *MockAPIExtensionsClientInterface) Create(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.CreateOptions) (*v1.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, crd, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinition, v10.CreateOptions) (*v1.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, crd, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinition, v10.CreateOptions) *v1.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, crd, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CustomResourceDefinition, v10.CreateOptions) error); ok {
		r1 = returnFunc(ctx, crd, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClientInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAPIExtensionsClientInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - crd *v1.CustomResourceDefinition
//   - opts v10.CreateOptions
func (_e *MockAPIExtensionsClientInterface_Expecter) Create(ctx interface{}, crd interface{}, opts interface{}) *MockAPIExtensionsClientInterface_Create_Call {
	return &MockAPIExtensionsClientInterface_Create_Call{Call: _e.mock.On("Create", ctx, crd, opts)}
}

func (_c *MockAPIExtensionsClientInterface_Create_Call) Run(run func(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.CreateOptions)) *MockAPIExtensionsClientInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CustomResourceDefinition
		if args[1] != nil {
			arg1 = args[1].(*v1.CustomResourceDefinition)
		}
		var arg2 v10.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.CreateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClientInterface_Create_Call) Return(customResourceDefinition *v1.CustomResourceDefinition, err error) *MockAPIExtensionsClientInterface_Create_Call {
	_c.Call.Return(customResourceDefinition, err)
	return _c
}

func (_c *MockAPIExtensionsClientInterface_Create_Call) RunAndReturn(run func(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.CreateOptions) (*v1.CustomResourceDefinition, error)) *MockAPIExtensionsClientInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockAPIExtensionsClientInterface
func (_mock *MockAPIExtensionsClientInterface) Delete(ctx context.Context, name string, opts v10.DeleteOptions) error {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.DeleteOptions) error); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAPIExtensionsClientInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAPIExtensionsClientInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.DeleteOptions
func (_e *MockAPIExtensionsClientInterface_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *MockAPIExtensionsClientInterface_Delete_Call {
	return &MockAPIExtensionsClientInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *MockAPIExtensionsClientInterface_Delete_Call) Run(run func(ctx context.Context, name string, opts v10.DeleteOptions)) *MockAPIExtensionsClientInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.DeleteOptions
		if args[2] != nil {
			arg2 = args[2].(v10.DeleteOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClientInterface_Delete_Call) Return(err error) *MockAPIExtensionsClientInterface_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAPIExtensionsClientInterface_Delete_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.DeleteOptions) error) *MockAPIExtensionsClientInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockAPIExtensionsClientInterface
func (_mock *MockAPIExtensionsClientInterface) Get(ctx context.Context, name string, opts v10.GetOptions) (*v1.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) (*v1.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) *v1.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v10.GetOptions) error); ok {
		r1 = returnFunc(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClientInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAPIExtensionsClientInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.GetOptions
func (_e *MockAPIExtensionsClientInterface_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *MockAPIExtensionsClientInterface_Get_Call {
	return &MockAPIExtensionsClientInterface_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *MockAPIExtensionsClientInterface_Get_Call) Run(run func(ctx context.Context, name string, opts v10.GetOptions)) *MockAPIExtensionsClientInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v10.GetOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClientInterface_Get_Call) Return(customResourceDefinition *v1.CustomResourceDefinition, err error) *MockAPIExtensionsClientInterface_Get_Call {
	_c.Call.Return(customResourceDefinition, err)
	return _c
}

func (_c *MockAPIExtensionsClientInterface_Get_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.GetOptions) (*v1.CustomResourceDefinition, error)) *MockAPIExtensionsClientInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAPIExtensionsClientInterface
func (_mock *MockAPIExtensionsClientInterface) Update(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.UpdateOptions) (*v1.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, crd, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinition, v10.UpdateOptions) (*v1.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, crd, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinition, v10.UpdateOptions) *v1.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, crd, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CustomResourceDefinition, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, crd, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClientInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAPIExtensionsClientInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - crd *v1.CustomResourceDefinition
//   - opts v10.UpdateOptions
func (_e *MockAPIExtensionsClientInterface_Expecter) Update(ctx interface{}, crd interface{}, opts interface{}) *MockAPIExtensionsClientInterface_Update_Call {
	return &MockAPIExtensionsClientInterface_Update_Call{Call: _e.mock.On("Update", ctx, crd, opts)}
}

func (_c *MockAPIExtensionsClientInterface_Update_Call) Run(run func(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.UpdateOptions)) *MockAPIExtensionsClientInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CustomResourceDefinition
		if args[1] != nil {
			arg1 = args[1].(*v1.CustomResourceDefinition)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClientInterface_Update_Call) Return(customResourceDefinition *v1.CustomResourceDefinition, err error) *MockAPIExtensionsClientInterface_Update_Call {
	_c.Call.Return(customResourceDefinition, err)
	return _c
}

func (_c *MockAPIExtensionsClientInterface_Update_Call) RunAndReturn(run func(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.UpdateOptions) (*v1.CustomResourceDefinition, error)) *MockAPIExtensionsClientInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDynamicClientInterface creates a new instance of MockDynamicClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDynamicClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDynamicClientInterface {
	mock := &MockDynamicClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDynamicClientInterface is an autogenerated mock type for the DynamicClientInterface type
type MockDynamicClientInterface struct {
	mock.Mock
}

type MockDynamicClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamicClientInterface) EXPECT() *MockDynamicClientInterface_Expecter {
	return &MockDynamicClientInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockDynamicClientInterface
func (_mock *MockDynamicClientInterface) Create(ctx context.Context, obj *unstructured.Unstructured, opts v10.CreateOptions) (*unstructured.Unstructured, error) {
	ret := _mock.Called(ctx, obj, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.CreateOptions) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, obj, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.CreateOptions) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, obj, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v10.CreateOptions) error); ok {
		r1 = returnFunc(ctx, obj, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClientInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDynamicClientInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - opts v10.CreateOptions
func (_e *MockDynamicClientInterface_Expecter) Create(ctx interface{}, obj interface{}, opts interface{}) *MockDynamicClientInterface_Create_Call {
	return &MockDynamicClientInterface_Create_Call{Call: _e.mock.On("Create", ctx, obj, opts)}
}

func (_c *MockDynamicClientInterface_Create_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, opts v10.CreateOptions)) *MockDynamicClientInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *unstructured.Unstructured
		if args[1] != nil {
			arg1 = args[1].(*unstructured.Unstructured)
		}
		var arg2 v10.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.CreateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDynamicClientInterface_Create_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClientInterface_Create_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClientInterface_Create_Call) RunAndReturn(run func(ctx context.Context, obj *unstructured.Unstructured, opts v10.CreateOptions) (*unstructured.Unstructured, error)) *MockDynamicClientInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockDynamicClientInterface
func (_mock *MockDynamicClientInterface) Delete(ctx context.Context, name string, opts v10.DeleteOptions) error {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.DeleteOptions) error); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDynamicClientInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDynamicClientInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.DeleteOptions
func (_e *MockDynamicClientInterface_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *MockDynamicClientInterface_Delete_Call {
	return &MockDynamicClientInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *MockDynamicClientInterface_Delete_Call) Run(run func(ctx context.Context, name string, opts v10.DeleteOptions)) *MockDynamicClientInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.DeleteOptions
		if args[2] != nil {
			arg2 = args[2].(v10.DeleteOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDynamicClientInterface_Delete_Call) Return(err error) *MockDynamicClientInterface_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDynamicClientInterface_Delete_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.DeleteOptions) error) *MockDynamicClientInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockDynamicClientInterface
func (_mock *MockDynamicClientInterface) Get(ctx context.Context, name string, opts v10.GetOptions) (*unstructured.Unstructured, error) {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v10.GetOptions) error); ok {
		r1 = returnFunc(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClientInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDynamicClientInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.GetOptions
func (_e *MockDynamicClientInterface_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *MockDynamicClientInterface_Get_Call {
	return &MockDynamicClientInterface_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *MockDynamicClientInterface_Get_Call) Run(run func(ctx context.Context, name string, opts v10.GetOptions)) *MockDynamicClientInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v10.GetOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDynamicClientInterface_Get_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClientInterface_Get_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClientInterface_Get_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.GetOptions) (*unstructured.Unstructured, error)) *MockDynamicClientInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockDynamicClientInterface
func (_mock *MockDynamicClientInterface) Update(ctx context.Context, obj *unstructured.Unstructured, opts v10.UpdateOptions) (*unstructured.Unstructured, error) {
	ret := _mock.Called(ctx, obj, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, obj, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, obj, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, obj, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClientInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDynamicClientInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - opts v10.UpdateOptions
func (_e *MockDynamicClientInterface_Expecter) Update(ctx interface{}, obj interface{}, opts interface{}) *MockDynamicClientInterface_Update_Call {
	return &MockDynamicClientInterface_Update_Call{Call: _e.mock.On("Update", ctx, obj, opts)}
}

func (_c *MockDynamicClientInterface_Update_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, opts v10.UpdateOptions)) *MockDynamicClientInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *unstructured.Unstructured
		if args[1] != nil {
			arg1 = args[1].(*unstructured.Unstructured)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDynamicClientInterface_Update_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClientInterface_Update_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClientInterface_Update_Call) RunAndReturn(run func(ctx context.Context, obj *unstructured.Unstructured, opts v10.UpdateOptions) (*unstructured.Unstructured, error)) *MockDynamicClientInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientFactoryInterface creates a new instance of MockClientFactoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientFactoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientFactoryInterface {
	mock := &MockClientFactoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientFactoryInterface is an autogenerated mock type for the ClientFactoryInterface type
type MockClientFactoryInterface struct {
	mock.Mock
}

type MockClientFactoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientFactoryInterface) EXPECT() *MockClientFactoryInterface_Expecter {
	return &MockClientFactoryInterface_Expecter{mock: &_m.Mock}
}

// CreateAPIExtensionsClient provides a mock function for the type MockClientFactoryInterface
func (_mock *MockClientFactoryInterface) CreateAPIExtensionsClient(config *rest.Config) (APIExtensionsClientInterface, error) {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIExtensionsClient")
	}

	var r0 APIExtensionsClientInterface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*rest.Config) (APIExtensionsClientInterface, error)); ok {
		return returnFunc(config)
	}
	if returnFunc, ok := ret.Get(0).(func(*rest.Config) APIExtensionsClientInterface); ok {
		r0 = returnFunc(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(APIExtensionsClientInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*rest.Config) error); ok {
		r1 = returnFunc(config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientFactoryInterface_CreateAPIExtensionsClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIExtensionsClient'
type MockClientFactoryInterface_CreateAPIExtensionsClient_Call struct {
	*mock.Call
}

// CreateAPIExtensionsClient is a helper method to define mock.On call
//   - config *rest.Config
func (_e *MockClientFactoryInterface_Expecter) CreateAPIExtensionsClient(config interface{}) *MockClientFactoryInterface_CreateAPIExtensionsClient_Call {
	return &MockClientFactoryInterface_CreateAPIExtensionsClient_Call{Call: _e.mock.On("CreateAPIExtensionsClient", config)}
}

func (_c *MockClientFactoryInterface_CreateAPIExtensionsClient_Call) Run(run func(config *rest.Config)) *MockClientFactoryInterface_CreateAPIExtensionsClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *rest.Config
		if args[0] != nil {
			arg0 = args[0].(*rest.Config)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClientFactoryInterface_CreateAPIExtensionsClient_Call) Return(aPIExtensionsClientInterface APIExtensionsClientInterface, err error) *MockClientFactoryInterface_CreateAPIExtensionsClient_Call {
	_c.Call.Return(aPIExtensionsClientInterface, err)
	return _c
}

func (_c *MockClientFactoryInterface_CreateAPIExtensionsClient_Call) RunAndReturn(run func(config *rest.Config) (APIExtensionsClientInterface, error)) *MockClientFactoryInterface_CreateAPIExtensionsClient_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDynamicClient provides a mock function for the type MockClientFactoryInterface
func (_mock *MockClientFactoryInterface) CreateDynamicClient(config *rest.Config, gvr schema.GroupVersionResource) (DynamicClientInterface, error) {
	ret := _mock.Called(config, gvr)

	if len(ret) == 0 {
		panic("no return value specified for CreateDynamicClient")
	}

	var r0 DynamicClientInterface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*rest.Config, schema.GroupVersionResource) (DynamicClientInterface, error)); ok {
		return returnFunc(config, gvr)
	}
	if returnFunc, ok := ret.Get(0).(func(*rest.Config, schema.GroupVersionResource) DynamicClientInterface); ok {
		r0 = returnFunc(config, gvr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DynamicClientInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*rest.Config, schema.GroupVersionResource) error); ok {
		r1 = returnFunc(config, gvr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientFactoryInterface_CreateDynamicClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDynamicClient'
type MockClientFactoryInterface_CreateDynamicClient_Call struct {
	*mock.Call
}

// CreateDynamicClient is a helper method to define mock.On call
//   - config *rest.Config
//   - gvr schema.GroupVersionResource
func (_e *MockClientFactoryInterface_Expecter) CreateDynamicClient(config interface{}, gvr interface{}) *MockClientFactoryInterface_CreateDynamicClient_Call {
	return &MockClientFactoryInterface_CreateDynamicClient_Call{Call: _e.mock.On("CreateDynamicClient", config, gvr)}
}

func (_c *MockClientFactoryInterface_CreateDynamicClient_Call) Run(run func(config *rest.Config, gvr schema.GroupVersionResource)) *MockClientFactoryInterface_CreateDynamicClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *rest.Config
		if args[0] != nil {
			arg0 = args[0].(*rest.Config)
		}
		var arg1 schema.GroupVersionResource
		if args[1] != nil {
			arg1 = args[1].(schema.GroupVersionResource)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClientFactoryInterface_CreateDynamicClient_Call) Return(dynamicClientInterface DynamicClientInterface, err error) *MockClientFactoryInterface_CreateDynamicClient_Call {
	_c.Call.Return(dynamicClientInterface, err)
	return _c
}

func (_c *MockClientFactoryInterface_CreateDynamicClient_Call) RunAndReturn(run func(config *rest.Config, gvr schema.GroupVersionResource) (DynamicClientInterface, error)) *MockClientFactoryInterface_CreateDynamicClient_Call {
	_c.Call.Return(run)
	return _c
}
