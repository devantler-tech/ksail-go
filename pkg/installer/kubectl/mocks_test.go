// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package kubectlinstaller

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// NewMockAPIExtensionsClient creates a new instance of MockAPIExtensionsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIExtensionsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIExtensionsClient {
	mock := &MockAPIExtensionsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAPIExtensionsClient is an autogenerated mock type for the APIExtensionsClient type
type MockAPIExtensionsClient struct {
	mock.Mock
}

type MockAPIExtensionsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIExtensionsClient) EXPECT() *MockAPIExtensionsClient_Expecter {
	return &MockAPIExtensionsClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Create(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.CreateOptions) (*v1.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, crd, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinition, v10.CreateOptions) (*v1.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, crd, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinition, v10.CreateOptions) *v1.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, crd, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CustomResourceDefinition, v10.CreateOptions) error); ok {
		r1 = returnFunc(ctx, crd, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAPIExtensionsClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - crd *v1.CustomResourceDefinition
//   - opts v10.CreateOptions
func (_e *MockAPIExtensionsClient_Expecter) Create(ctx interface{}, crd interface{}, opts interface{}) *MockAPIExtensionsClient_Create_Call {
	return &MockAPIExtensionsClient_Create_Call{Call: _e.mock.On("Create", ctx, crd, opts)}
}

func (_c *MockAPIExtensionsClient_Create_Call) Run(run func(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.CreateOptions)) *MockAPIExtensionsClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CustomResourceDefinition
		if args[1] != nil {
			arg1 = args[1].(*v1.CustomResourceDefinition)
		}
		var arg2 v10.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.CreateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Create_Call) Return(customResourceDefinition *v1.CustomResourceDefinition, err error) *MockAPIExtensionsClient_Create_Call {
	_c.Call.Return(customResourceDefinition, err)
	return _c
}

func (_c *MockAPIExtensionsClient_Create_Call) RunAndReturn(run func(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.CreateOptions) (*v1.CustomResourceDefinition, error)) *MockAPIExtensionsClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Delete(ctx context.Context, name string, opts v10.DeleteOptions) error {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.DeleteOptions) error); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAPIExtensionsClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAPIExtensionsClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.DeleteOptions
func (_e *MockAPIExtensionsClient_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *MockAPIExtensionsClient_Delete_Call {
	return &MockAPIExtensionsClient_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *MockAPIExtensionsClient_Delete_Call) Run(run func(ctx context.Context, name string, opts v10.DeleteOptions)) *MockAPIExtensionsClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.DeleteOptions
		if args[2] != nil {
			arg2 = args[2].(v10.DeleteOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Delete_Call) Return(err error) *MockAPIExtensionsClient_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAPIExtensionsClient_Delete_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.DeleteOptions) error) *MockAPIExtensionsClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Get(ctx context.Context, name string, opts v10.GetOptions) (*v1.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) (*v1.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) *v1.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v10.GetOptions) error); ok {
		r1 = returnFunc(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAPIExtensionsClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.GetOptions
func (_e *MockAPIExtensionsClient_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *MockAPIExtensionsClient_Get_Call {
	return &MockAPIExtensionsClient_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *MockAPIExtensionsClient_Get_Call) Run(run func(ctx context.Context, name string, opts v10.GetOptions)) *MockAPIExtensionsClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v10.GetOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Get_Call) Return(customResourceDefinition *v1.CustomResourceDefinition, err error) *MockAPIExtensionsClient_Get_Call {
	_c.Call.Return(customResourceDefinition, err)
	return _c
}

func (_c *MockAPIExtensionsClient_Get_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.GetOptions) (*v1.CustomResourceDefinition, error)) *MockAPIExtensionsClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAPIExtensionsClient
func (_mock *MockAPIExtensionsClient) Update(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.UpdateOptions) (*v1.CustomResourceDefinition, error) {
	ret := _mock.Called(ctx, crd, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.CustomResourceDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinition, v10.UpdateOptions) (*v1.CustomResourceDefinition, error)); ok {
		return returnFunc(ctx, crd, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CustomResourceDefinition, v10.UpdateOptions) *v1.CustomResourceDefinition); ok {
		r0 = returnFunc(ctx, crd, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CustomResourceDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CustomResourceDefinition, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, crd, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIExtensionsClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAPIExtensionsClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - crd *v1.CustomResourceDefinition
//   - opts v10.UpdateOptions
func (_e *MockAPIExtensionsClient_Expecter) Update(ctx interface{}, crd interface{}, opts interface{}) *MockAPIExtensionsClient_Update_Call {
	return &MockAPIExtensionsClient_Update_Call{Call: _e.mock.On("Update", ctx, crd, opts)}
}

func (_c *MockAPIExtensionsClient_Update_Call) Run(run func(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.UpdateOptions)) *MockAPIExtensionsClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CustomResourceDefinition
		if args[1] != nil {
			arg1 = args[1].(*v1.CustomResourceDefinition)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIExtensionsClient_Update_Call) Return(customResourceDefinition *v1.CustomResourceDefinition, err error) *MockAPIExtensionsClient_Update_Call {
	_c.Call.Return(customResourceDefinition, err)
	return _c
}

func (_c *MockAPIExtensionsClient_Update_Call) RunAndReturn(run func(ctx context.Context, crd *v1.CustomResourceDefinition, opts v10.UpdateOptions) (*v1.CustomResourceDefinition, error)) *MockAPIExtensionsClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDynamicClient creates a new instance of MockDynamicClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDynamicClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDynamicClient {
	mock := &MockDynamicClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDynamicClient is an autogenerated mock type for the DynamicClient type
type MockDynamicClient struct {
	mock.Mock
}

type MockDynamicClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamicClient) EXPECT() *MockDynamicClient_Expecter {
	return &MockDynamicClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Create(ctx context.Context, obj *unstructured.Unstructured, opts v10.CreateOptions) (*unstructured.Unstructured, error) {
	ret := _mock.Called(ctx, obj, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.CreateOptions) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, obj, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.CreateOptions) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, obj, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v10.CreateOptions) error); ok {
		r1 = returnFunc(ctx, obj, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDynamicClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - opts v10.CreateOptions
func (_e *MockDynamicClient_Expecter) Create(ctx interface{}, obj interface{}, opts interface{}) *MockDynamicClient_Create_Call {
	return &MockDynamicClient_Create_Call{Call: _e.mock.On("Create", ctx, obj, opts)}
}

func (_c *MockDynamicClient_Create_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, opts v10.CreateOptions)) *MockDynamicClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *unstructured.Unstructured
		if args[1] != nil {
			arg1 = args[1].(*unstructured.Unstructured)
		}
		var arg2 v10.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.CreateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Create_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClient_Create_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClient_Create_Call) RunAndReturn(run func(ctx context.Context, obj *unstructured.Unstructured, opts v10.CreateOptions) (*unstructured.Unstructured, error)) *MockDynamicClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Delete(ctx context.Context, name string, opts v10.DeleteOptions) error {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.DeleteOptions) error); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDynamicClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDynamicClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.DeleteOptions
func (_e *MockDynamicClient_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *MockDynamicClient_Delete_Call {
	return &MockDynamicClient_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *MockDynamicClient_Delete_Call) Run(run func(ctx context.Context, name string, opts v10.DeleteOptions)) *MockDynamicClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.DeleteOptions
		if args[2] != nil {
			arg2 = args[2].(v10.DeleteOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Delete_Call) Return(err error) *MockDynamicClient_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDynamicClient_Delete_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.DeleteOptions) error) *MockDynamicClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Get(ctx context.Context, name string, opts v10.GetOptions) (*unstructured.Unstructured, error) {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v10.GetOptions) error); ok {
		r1 = returnFunc(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDynamicClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.GetOptions
func (_e *MockDynamicClient_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *MockDynamicClient_Get_Call {
	return &MockDynamicClient_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *MockDynamicClient_Get_Call) Run(run func(ctx context.Context, name string, opts v10.GetOptions)) *MockDynamicClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v10.GetOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Get_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClient_Get_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClient_Get_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.GetOptions) (*unstructured.Unstructured, error)) *MockDynamicClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockDynamicClient
func (_mock *MockDynamicClient) Update(ctx context.Context, obj *unstructured.Unstructured, opts v10.UpdateOptions) (*unstructured.Unstructured, error) {
	ret := _mock.Called(ctx, obj, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions) (*unstructured.Unstructured, error)); ok {
		return returnFunc(ctx, obj, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions) *unstructured.Unstructured); ok {
		r0 = returnFunc(ctx, obj, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, obj, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamicClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDynamicClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - opts v10.UpdateOptions
func (_e *MockDynamicClient_Expecter) Update(ctx interface{}, obj interface{}, opts interface{}) *MockDynamicClient_Update_Call {
	return &MockDynamicClient_Update_Call{Call: _e.mock.On("Update", ctx, obj, opts)}
}

func (_c *MockDynamicClient_Update_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, opts v10.UpdateOptions)) *MockDynamicClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *unstructured.Unstructured
		if args[1] != nil {
			arg1 = args[1].(*unstructured.Unstructured)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDynamicClient_Update_Call) Return(unstructured1 *unstructured.Unstructured, err error) *MockDynamicClient_Update_Call {
	_c.Call.Return(unstructured1, err)
	return _c
}

func (_c *MockDynamicClient_Update_Call) RunAndReturn(run func(ctx context.Context, obj *unstructured.Unstructured, opts v10.UpdateOptions) (*unstructured.Unstructured, error)) *MockDynamicClient_Update_Call {
	_c.Call.Return(run)
	return _c
}
