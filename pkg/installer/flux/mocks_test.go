// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package fluxinstaller

import (
	"context"

	"github.com/mittwald/go-helm-client"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHelmClient creates a new instance of MockHelmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHelmClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHelmClient {
	mock := &MockHelmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHelmClient is an autogenerated mock type for the HelmClient type
type MockHelmClient struct {
	mock.Mock
}

type MockHelmClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHelmClient) EXPECT() *MockHelmClient_Expecter {
	return &MockHelmClient_Expecter{mock: &_m.Mock}
}

// Install provides a mock function for the type MockHelmClient
func (_mock *MockHelmClient) Install(ctx context.Context, spec *helmclient.ChartSpec) error {
	ret := _mock.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *helmclient.ChartSpec) error); ok {
		r0 = returnFunc(ctx, spec)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHelmClient_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type MockHelmClient_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - ctx context.Context
//   - spec *helmclient.ChartSpec
func (_e *MockHelmClient_Expecter) Install(ctx interface{}, spec interface{}) *MockHelmClient_Install_Call {
	return &MockHelmClient_Install_Call{Call: _e.mock.On("Install", ctx, spec)}
}

func (_c *MockHelmClient_Install_Call) Run(run func(ctx context.Context, spec *helmclient.ChartSpec)) *MockHelmClient_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *helmclient.ChartSpec
		if args[1] != nil {
			arg1 = args[1].(*helmclient.ChartSpec)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHelmClient_Install_Call) Return(err error) *MockHelmClient_Install_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHelmClient_Install_Call) RunAndReturn(run func(ctx context.Context, spec *helmclient.ChartSpec) error) *MockHelmClient_Install_Call {
	_c.Call.Return(run)
	return _c
}

// Uninstall provides a mock function for the type MockHelmClient
func (_mock *MockHelmClient) Uninstall(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Uninstall")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHelmClient_Uninstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uninstall'
type MockHelmClient_Uninstall_Call struct {
	*mock.Call
}

// Uninstall is a helper method to define mock.On call
//   - name string
func (_e *MockHelmClient_Expecter) Uninstall(name interface{}) *MockHelmClient_Uninstall_Call {
	return &MockHelmClient_Uninstall_Call{Call: _e.mock.On("Uninstall", name)}
}

func (_c *MockHelmClient_Uninstall_Call) Run(run func(name string)) *MockHelmClient_Uninstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHelmClient_Uninstall_Call) Return(err error) *MockHelmClient_Uninstall_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHelmClient_Uninstall_Call) RunAndReturn(run func(name string) error) *MockHelmClient_Uninstall_Call {
	_c.Call.Return(run)
	return _c
}
