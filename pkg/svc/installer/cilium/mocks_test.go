// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ciliuminstaller

import (
	"context"

	"github.com/devantler-tech/ksail-go/pkg/client/helm"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHelmClient creates a new instance of MockHelmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHelmClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHelmClient {
	mock := &MockHelmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHelmClient is an autogenerated mock type for the HelmClient type
type MockHelmClient struct {
	mock.Mock
}

type MockHelmClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHelmClient) EXPECT() *MockHelmClient_Expecter {
	return &MockHelmClient_Expecter{mock: &_m.Mock}
}

// InstallOrUpgradeChart provides a mock function for the type MockHelmClient
func (_mock *MockHelmClient) InstallOrUpgradeChart(ctx context.Context, spec *helm.ChartSpec) (*helm.ReleaseInfo, error) {
	ret := _mock.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for InstallOrUpgradeChart")
	}

	var r0 *helm.ReleaseInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *helm.ChartSpec) (*helm.ReleaseInfo, error)); ok {
		return returnFunc(ctx, spec)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *helm.ChartSpec) *helm.ReleaseInfo); ok {
		r0 = returnFunc(ctx, spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helm.ReleaseInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *helm.ChartSpec) error); ok {
		r1 = returnFunc(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHelmClient_InstallOrUpgradeChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallOrUpgradeChart'
type MockHelmClient_InstallOrUpgradeChart_Call struct {
	*mock.Call
}

// InstallOrUpgradeChart is a helper method to define mock.On call
//   - ctx context.Context
//   - spec *helm.ChartSpec
func (_e *MockHelmClient_Expecter) InstallOrUpgradeChart(ctx interface{}, spec interface{}) *MockHelmClient_InstallOrUpgradeChart_Call {
	return &MockHelmClient_InstallOrUpgradeChart_Call{Call: _e.mock.On("InstallOrUpgradeChart", ctx, spec)}
}

func (_c *MockHelmClient_InstallOrUpgradeChart_Call) Run(run func(ctx context.Context, spec *helm.ChartSpec)) *MockHelmClient_InstallOrUpgradeChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *helm.ChartSpec
		if args[1] != nil {
			arg1 = args[1].(*helm.ChartSpec)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHelmClient_InstallOrUpgradeChart_Call) Return(releaseInfo *helm.ReleaseInfo, err error) *MockHelmClient_InstallOrUpgradeChart_Call {
	_c.Call.Return(releaseInfo, err)
	return _c
}

func (_c *MockHelmClient_InstallOrUpgradeChart_Call) RunAndReturn(run func(ctx context.Context, spec *helm.ChartSpec) (*helm.ReleaseInfo, error)) *MockHelmClient_InstallOrUpgradeChart_Call {
	_c.Call.Return(run)
	return _c
}

// UninstallRelease provides a mock function for the type MockHelmClient
func (_mock *MockHelmClient) UninstallRelease(ctx context.Context, releaseName string, namespace string) error {
	ret := _mock.Called(ctx, releaseName, namespace)

	if len(ret) == 0 {
		panic("no return value specified for UninstallRelease")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, releaseName, namespace)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHelmClient_UninstallRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UninstallRelease'
type MockHelmClient_UninstallRelease_Call struct {
	*mock.Call
}

// UninstallRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - releaseName string
//   - namespace string
func (_e *MockHelmClient_Expecter) UninstallRelease(ctx interface{}, releaseName interface{}, namespace interface{}) *MockHelmClient_UninstallRelease_Call {
	return &MockHelmClient_UninstallRelease_Call{Call: _e.mock.On("UninstallRelease", ctx, releaseName, namespace)}
}

func (_c *MockHelmClient_UninstallRelease_Call) Run(run func(ctx context.Context, releaseName string, namespace string)) *MockHelmClient_UninstallRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHelmClient_UninstallRelease_Call) Return(err error) *MockHelmClient_UninstallRelease_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHelmClient_UninstallRelease_Call) RunAndReturn(run func(ctx context.Context, releaseName string, namespace string) error) *MockHelmClient_UninstallRelease_Call {
	_c.Call.Return(run)
	return _c
}
