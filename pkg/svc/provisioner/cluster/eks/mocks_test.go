// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package eksprovisioner

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockEksctlExecutor creates a new instance of MockEksctlExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEksctlExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEksctlExecutor {
	mock := &MockEksctlExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEksctlExecutor is an autogenerated mock type for the EksctlExecutor type
type MockEksctlExecutor struct {
	mock.Mock
}

type MockEksctlExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEksctlExecutor) EXPECT() *MockEksctlExecutor_Expecter {
	return &MockEksctlExecutor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockEksctlExecutor
func (_mock *MockEksctlExecutor) Execute(ctx context.Context, args []string) (string, error) {
	ret := _mock.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) (string, error)); ok {
		return returnFunc(ctx, args)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) string); ok {
		r0 = returnFunc(ctx, args)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, args)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEksctlExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockEksctlExecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - args []string
func (_e *MockEksctlExecutor_Expecter) Execute(ctx interface{}, args interface{}) *MockEksctlExecutor_Execute_Call {
	return &MockEksctlExecutor_Execute_Call{Call: _e.mock.On("Execute", ctx, args)}
}

func (_c *MockEksctlExecutor_Execute_Call) Run(run func(ctx context.Context, args []string)) *MockEksctlExecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEksctlExecutor_Execute_Call) Return(s string, err error) *MockEksctlExecutor_Execute_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEksctlExecutor_Execute_Call) RunAndReturn(run func(ctx context.Context, args []string) (string, error)) *MockEksctlExecutor_Execute_Call {
	_c.Call.Return(run)
	return _c
}
