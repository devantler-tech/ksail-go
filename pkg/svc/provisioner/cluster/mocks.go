// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package clusterprovisioner

import (
	"context"

	"github.com/devantler-tech/ksail-go/pkg/apis/cluster/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFactory creates a new instance of MockFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFactory {
	mock := &MockFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFactory is an autogenerated mock type for the Factory type
type MockFactory struct {
	mock.Mock
}

type MockFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFactory) EXPECT() *MockFactory_Expecter {
	return &MockFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockFactory
func (_mock *MockFactory) Create(ctx context.Context, cluster *v1alpha1.Cluster) (ClusterProvisioner, any, error) {
	ret := _mock.Called(ctx, cluster)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 ClusterProvisioner
	var r1 any
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1alpha1.Cluster) (ClusterProvisioner, any, error)); ok {
		return returnFunc(ctx, cluster)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1alpha1.Cluster) ClusterProvisioner); ok {
		r0 = returnFunc(ctx, cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ClusterProvisioner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1alpha1.Cluster) any); ok {
		r1 = returnFunc(ctx, cluster)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(any)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *v1alpha1.Cluster) error); ok {
		r2 = returnFunc(ctx, cluster)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - cluster *v1alpha1.Cluster
func (_e *MockFactory_Expecter) Create(ctx interface{}, cluster interface{}) *MockFactory_Create_Call {
	return &MockFactory_Create_Call{Call: _e.mock.On("Create", ctx, cluster)}
}

func (_c *MockFactory_Create_Call) Run(run func(ctx context.Context, cluster *v1alpha1.Cluster)) *MockFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1alpha1.Cluster
		if args[1] != nil {
			arg1 = args[1].(*v1alpha1.Cluster)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFactory_Create_Call) Return(clusterProvisioner ClusterProvisioner, v any, err error) *MockFactory_Create_Call {
	_c.Call.Return(clusterProvisioner, v, err)
	return _c
}

func (_c *MockFactory_Create_Call) RunAndReturn(run func(ctx context.Context, cluster *v1alpha1.Cluster) (ClusterProvisioner, any, error)) *MockFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterProvisioner creates a new instance of MockClusterProvisioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterProvisioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterProvisioner {
	mock := &MockClusterProvisioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClusterProvisioner is an autogenerated mock type for the ClusterProvisioner type
type MockClusterProvisioner struct {
	mock.Mock
}

type MockClusterProvisioner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterProvisioner) EXPECT() *MockClusterProvisioner_Expecter {
	return &MockClusterProvisioner_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Create(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockClusterProvisioner_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClusterProvisioner_Expecter) Create(ctx interface{}, name interface{}) *MockClusterProvisioner_Create_Call {
	return &MockClusterProvisioner_Create_Call{Call: _e.mock.On("Create", ctx, name)}
}

func (_c *MockClusterProvisioner_Create_Call) Run(run func(ctx context.Context, name string)) *MockClusterProvisioner_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Create_Call) Return(err error) *MockClusterProvisioner_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Create_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockClusterProvisioner_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Delete(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockClusterProvisioner_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClusterProvisioner_Expecter) Delete(ctx interface{}, name interface{}) *MockClusterProvisioner_Delete_Call {
	return &MockClusterProvisioner_Delete_Call{Call: _e.mock.On("Delete", ctx, name)}
}

func (_c *MockClusterProvisioner_Delete_Call) Run(run func(ctx context.Context, name string)) *MockClusterProvisioner_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Delete_Call) Return(err error) *MockClusterProvisioner_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Delete_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockClusterProvisioner_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Exists(ctx context.Context, name string) (bool, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClusterProvisioner_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockClusterProvisioner_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClusterProvisioner_Expecter) Exists(ctx interface{}, name interface{}) *MockClusterProvisioner_Exists_Call {
	return &MockClusterProvisioner_Exists_Call{Call: _e.mock.On("Exists", ctx, name)}
}

func (_c *MockClusterProvisioner_Exists_Call) Run(run func(ctx context.Context, name string)) *MockClusterProvisioner_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Exists_Call) Return(b bool, err error) *MockClusterProvisioner_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockClusterProvisioner_Exists_Call) RunAndReturn(run func(ctx context.Context, name string) (bool, error)) *MockClusterProvisioner_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) List(ctx context.Context) ([]string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClusterProvisioner_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockClusterProvisioner_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterProvisioner_Expecter) List(ctx interface{}) *MockClusterProvisioner_List_Call {
	return &MockClusterProvisioner_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockClusterProvisioner_List_Call) Run(run func(ctx context.Context)) *MockClusterProvisioner_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_List_Call) Return(strings []string, err error) *MockClusterProvisioner_List_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockClusterProvisioner_List_Call) RunAndReturn(run func(ctx context.Context) ([]string, error)) *MockClusterProvisioner_List_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Start(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockClusterProvisioner_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClusterProvisioner_Expecter) Start(ctx interface{}, name interface{}) *MockClusterProvisioner_Start_Call {
	return &MockClusterProvisioner_Start_Call{Call: _e.mock.On("Start", ctx, name)}
}

func (_c *MockClusterProvisioner_Start_Call) Run(run func(ctx context.Context, name string)) *MockClusterProvisioner_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Start_Call) Return(err error) *MockClusterProvisioner_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Start_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockClusterProvisioner_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockClusterProvisioner
func (_mock *MockClusterProvisioner) Stop(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClusterProvisioner_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockClusterProvisioner_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClusterProvisioner_Expecter) Stop(ctx interface{}, name interface{}) *MockClusterProvisioner_Stop_Call {
	return &MockClusterProvisioner_Stop_Call{Call: _e.mock.On("Stop", ctx, name)}
}

func (_c *MockClusterProvisioner_Stop_Call) Run(run func(ctx context.Context, name string)) *MockClusterProvisioner_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClusterProvisioner_Stop_Call) Return(err error) *MockClusterProvisioner_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClusterProvisioner_Stop_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockClusterProvisioner_Stop_Call {
	_c.Call.Return(run)
	return _c
}
