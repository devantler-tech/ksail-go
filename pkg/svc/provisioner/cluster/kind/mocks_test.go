// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package kindprovisioner

import (
	"context"

	"github.com/spf13/cobra"
	mock "github.com/stretchr/testify/mock"
	"sigs.k8s.io/kind/pkg/cluster"
)

// NewMockKindCommandRunner creates a new instance of MockKindCommandRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKindCommandRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKindCommandRunner {
	mock := &MockKindCommandRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKindCommandRunner is an autogenerated mock type for the KindCommandRunner type
type MockKindCommandRunner struct {
	mock.Mock
}

type MockKindCommandRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKindCommandRunner) EXPECT() *MockKindCommandRunner_Expecter {
	return &MockKindCommandRunner_Expecter{mock: &_m.Mock}
}

// Run provides a mock function for the type MockKindCommandRunner
func (_mock *MockKindCommandRunner) Run(ctx context.Context, cmd *cobra.Command, args []string) (string, string, error) {
	ret := _mock.Called(ctx, cmd, args)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cobra.Command, []string) (string, string, error)); ok {
		return returnFunc(ctx, cmd, args)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cobra.Command, []string) string); ok {
		r0 = returnFunc(ctx, cmd, args)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cobra.Command, []string) string); ok {
		r1 = returnFunc(ctx, cmd, args)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *cobra.Command, []string) error); ok {
		r2 = returnFunc(ctx, cmd, args)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockKindCommandRunner_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockKindCommandRunner_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd *cobra.Command
//   - args []string
func (_e *MockKindCommandRunner_Expecter) Run(ctx interface{}, cmd interface{}, args interface{}) *MockKindCommandRunner_Run_Call {
	return &MockKindCommandRunner_Run_Call{Call: _e.mock.On("Run", ctx, cmd, args)}
}

func (_c *MockKindCommandRunner_Run_Call) Run(run func(ctx context.Context, cmd *cobra.Command, args []string)) *MockKindCommandRunner_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cobra.Command
		if args[1] != nil {
			arg1 = args[1].(*cobra.Command)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockKindCommandRunner_Run_Call) Return(stdout string, stderr string, err error) *MockKindCommandRunner_Run_Call {
	_c.Call.Return(stdout, stderr, err)
	return _c
}

func (_c *MockKindCommandRunner_Run_Call) RunAndReturn(run func(ctx context.Context, cmd *cobra.Command, args []string) (string, string, error)) *MockKindCommandRunner_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKindProvider creates a new instance of MockKindProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKindProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKindProvider {
	mock := &MockKindProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKindProvider is an autogenerated mock type for the KindProvider type
type MockKindProvider struct {
	mock.Mock
}

type MockKindProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKindProvider) EXPECT() *MockKindProvider_Expecter {
	return &MockKindProvider_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockKindProvider
func (_mock *MockKindProvider) Create(name string, opts ...cluster.CreateOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(name, opts)
	} else {
		tmpRet = _mock.Called(name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, ...cluster.CreateOption) error); ok {
		r0 = returnFunc(name, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockKindProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockKindProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
//   - opts ...cluster.CreateOption
func (_e *MockKindProvider_Expecter) Create(name interface{}, opts ...interface{}) *MockKindProvider_Create_Call {
	return &MockKindProvider_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{name}, opts...)...)}
}

func (_c *MockKindProvider_Create_Call) Run(run func(name string, opts ...cluster.CreateOption)) *MockKindProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []cluster.CreateOption
		var variadicArgs []cluster.CreateOption
		if len(args) > 1 {
			variadicArgs = args[1].([]cluster.CreateOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockKindProvider_Create_Call) Return(err error) *MockKindProvider_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockKindProvider_Create_Call) RunAndReturn(run func(name string, opts ...cluster.CreateOption) error) *MockKindProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockKindProvider
func (_mock *MockKindProvider) Delete(name string, kubeconfigPath string) error {
	ret := _mock.Called(name, kubeconfigPath)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(name, kubeconfigPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockKindProvider_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockKindProvider_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
//   - kubeconfigPath string
func (_e *MockKindProvider_Expecter) Delete(name interface{}, kubeconfigPath interface{}) *MockKindProvider_Delete_Call {
	return &MockKindProvider_Delete_Call{Call: _e.mock.On("Delete", name, kubeconfigPath)}
}

func (_c *MockKindProvider_Delete_Call) Run(run func(name string, kubeconfigPath string)) *MockKindProvider_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKindProvider_Delete_Call) Return(err error) *MockKindProvider_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockKindProvider_Delete_Call) RunAndReturn(run func(name string, kubeconfigPath string) error) *MockKindProvider_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockKindProvider
func (_mock *MockKindProvider) List() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKindProvider_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockKindProvider_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockKindProvider_Expecter) List() *MockKindProvider_List_Call {
	return &MockKindProvider_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockKindProvider_List_Call) Run(run func()) *MockKindProvider_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKindProvider_List_Call) Return(strings []string, err error) *MockKindProvider_List_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockKindProvider_List_Call) RunAndReturn(run func() ([]string, error)) *MockKindProvider_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function for the type MockKindProvider
func (_mock *MockKindProvider) ListNodes(name string) ([]string, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKindProvider_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockKindProvider_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
//   - name string
func (_e *MockKindProvider_Expecter) ListNodes(name interface{}) *MockKindProvider_ListNodes_Call {
	return &MockKindProvider_ListNodes_Call{Call: _e.mock.On("ListNodes", name)}
}

func (_c *MockKindProvider_ListNodes_Call) Run(run func(name string)) *MockKindProvider_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockKindProvider_ListNodes_Call) Return(strings []string, err error) *MockKindProvider_ListNodes_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockKindProvider_ListNodes_Call) RunAndReturn(run func(name string) ([]string, error)) *MockKindProvider_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}
