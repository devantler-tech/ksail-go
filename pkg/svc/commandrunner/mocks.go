// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package commandrunner

import (
	"context"

	"github.com/spf13/cobra"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCommandRunner creates a new instance of MockCommandRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandRunner {
	mock := &MockCommandRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommandRunner is an autogenerated mock type for the CommandRunner type
type MockCommandRunner struct {
	mock.Mock
}

type MockCommandRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommandRunner) EXPECT() *MockCommandRunner_Expecter {
	return &MockCommandRunner_Expecter{mock: &_m.Mock}
}

// Run provides a mock function for the type MockCommandRunner
func (_mock *MockCommandRunner) Run(ctx context.Context, cmd *cobra.Command, args []string) (CommandResult, error) {
	ret := _mock.Called(ctx, cmd, args)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 CommandResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cobra.Command, []string) (CommandResult, error)); ok {
		return returnFunc(ctx, cmd, args)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cobra.Command, []string) CommandResult); ok {
		r0 = returnFunc(ctx, cmd, args)
	} else {
		r0 = ret.Get(0).(CommandResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cobra.Command, []string) error); ok {
		r1 = returnFunc(ctx, cmd, args)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommandRunner_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockCommandRunner_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd *cobra.Command
//   - args []string
func (_e *MockCommandRunner_Expecter) Run(ctx interface{}, cmd interface{}, args interface{}) *MockCommandRunner_Run_Call {
	return &MockCommandRunner_Run_Call{Call: _e.mock.On("Run", ctx, cmd, args)}
}

func (_c *MockCommandRunner_Run_Call) Run(run func(ctx context.Context, cmd *cobra.Command, args []string)) *MockCommandRunner_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cobra.Command
		if args[1] != nil {
			arg1 = args[1].(*cobra.Command)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCommandRunner_Run_Call) Return(commandResult CommandResult, err error) *MockCommandRunner_Run_Call {
	_c.Call.Return(commandResult, err)
	return _c
}

func (_c *MockCommandRunner_Run_Call) RunAndReturn(run func(ctx context.Context, cmd *cobra.Command, args []string) (CommandResult, error)) *MockCommandRunner_Run_Call {
	_c.Call.Return(run)
	return _c
}
