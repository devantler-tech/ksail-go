// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ksail

import (
	"github.com/spf13/viper"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigManager creates a new instance of MockConfigManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigManager[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigManager[T] {
	mock := &MockConfigManager[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigManager is an autogenerated mock type for the ConfigManager type
type MockConfigManager[T any] struct {
	mock.Mock
}

type MockConfigManager_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockConfigManager[T]) EXPECT() *MockConfigManager_Expecter[T] {
	return &MockConfigManager_Expecter[T]{mock: &_m.Mock}
}

// GetViper provides a mock function for the type MockConfigManager
func (_mock *MockConfigManager[T]) GetViper() *viper.Viper {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetViper")
	}

	var r0 *viper.Viper
	if returnFunc, ok := ret.Get(0).(func() *viper.Viper); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*viper.Viper)
		}
	}
	return r0
}

// MockConfigManager_GetViper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViper'
type MockConfigManager_GetViper_Call[T any] struct {
	*mock.Call
}

// GetViper is a helper method to define mock.On call
func (_e *MockConfigManager_Expecter[T]) GetViper() *MockConfigManager_GetViper_Call[T] {
	return &MockConfigManager_GetViper_Call[T]{Call: _e.mock.On("GetViper")}
}

func (_c *MockConfigManager_GetViper_Call[T]) Run(run func()) *MockConfigManager_GetViper_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigManager_GetViper_Call[T]) Return(viper1 *viper.Viper) *MockConfigManager_GetViper_Call[T] {
	_c.Call.Return(viper1)
	return _c
}

func (_c *MockConfigManager_GetViper_Call[T]) RunAndReturn(run func() *viper.Viper) *MockConfigManager_GetViper_Call[T] {
	_c.Call.Return(run)
	return _c
}

// LoadConfig provides a mock function for the type MockConfigManager
func (_mock *MockConfigManager[T]) LoadConfig() (*T, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 *T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*T, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigManager_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type MockConfigManager_LoadConfig_Call[T any] struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
func (_e *MockConfigManager_Expecter[T]) LoadConfig() *MockConfigManager_LoadConfig_Call[T] {
	return &MockConfigManager_LoadConfig_Call[T]{Call: _e.mock.On("LoadConfig")}
}

func (_c *MockConfigManager_LoadConfig_Call[T]) Run(run func()) *MockConfigManager_LoadConfig_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigManager_LoadConfig_Call[T]) Return(v *T, err error) *MockConfigManager_LoadConfig_Call[T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockConfigManager_LoadConfig_Call[T]) RunAndReturn(run func() (*T, error)) *MockConfigManager_LoadConfig_Call[T] {
	_c.Call.Return(run)
	return _c
}
