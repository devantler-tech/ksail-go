// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package config

import (
	"github.com/devantler-tech/ksail-go/pkg/apis/cluster/v1alpha1"
	"github.com/spf13/viper"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigManager creates a new instance of MockConfigManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigManager {
	mock := &MockConfigManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigManager is an autogenerated mock type for the ConfigManager type
type MockConfigManager struct {
	mock.Mock
}

type MockConfigManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigManager) EXPECT() *MockConfigManager_Expecter {
	return &MockConfigManager_Expecter{mock: &_m.Mock}
}

// GetCluster provides a mock function for the type MockConfigManager
func (_mock *MockConfigManager) GetCluster() *v1alpha1.Cluster {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *v1alpha1.Cluster
	if returnFunc, ok := ret.Get(0).(func() *v1alpha1.Cluster); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Cluster)
		}
	}
	return r0
}

// MockConfigManager_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type MockConfigManager_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
func (_e *MockConfigManager_Expecter) GetCluster() *MockConfigManager_GetCluster_Call {
	return &MockConfigManager_GetCluster_Call{Call: _e.mock.On("GetCluster")}
}

func (_c *MockConfigManager_GetCluster_Call) Run(run func()) *MockConfigManager_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigManager_GetCluster_Call) Return(cluster *v1alpha1.Cluster) *MockConfigManager_GetCluster_Call {
	_c.Call.Return(cluster)
	return _c
}

func (_c *MockConfigManager_GetCluster_Call) RunAndReturn(run func() *v1alpha1.Cluster) *MockConfigManager_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetViper provides a mock function for the type MockConfigManager
func (_mock *MockConfigManager) GetViper() *viper.Viper {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetViper")
	}

	var r0 *viper.Viper
	if returnFunc, ok := ret.Get(0).(func() *viper.Viper); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*viper.Viper)
		}
	}
	return r0
}

// MockConfigManager_GetViper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViper'
type MockConfigManager_GetViper_Call struct {
	*mock.Call
}

// GetViper is a helper method to define mock.On call
func (_e *MockConfigManager_Expecter) GetViper() *MockConfigManager_GetViper_Call {
	return &MockConfigManager_GetViper_Call{Call: _e.mock.On("GetViper")}
}

func (_c *MockConfigManager_GetViper_Call) Run(run func()) *MockConfigManager_GetViper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigManager_GetViper_Call) Return(viper1 *viper.Viper) *MockConfigManager_GetViper_Call {
	_c.Call.Return(viper1)
	return _c
}

func (_c *MockConfigManager_GetViper_Call) RunAndReturn(run func() *viper.Viper) *MockConfigManager_GetViper_Call {
	_c.Call.Return(run)
	return _c
}

// LoadCluster provides a mock function for the type MockConfigManager
func (_mock *MockConfigManager) LoadCluster() (*v1alpha1.Cluster, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadCluster")
	}

	var r0 *v1alpha1.Cluster
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*v1alpha1.Cluster, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *v1alpha1.Cluster); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Cluster)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigManager_LoadCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadCluster'
type MockConfigManager_LoadCluster_Call struct {
	*mock.Call
}

// LoadCluster is a helper method to define mock.On call
func (_e *MockConfigManager_Expecter) LoadCluster() *MockConfigManager_LoadCluster_Call {
	return &MockConfigManager_LoadCluster_Call{Call: _e.mock.On("LoadCluster")}
}

func (_c *MockConfigManager_LoadCluster_Call) Run(run func()) *MockConfigManager_LoadCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigManager_LoadCluster_Call) Return(cluster *v1alpha1.Cluster, err error) *MockConfigManager_LoadCluster_Call {
	_c.Call.Return(cluster, err)
	return _c
}

func (_c *MockConfigManager_LoadCluster_Call) RunAndReturn(run func() (*v1alpha1.Cluster, error)) *MockConfigManager_LoadCluster_Call {
	_c.Call.Return(run)
	return _c
}
