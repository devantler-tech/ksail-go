// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package quiet

import (
	"os"

	mock "github.com/stretchr/testify/mock"
)

// NewMockFileOpener creates a new instance of MockFileOpener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileOpener(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileOpener {
	mock := &MockFileOpener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileOpener is an autogenerated mock type for the FileOpener type
type MockFileOpener struct {
	mock.Mock
}

type MockFileOpener_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileOpener) EXPECT() *MockFileOpener_Expecter {
	return &MockFileOpener_Expecter{mock: &_m.Mock}
}

// Open provides a mock function for the type MockFileOpener
func (_mock *MockFileOpener) Open(name string) (*os.File, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *os.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileOpener_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockFileOpener_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - name string
func (_e *MockFileOpener_Expecter) Open(name interface{}) *MockFileOpener_Open_Call {
	return &MockFileOpener_Open_Call{Call: _e.mock.On("Open", name)}
}

func (_c *MockFileOpener_Open_Call) Run(run func(name string)) *MockFileOpener_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileOpener_Open_Call) Return(file *os.File, err error) *MockFileOpener_Open_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockFileOpener_Open_Call) RunAndReturn(run func(name string) (*os.File, error)) *MockFileOpener_Open_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStdoutManager creates a new instance of MockStdoutManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStdoutManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStdoutManager {
	mock := &MockStdoutManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStdoutManager is an autogenerated mock type for the StdoutManager type
type MockStdoutManager struct {
	mock.Mock
}

type MockStdoutManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStdoutManager) EXPECT() *MockStdoutManager_Expecter {
	return &MockStdoutManager_Expecter{mock: &_m.Mock}
}

// GetStdout provides a mock function for the type MockStdoutManager
func (_mock *MockStdoutManager) GetStdout() *os.File {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStdout")
	}

	var r0 *os.File
	if returnFunc, ok := ret.Get(0).(func() *os.File); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}
	return r0
}

// MockStdoutManager_GetStdout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStdout'
type MockStdoutManager_GetStdout_Call struct {
	*mock.Call
}

// GetStdout is a helper method to define mock.On call
func (_e *MockStdoutManager_Expecter) GetStdout() *MockStdoutManager_GetStdout_Call {
	return &MockStdoutManager_GetStdout_Call{Call: _e.mock.On("GetStdout")}
}

func (_c *MockStdoutManager_GetStdout_Call) Run(run func()) *MockStdoutManager_GetStdout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStdoutManager_GetStdout_Call) Return(file *os.File) *MockStdoutManager_GetStdout_Call {
	_c.Call.Return(file)
	return _c
}

func (_c *MockStdoutManager_GetStdout_Call) RunAndReturn(run func() *os.File) *MockStdoutManager_GetStdout_Call {
	_c.Call.Return(run)
	return _c
}

// SetStdout provides a mock function for the type MockStdoutManager
func (_mock *MockStdoutManager) SetStdout(file *os.File) {
	_mock.Called(file)
	return
}

// MockStdoutManager_SetStdout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStdout'
type MockStdoutManager_SetStdout_Call struct {
	*mock.Call
}

// SetStdout is a helper method to define mock.On call
//   - file *os.File
func (_e *MockStdoutManager_Expecter) SetStdout(file interface{}) *MockStdoutManager_SetStdout_Call {
	return &MockStdoutManager_SetStdout_Call{Call: _e.mock.On("SetStdout", file)}
}

func (_c *MockStdoutManager_SetStdout_Call) Run(run func(file *os.File)) *MockStdoutManager_SetStdout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *os.File
		if args[0] != nil {
			arg0 = args[0].(*os.File)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStdoutManager_SetStdout_Call) Return() *MockStdoutManager_SetStdout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStdoutManager_SetStdout_Call) RunAndReturn(run func(file *os.File)) *MockStdoutManager_SetStdout_Call {
	_c.Run(run)
	return _c
}
