// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package testutils

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockMarshallerInterface creates a new instance of MockMarshallerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMarshallerInterface[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMarshallerInterface[T] {
	mock := &MockMarshallerInterface[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMarshallerInterface is an autogenerated mock type for the MarshallerInterface type
type MockMarshallerInterface[T any] struct {
	mock.Mock
}

type MockMarshallerInterface_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockMarshallerInterface[T]) EXPECT() *MockMarshallerInterface_Expecter[T] {
	return &MockMarshallerInterface_Expecter[T]{mock: &_m.Mock}
}

// Marshal provides a mock function for the type MockMarshallerInterface
func (_mock *MockMarshallerInterface[T]) Marshal(config T) (string, error) {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Marshal")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(T) (string, error)); ok {
		return returnFunc(config)
	}
	if returnFunc, ok := ret.Get(0).(func(T) string); ok {
		r0 = returnFunc(config)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(T) error); ok {
		r1 = returnFunc(config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMarshallerInterface_Marshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Marshal'
type MockMarshallerInterface_Marshal_Call[T any] struct {
	*mock.Call
}

// Marshal is a helper method to define mock.On call
//   - config T
func (_e *MockMarshallerInterface_Expecter[T]) Marshal(config interface{}) *MockMarshallerInterface_Marshal_Call[T] {
	return &MockMarshallerInterface_Marshal_Call[T]{Call: _e.mock.On("Marshal", config)}
}

func (_c *MockMarshallerInterface_Marshal_Call[T]) Run(run func(config T)) *MockMarshallerInterface_Marshal_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMarshallerInterface_Marshal_Call[T]) Return(s string, err error) *MockMarshallerInterface_Marshal_Call[T] {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMarshallerInterface_Marshal_Call[T]) RunAndReturn(run func(config T) (string, error)) *MockMarshallerInterface_Marshal_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Unmarshal provides a mock function for the type MockMarshallerInterface
func (_mock *MockMarshallerInterface[T]) Unmarshal(data []byte, model *T) error {
	ret := _mock.Called(data, model)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte, *T) error); ok {
		r0 = returnFunc(data, model)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMarshallerInterface_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type MockMarshallerInterface_Unmarshal_Call[T any] struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - data []byte
//   - model *T
func (_e *MockMarshallerInterface_Expecter[T]) Unmarshal(data interface{}, model interface{}) *MockMarshallerInterface_Unmarshal_Call[T] {
	return &MockMarshallerInterface_Unmarshal_Call[T]{Call: _e.mock.On("Unmarshal", data, model)}
}

func (_c *MockMarshallerInterface_Unmarshal_Call[T]) Run(run func(data []byte, model *T)) *MockMarshallerInterface_Unmarshal_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		var arg1 *T
		if args[1] != nil {
			arg1 = args[1].(*T)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMarshallerInterface_Unmarshal_Call[T]) Return(err error) *MockMarshallerInterface_Unmarshal_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMarshallerInterface_Unmarshal_Call[T]) RunAndReturn(run func(data []byte, model *T) error) *MockMarshallerInterface_Unmarshal_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalString provides a mock function for the type MockMarshallerInterface
func (_mock *MockMarshallerInterface[T]) UnmarshalString(data string, model *T) error {
	ret := _mock.Called(data, model)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalString")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, *T) error); ok {
		r0 = returnFunc(data, model)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMarshallerInterface_UnmarshalString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalString'
type MockMarshallerInterface_UnmarshalString_Call[T any] struct {
	*mock.Call
}

// UnmarshalString is a helper method to define mock.On call
//   - data string
//   - model *T
func (_e *MockMarshallerInterface_Expecter[T]) UnmarshalString(data interface{}, model interface{}) *MockMarshallerInterface_UnmarshalString_Call[T] {
	return &MockMarshallerInterface_UnmarshalString_Call[T]{Call: _e.mock.On("UnmarshalString", data, model)}
}

func (_c *MockMarshallerInterface_UnmarshalString_Call[T]) Run(run func(data string, model *T)) *MockMarshallerInterface_UnmarshalString_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *T
		if args[1] != nil {
			arg1 = args[1].(*T)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMarshallerInterface_UnmarshalString_Call[T]) Return(err error) *MockMarshallerInterface_UnmarshalString_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMarshallerInterface_UnmarshalString_Call[T]) RunAndReturn(run func(data string, model *T) error) *MockMarshallerInterface_UnmarshalString_Call[T] {
	_c.Call.Return(run)
	return _c
}
